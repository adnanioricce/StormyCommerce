// import { object } from "prop-types";
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }    

    /**
     * @param address (optional) 
     * @return Success
     */
    addAddress(address: Address | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/address";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(address);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddAddress(_response);
        });
    }

    protected processAddAddress(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param signInVm (optional) 
     * @return Success
     */
    login(signInVm: SignInVm | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(signInVm);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param signUpVm (optional) 
     * @return Success
     */
    register(signUpVm: SignUpVm | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(signUpVm);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getAll(): Promise<CategoryDto[]> {
        let url_ = this.baseUrl + "/api/Category/GetAll/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<CategoryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    getCategoryById(id: number): Promise<CategoryDto> {
        let url_ = this.baseUrl + "/api/Category/GetCategoryById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCategoryById(_response);
        });
    }

    protected processGetCategoryById(response: Response): Promise<CategoryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryDto>(<any>null);
    }

    /**
     * @param category (optional) 
     * @return Success
     */
    createCategory(category: Category | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Category/CreateCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(category);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCategory(_response);
        });
    }

    protected processCreateCategory(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param category (optional) 
     * @return Success
     */
    editCategory(category: Category | null | undefined, id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/Category/EditCategory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(category);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditCategory(_response);
        });
    }

    protected processEditCategory(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param checkoutVm (optional) 
     * @return Success
     */
    checkoutBoleto(checkoutVm: CheckoutOrderVm | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Checkout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(checkoutVm);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckoutBoleto(_response);
        });
    }

    protected processCheckoutBoleto(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param orderDto (optional) 
     * @return Success
     */
    createOrder(orderDto: OrderDto | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(orderDto);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrder(_response);
        });
    }

    protected processCreateOrder(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getProductOverview(id: number | null | undefined, _0: string): Promise<ProductOverviewDto> {
        let url_ = this.baseUrl + "/api/Product/GetProductOverviewAsync/{0}?";
        if (_0 === undefined || _0 === null)
            throw new Error("The parameter '_0' must be defined.");
        url_ = url_.replace("{0}", encodeURIComponent("" + _0)); 
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProductOverview(_response);
        });
    }

    protected processGetProductOverview(response: Response): Promise<ProductOverviewDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductOverviewDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductOverviewDto>(<any>null);
    }

    /**
     * @param startIndex (optional) 
     * @param endIndex (optional) 
     * @return Success
     */
    getAllProducts(startIndex: number | null | undefined, endIndex: number | null | undefined): Promise<ProductDto[]> {
        let url_ = this.baseUrl + "/api/Product/GetAllProducts?";
        if (startIndex !== undefined)
            url_ += "startIndex=" + encodeURIComponent("" + startIndex) + "&"; 
        if (endIndex !== undefined)
            url_ += "endIndex=" + encodeURIComponent("" + endIndex) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllProducts(_response);
        });
    }

    protected processGetAllProducts(response: Response): Promise<ProductDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductDto[]>(<any>null);
    }

    /**
     * @param limit (optional) 
     * @return Success
     */
    getAllProductsOnHomepage(limit: number | null | undefined): Promise<ProductDto[]> {
        let url_ = this.baseUrl + "/api/Product/GetAllProductsOnHomepage?";
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllProductsOnHomepage(_response);
        });
    }

    protected processGetAllProductsOnHomepage(response: Response): Promise<ProductDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductDto[]>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getProductById(id: number | null | undefined, _0: string): Promise<ProductDto> {
        let url_ = this.baseUrl + "/api/Product/GetProductById/{0}?";
        if (_0 === undefined || _0 === null)
            throw new Error("The parameter '_0' must be defined.");
        url_ = url_.replace("{0}", encodeURIComponent("" + _0)); 
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProductById(_response);
        });
    }

    protected processGetProductById(response: Response): Promise<ProductDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductDto>(<any>null);
    }

    /**
     * @param _model (optional) 
     * @return Success
     */
    createProduct(_model: ProductDto | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Product/CreateProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(_model);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateProduct(_response);
        });
    }

    protected processCreateProduct(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param _model (optional) 
     * @return Success
     */
    editProduct(_model: ProductDto | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Product/EditProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(_model);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditProduct(_response);
        });
    }

    protected processEditProduct(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param categoryIds (optional) 
     * @param storeId (optional) 
     * @return Success
     */
    getNumberOfProductsInCategory(categoryIds: number[] | null | undefined, storeId: number | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/Product/GetNumberOfProductsInCategory?";
        if (storeId !== undefined)
            url_ += "storeId=" + encodeURIComponent("" + storeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(categoryIds);

        let options_ = <RequestInit>{
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNumberOfProductsInCategory(_response);
        });
    }

    protected processGetNumberOfProductsInCategory(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @param categoryId (optional) 
     * @param limit (optional) 
     * @return Success
     */
    getAllProductsOnCategory(categoryId: number | null | undefined, limit: number | null | undefined): Promise<ProductDto[]> {
        let url_ = this.baseUrl + "/api/Product/GetAllProductsOnCategory?";
        if (categoryId !== undefined)
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&"; 
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllProductsOnCategory(_response);
        });
    }

    protected processGetAllProductsOnCategory(response: Response): Promise<ProductDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductDto.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductDto[]>(<any>null);
    }

    /**
     * @return Success
     */
    seedDatabase(): Promise<void> {
        let url_ = this.baseUrl + "/seed";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSeedDatabase(_response);
        });
    }

    protected processSeedDatabase(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class Address implements IAddress {
    street?: string | undefined;
    firstAddress?: string | undefined;
    secondAddress?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    phoneNumber?: string | undefined;
    country?: string | undefined;
    whoReceives?: string | undefined;
    ownerId?: number | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.street = data["street"];
            this.firstAddress = data["firstAddress"];
            this.secondAddress = data["secondAddress"];
            this.city = data["city"];
            this.district = data["district"];
            this.state = data["state"];
            this.postalCode = data["postalCode"];
            this.number = data["number"];
            this.complement = data["complement"];
            this.phoneNumber = data["phoneNumber"];
            this.country = data["country"];
            this.whoReceives = data["whoReceives"];
            this.ownerId = data["ownerId"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["firstAddress"] = this.firstAddress;
        data["secondAddress"] = this.secondAddress;
        data["city"] = this.city;
        data["district"] = this.district;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        data["number"] = this.number;
        data["complement"] = this.complement;
        data["phoneNumber"] = this.phoneNumber;
        data["country"] = this.country;
        data["whoReceives"] = this.whoReceives;
        data["ownerId"] = this.ownerId;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IAddress {
    street?: string | undefined;
    firstAddress?: string | undefined;
    secondAddress?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    phoneNumber?: string | undefined;
    country?: string | undefined;
    whoReceives?: string | undefined;
    ownerId?: number | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class SignInVm implements ISignInVm {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ISignInVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"];
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): SignInVm {
        data = typeof data === 'object' ? data : {};
        let result = new SignInVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ISignInVm {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
}

export class SignUpVm implements ISignUpVm {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ISignUpVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"];
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): SignUpVm {
        data = typeof data === 'object' ? data : {};
        let result = new SignUpVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ISignUpVm {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
}

export class CategoryDto implements ICategoryDto {
    readonly id?: number | undefined;
    readonly name?: string | undefined;
    readonly slug?: string | undefined;
    readonly displayOrder?: number | undefined;
    readonly childrens?: CategoryDto[] | undefined;
    readonly parent?: CategoryDto | undefined;
    readonly description?: string | undefined;
    readonly thumbnailImageUrl?: string | undefined;

    constructor(data?: ICategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).name = data["name"];
            (<any>this).slug = data["slug"];
            (<any>this).displayOrder = data["displayOrder"];
            if (Array.isArray(data["childrens"])) {
                (<any>this).childrens = [] as any;
                for (let item of data["childrens"])
                    (<any>this).childrens!.push(CategoryDto.fromJS(item));
            }
            (<any>this).parent = data["parent"] ? CategoryDto.fromJS(data["parent"]) : <any>undefined;
            (<any>this).description = data["description"];
            (<any>this).thumbnailImageUrl = data["thumbnailImageUrl"];
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["displayOrder"] = this.displayOrder;
        if (Array.isArray(this.childrens)) {
            data["childrens"] = [];
            for (let item of this.childrens)
                data["childrens"].push(item.toJSON());
        }
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["thumbnailImageUrl"] = this.thumbnailImageUrl;
        return data; 
    }
}

export interface ICategoryDto {
    id?: number | undefined;
    name?: string | undefined;
    slug?: string | undefined;
    displayOrder?: number | undefined;
    childrens?: CategoryDto[] | undefined;
    parent?: CategoryDto | undefined;
    description?: string | undefined;
    thumbnailImageUrl?: string | undefined;
}

export class Category implements ICategory {
    name?: string | undefined;
    slug?: string | undefined;
    metaTitle?: string | undefined;
    metaKeywords?: string | undefined;
    metaDescription?: string | undefined;
    description?: string | undefined;
    displayOrder?: number | undefined;
    isPublished?: boolean | undefined;
    includeInMenu?: boolean | undefined;
    parentId?: number | undefined;
    parent?: Category | undefined;
    readonly childrens?: Category[] | undefined;
    thumbnailImageUrl?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.slug = data["slug"];
            this.metaTitle = data["metaTitle"];
            this.metaKeywords = data["metaKeywords"];
            this.metaDescription = data["metaDescription"];
            this.description = data["description"];
            this.displayOrder = data["displayOrder"];
            this.isPublished = data["isPublished"];
            this.includeInMenu = data["includeInMenu"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? Category.fromJS(data["parent"]) : <any>undefined;
            if (Array.isArray(data["childrens"])) {
                (<any>this).childrens = [] as any;
                for (let item of data["childrens"])
                    (<any>this).childrens!.push(Category.fromJS(item));
            }
            this.thumbnailImageUrl = data["thumbnailImageUrl"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["metaTitle"] = this.metaTitle;
        data["metaKeywords"] = this.metaKeywords;
        data["metaDescription"] = this.metaDescription;
        data["description"] = this.description;
        data["displayOrder"] = this.displayOrder;
        data["isPublished"] = this.isPublished;
        data["includeInMenu"] = this.includeInMenu;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        if (Array.isArray(this.childrens)) {
            data["childrens"] = [];
            for (let item of this.childrens)
                data["childrens"].push(item.toJSON());
        }
        data["thumbnailImageUrl"] = this.thumbnailImageUrl;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICategory {
    name?: string | undefined;
    slug?: string | undefined;
    metaTitle?: string | undefined;
    metaKeywords?: string | undefined;
    metaDescription?: string | undefined;
    description?: string | undefined;
    displayOrder?: number | undefined;
    isPublished?: boolean | undefined;
    includeInMenu?: boolean | undefined;
    parentId?: number | undefined;
    parent?: Category | undefined;
    childrens?: Category[] | undefined;
    thumbnailImageUrl?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class CheckoutOrderVm implements ICheckoutOrderVm {
    address?: AddressVm | undefined;
    deliveryCost?: number | undefined;
    discount?: number | undefined;
    items?: ProductDto[] | undefined;
    paymentMethod?: string | undefined;
    totalPrice?: number | undefined;
    shippingFee?: number | undefined;

    constructor(data?: ICheckoutOrderVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.address = data["address"] ? AddressVm.fromJS(data["address"]) : <any>undefined;
            this.deliveryCost = data["deliveryCost"];
            this.discount = data["discount"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(ProductDto.fromJS(item));
            }
            this.paymentMethod = data["paymentMethod"];
            this.totalPrice = data["totalPrice"];
            this.shippingFee = data["shippingFee"];
        }
    }

    static fromJS(data: any): CheckoutOrderVm {
        data = typeof data === 'object' ? data : {};
        let result = new CheckoutOrderVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["deliveryCost"] = this.deliveryCost;
        data["discount"] = this.discount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["paymentMethod"] = this.paymentMethod;
        data["totalPrice"] = this.totalPrice;
        data["shippingFee"] = this.shippingFee;
        return data; 
    }
}

export interface ICheckoutOrderVm {
    address?: AddressVm | undefined;
    deliveryCost?: number | undefined;
    discount?: number | undefined;
    items?: ProductDto[] | undefined;
    paymentMethod?: string | undefined;
    totalPrice?: number | undefined;
    shippingFee?: number | undefined;
}

export class AddressVm implements IAddressVm {
    city?: string | undefined;
    cpf?: string | undefined;
    complement?: string | undefined;
    firstAddress?: string | undefined;
    phoneNumber?: string | undefined;
    postalCode?: string | undefined;
    secondAddress?: string | undefined;
    state?: string | undefined;
    street?: string | undefined;
    whoReceives?: string | undefined;
    number?: string | undefined;

    constructor(data?: IAddressVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.city = data["city"];
            this.cpf = data["cpf"];
            this.complement = data["complement"];
            this.firstAddress = data["firstAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.postalCode = data["postalCode"];
            this.secondAddress = data["secondAddress"];
            this.state = data["state"];
            this.street = data["street"];
            this.whoReceives = data["whoReceives"];
            this.number = data["number"];
        }
    }

    static fromJS(data: any): AddressVm {
        data = typeof data === 'object' ? data : {};
        let result = new AddressVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["city"] = this.city;
        data["cpf"] = this.cpf;
        data["complement"] = this.complement;
        data["firstAddress"] = this.firstAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["postalCode"] = this.postalCode;
        data["secondAddress"] = this.secondAddress;
        data["state"] = this.state;
        data["street"] = this.street;
        data["whoReceives"] = this.whoReceives;
        data["number"] = this.number;
        return data; 
    }
}

export interface IAddressVm {
    city?: string | undefined;
    cpf?: string | undefined;
    complement?: string | undefined;
    firstAddress?: string | undefined;
    phoneNumber?: string | undefined;
    postalCode?: string | undefined;
    secondAddress?: string | undefined;
    state?: string | undefined;
    street?: string | undefined;
    whoReceives?: string | undefined;
    number?: string | undefined;
}

export class ProductDto implements IProductDto {
    id?: number | undefined;
    productName?: string | undefined;
    slug?: string | undefined;
    quantityPerUnity?: number | undefined;
    unitSize?: string | undefined;
    unitPrice?: number | undefined;
    discount?: number | undefined;
    unitWeight?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    price?: string | undefined;
    oldPrice?: string | undefined;
    thumbnailImage?: string | undefined;
    category?: CategoryDto | undefined;
    brand?: BrandDto | undefined;
    vendor?: VendorDto | undefined;
    medias?: MediaDto[] | undefined;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productName = data["productName"];
            this.slug = data["slug"];
            this.quantityPerUnity = data["quantityPerUnity"];
            this.unitSize = data["unitSize"];
            this.unitPrice = data["unitPrice"];
            this.discount = data["discount"];
            this.unitWeight = data["unitWeight"];
            this.unitsInStock = data["unitsInStock"];
            this.unitsOnOrder = data["unitsOnOrder"];
            this.price = data["price"];
            this.oldPrice = data["oldPrice"];
            this.thumbnailImage = data["thumbnailImage"];
            this.category = data["category"] ? CategoryDto.fromJS(data["category"]) : <any>undefined;
            this.brand = data["brand"] ? BrandDto.fromJS(data["brand"]) : <any>undefined;
            this.vendor = data["vendor"] ? VendorDto.fromJS(data["vendor"]) : <any>undefined;
            if (Array.isArray(data["medias"])) {
                this.medias = [] as any;
                for (let item of data["medias"])
                    this.medias!.push(MediaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productName"] = this.productName;
        data["slug"] = this.slug;
        data["quantityPerUnity"] = this.quantityPerUnity;
        data["unitSize"] = this.unitSize;
        data["unitPrice"] = this.unitPrice;
        data["discount"] = this.discount;
        data["unitWeight"] = this.unitWeight;
        data["unitsInStock"] = this.unitsInStock;
        data["unitsOnOrder"] = this.unitsOnOrder;
        data["price"] = this.price;
        data["oldPrice"] = this.oldPrice;
        data["thumbnailImage"] = this.thumbnailImage;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        data["vendor"] = this.vendor ? this.vendor.toJSON() : <any>undefined;
        if (Array.isArray(this.medias)) {
            data["medias"] = [];
            for (let item of this.medias)
                data["medias"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductDto {
    id?: number | undefined;
    productName?: string | undefined;
    slug?: string | undefined;
    quantityPerUnity?: number | undefined;
    unitSize?: string | undefined;
    unitPrice?: number | undefined;
    discount?: number | undefined;
    unitWeight?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    price?: string | undefined;
    oldPrice?: string | undefined;
    thumbnailImage?: string | undefined;
    category?: CategoryDto | undefined;
    brand?: BrandDto | undefined;
    vendor?: VendorDto | undefined;
    medias?: MediaDto[] | undefined;
}

export class BrandDto implements IBrandDto {
    readonly name?: string | undefined;
    readonly slug?: string | undefined;
    readonly website?: string | undefined;

    constructor(data?: IBrandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).name = data["name"];
            (<any>this).slug = data["slug"];
            (<any>this).website = data["website"];
        }
    }

    static fromJS(data: any): BrandDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["website"] = this.website;
        return data; 
    }
}

export interface IBrandDto {
    name?: string | undefined;
    slug?: string | undefined;
    website?: string | undefined;
}

export class VendorDto implements IVendorDto {

    constructor(data?: IVendorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        data = new VendorDto(data);
    }

    static fromJS(data: any): VendorDto {
        data = typeof data === 'object' ? data : {};
        let result = new VendorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IVendorDto {
}

export class MediaDto implements IMediaDto {
    readonly filename?: string | undefined;

    constructor(data?: IMediaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).filename = data["filename"];
        }
    }

    static fromJS(data: any): MediaDto {
        data = typeof data === 'object' ? data : {};
        let result = new MediaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filename"] = this.filename;
        return data; 
    }
}

export interface IMediaDto {
    filename?: string | undefined;
}

export class OrderDto implements IOrderDto {
    readonly orderUniqueKey?: string | undefined;
    readonly shippingMethod?: string | undefined;
    readonly paymentMethod?: string | undefined;
    readonly trackNumber?: string | undefined;
    readonly comment?: string | undefined;
    readonly discount?: number | undefined;
    readonly tax?: number | undefined;
    readonly totalWeight?: number | undefined;
    readonly totalPrice?: number | undefined;
    readonly deliveryCost?: number | undefined;
    readonly shippingAddress?: Address | undefined;
    readonly orderDate?: Date | undefined;
    readonly shippedDate?: Date | undefined;
    readonly deliveryDate?: Date | undefined;
    readonly paymentDate?: Date | undefined;
    readonly items?: OrderItemDto[] | undefined;
    readonly status?: OrderDtoStatus | undefined;
    readonly shippingStatus?: OrderDtoShippingStatus | undefined;
    isCancelled?: boolean | undefined;

    constructor(data?: IOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).orderUniqueKey = data["orderUniqueKey"];
            (<any>this).shippingMethod = data["shippingMethod"];
            (<any>this).paymentMethod = data["paymentMethod"];
            (<any>this).trackNumber = data["trackNumber"];
            (<any>this).comment = data["comment"];
            (<any>this).discount = data["discount"];
            (<any>this).tax = data["tax"];
            (<any>this).totalWeight = data["totalWeight"];
            (<any>this).totalPrice = data["totalPrice"];
            (<any>this).deliveryCost = data["deliveryCost"];
            (<any>this).shippingAddress = data["shippingAddress"] ? Address.fromJS(data["shippingAddress"]) : <any>undefined;
            (<any>this).orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>undefined;
            (<any>this).shippedDate = data["shippedDate"] ? new Date(data["shippedDate"].toString()) : <any>undefined;
            (<any>this).deliveryDate = data["deliveryDate"] ? new Date(data["deliveryDate"].toString()) : <any>undefined;
            (<any>this).paymentDate = data["paymentDate"] ? new Date(data["paymentDate"].toString()) : <any>undefined;
            if (Array.isArray(data["items"])) {
                (<any>this).items = [] as any;
                for (let item of data["items"])
                    (<any>this).items!.push(OrderItemDto.fromJS(item));
            }
            (<any>this).status = data["status"];
            (<any>this).shippingStatus = data["shippingStatus"];
            this.isCancelled = data["isCancelled"];
        }
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderUniqueKey"] = this.orderUniqueKey;
        data["shippingMethod"] = this.shippingMethod;
        data["paymentMethod"] = this.paymentMethod;
        data["trackNumber"] = this.trackNumber;
        data["comment"] = this.comment;
        data["discount"] = this.discount;
        data["tax"] = this.tax;
        data["totalWeight"] = this.totalWeight;
        data["totalPrice"] = this.totalPrice;
        data["deliveryCost"] = this.deliveryCost;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["shippingStatus"] = this.shippingStatus;
        data["isCancelled"] = this.isCancelled;
        return data; 
    }
}

export interface IOrderDto {
    orderUniqueKey?: string | undefined;
    shippingMethod?: string | undefined;
    paymentMethod?: string | undefined;
    trackNumber?: string | undefined;
    comment?: string | undefined;
    discount?: number | undefined;
    tax?: number | undefined;
    totalWeight?: number | undefined;
    totalPrice?: number | undefined;
    deliveryCost?: number | undefined;
    shippingAddress?: Address | undefined;
    orderDate?: Date | undefined;
    shippedDate?: Date | undefined;
    deliveryDate?: Date | undefined;
    paymentDate?: Date | undefined;
    items?: OrderItemDto[] | undefined;
    status?: OrderDtoStatus | undefined;
    shippingStatus?: OrderDtoShippingStatus | undefined;
    isCancelled?: boolean | undefined;
}

export class OrderItemDto implements IOrderItemDto {
    readonly productName?: string | undefined;
    readonly price?: string | undefined;
    readonly quantity?: number | undefined;
    readonly product?: ProductDto | undefined;

    constructor(data?: IOrderItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).productName = data["productName"];
            (<any>this).price = data["price"];
            (<any>this).quantity = data["quantity"];
            (<any>this).product = data["product"] ? ProductDto.fromJS(data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOrderItemDto {
    productName?: string | undefined;
    price?: string | undefined;
    quantity?: number | undefined;
    product?: ProductDto | undefined;
}

export class ProductOverviewDto implements IProductOverviewDto {
    readonly id?: number | undefined;
    readonly productName?: string | undefined;
    readonly slug?: string | undefined;
    readonly price?: string | undefined;
    readonly oldPrice?: string | undefined;
    readonly hasDiscountApplied?: boolean | undefined;
    readonly published?: boolean | undefined;
    readonly availableForPreorder?: boolean | undefined;
    readonly thumbnailImage?: string | undefined;
    readonly category?: CategoryDto | undefined;
    readonly medias?: MediaDto[] | undefined;

    constructor(data?: IProductOverviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).productName = data["productName"];
            (<any>this).slug = data["slug"];
            (<any>this).price = data["price"];
            (<any>this).oldPrice = data["oldPrice"];
            (<any>this).hasDiscountApplied = data["hasDiscountApplied"];
            (<any>this).published = data["published"];
            (<any>this).availableForPreorder = data["availableForPreorder"];
            (<any>this).thumbnailImage = data["thumbnailImage"];
            (<any>this).category = data["category"] ? CategoryDto.fromJS(data["category"]) : <any>undefined;
            if (Array.isArray(data["medias"])) {
                (<any>this).medias = [] as any;
                for (let item of data["medias"])
                    (<any>this).medias!.push(MediaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductOverviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductOverviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productName"] = this.productName;
        data["slug"] = this.slug;
        data["price"] = this.price;
        data["oldPrice"] = this.oldPrice;
        data["hasDiscountApplied"] = this.hasDiscountApplied;
        data["published"] = this.published;
        data["availableForPreorder"] = this.availableForPreorder;
        data["thumbnailImage"] = this.thumbnailImage;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        if (Array.isArray(this.medias)) {
            data["medias"] = [];
            for (let item of this.medias)
                data["medias"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductOverviewDto {
    id?: number | undefined;
    productName?: string | undefined;
    slug?: string | undefined;
    price?: string | undefined;
    oldPrice?: string | undefined;
    hasDiscountApplied?: boolean | undefined;
    published?: boolean | undefined;
    availableForPreorder?: boolean | undefined;
    thumbnailImage?: string | undefined;
    category?: CategoryDto | undefined;
    medias?: MediaDto[] | undefined;
}

export enum OrderDtoStatus {
    _1 = 1,
    _10 = 10,
    _20 = 20,
    _30 = 30,
    _35 = 35,
    _40 = 40,
    _50 = 50,
    _60 = 60,
    _70 = 70,
    _80 = 80,
    _90 = 90,
    _100 = 100,
}

export enum OrderDtoShippingStatus {
    _1 = 1,
    _5 = 5,
    _10 = 10,
    _15 = 15,
    _20 = 20,
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}