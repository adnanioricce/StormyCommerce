// /* tslint:disable */
// /* eslint-disable */
// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------
// // ReSharper disable InconsistentNaming

// import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

// export module stormyApi {

// export interface IAccountClient {
//     /**
//      * @param userId (optional) 
//      * @param code (optional) 
//      * @return Success
//      */
//     confirmEmail(userId?: string | null | undefined, code?: string | null | undefined): Promise<void>;
//     /**
//      * @param model (optional) 
//      * @return Success
//      */
//     resetPassword(model?: ResetPasswordViewModel | null | undefined): Promise<void>;
// }

// export class AccountClient implements IAccountClient {
//     private instance: AxiosInstance;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(baseUrl?: string, instance?: AxiosInstance) {
//         this.instance = instance ? instance : axios.create();
//         this.baseUrl = baseUrl ? baseUrl : "https://localhost:443";
//     }

//     /**
//      * @param userId (optional) 
//      * @param code (optional) 
//      * @return Success
//      */
//     confirmEmail(userId?: string | null | undefined, code?: string | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Account/ConfirmEmail?";
//         if (userId !== undefined)
//             url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
//         if (code !== undefined)
//             url_ += "code=" + encodeURIComponent("" + code) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processConfirmEmail(_response);
//         });
//     }

//     protected processConfirmEmail(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }

//     /**
//      * @param model (optional) 
//      * @return Success
//      */
//     resetPassword(model?: ResetPasswordViewModel | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Account/ResetPassword";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(model);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "POST",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processResetPassword(_response);
//         });
//     }

//     protected processResetPassword(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }
// }

// export interface IAuthenticationClient {
//     /**
//      * @param signInVm (optional) 
//      * @return Success
//      */
//     login(signInVm?: SignInVm | null | undefined): Promise<void>;
//     /**
//      * @param signUpVm (optional) 
//      * @return Success
//      */
//     register(signUpVm?: SignUpVm | null | undefined): Promise<void>;
//     /**
//      * @param model (optional) 
//      * @return Success
//      */
//     refreshToken(model?: RefreshTokenModel | null | undefined): Promise<void>;
//     /**
//      * @param model (optional) 
//      * @return Success
//      */
//     forgotPassword(model?: ForgotPasswordViewModel | null | undefined): Promise<void>;
// }

// export class AuthenticationClient implements IAuthenticationClient {
//     private instance: AxiosInstance;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(baseUrl?: string, instance?: AxiosInstance) {
//         this.instance = instance ? instance : axios.create();
//         this.baseUrl = baseUrl ? baseUrl : "https://localhost:443";
//     }

//     /**
//      * @param signInVm (optional) 
//      * @return Success
//      */
//     login(signInVm?: SignInVm | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Authentication/login";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(signInVm);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "POST",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processLogin(_response);
//         });
//     }

//     protected processLogin(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }

//     /**
//      * @param signUpVm (optional) 
//      * @return Success
//      */
//     register(signUpVm?: SignUpVm | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Authentication/register";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(signUpVm);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "POST",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processRegister(_response);
//         });
//     }

//     protected processRegister(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }

//     /**
//      * @param model (optional) 
//      * @return Success
//      */
//     refreshToken(model?: RefreshTokenModel | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Authentication/refresh_token";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(model);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "POST",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processRefreshToken(_response);
//         });
//     }

//     protected processRefreshToken(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }

//     /**
//      * @param model (optional) 
//      * @return Success
//      */
//     forgotPassword(model?: ForgotPasswordViewModel | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Authentication/ForgotPassword";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(model);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "POST",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processForgotPassword(_response);
//         });
//     }

//     protected processForgotPassword(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }
// }

// export interface ICategoryClient {
//     /**
//      * @return Success
//      */
//     getAll(): Promise<CategoryDto[]>;
//     /**
//      * @param id (optional) 
//      * @return Success
//      */
//     getCategoryById(id?: number | null | undefined): Promise<CategoryDto>;
//     /**
//      * @param category (optional) 
//      * @return Success
//      */
//     createCategory(category?: Category | null | undefined): Promise<void>;
//     /**
//      * @param category (optional) 
//      * @return Success
//      */
//     editCategory(category?: Category | null | undefined): Promise<void>;
// }

// export class CategoryClient implements ICategoryClient {
//     private instance: AxiosInstance;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(baseUrl?: string, instance?: AxiosInstance) {
//         this.instance = instance ? instance : axios.create();
//         this.baseUrl = baseUrl ? baseUrl : "https://localhost:443";
//     }

//     /**
//      * @return Success
//      */
//     getAll(): Promise<CategoryDto[]> {
//         let url_ = this.baseUrl + "/api/Category/list";
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processGetAll(_response);
//         });
//     }

//     protected processGetAll(response: AxiosResponse): Promise<CategoryDto[]> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(CategoryDto.fromJS(item));
//             }
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<CategoryDto[]>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @return Success
//      */
//     getCategoryById(id?: number | null | undefined): Promise<CategoryDto> {
//         let url_ = this.baseUrl + "/api/Category?";
//         if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processGetCategoryById(_response);
//         });
//     }

//     protected processGetCategoryById(response: AxiosResponse): Promise<CategoryDto> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             result200 = CategoryDto.fromJS(resultData200);
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<CategoryDto>(<any>null);
//     }

//     /**
//      * @param category (optional) 
//      * @return Success
//      */
//     createCategory(category?: Category | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Category/create";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(category);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "POST",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processCreateCategory(_response);
//         });
//     }

//     protected processCreateCategory(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }

//     /**
//      * @param category (optional) 
//      * @return Success
//      */
//     editCategory(category?: Category | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Category/edit";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(category);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "PUT",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processEditCategory(_response);
//         });
//     }

//     protected processEditCategory(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }
// }

// export interface ICheckoutClient {
//     /**
//      * @param requestModel (optional) 
//      * @return Success
//      */
//     checkoutBoleto(requestModel?: BoletoCheckoutRequest | null | undefined): Promise<void>;
//     /**
//      * @return Success
//      */
//     checkoutPostback(): Promise<void>;
// }

// export class CheckoutClient implements ICheckoutClient {
//     private instance: AxiosInstance;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(baseUrl?: string, instance?: AxiosInstance) {
//         this.instance = instance ? instance : axios.create();
//         this.baseUrl = baseUrl ? baseUrl : "https://localhost:443";
//     }

//     /**
//      * @param requestModel (optional) 
//      * @return Success
//      */
//     checkoutBoleto(requestModel?: BoletoCheckoutRequest | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Checkout/boleto";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(requestModel);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "POST",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processCheckoutBoleto(_response);
//         });
//     }

//     protected processCheckoutBoleto(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }

//     /**
//      * @return Success
//      */
//     checkoutPostback(): Promise<void> {
//         let url_ = this.baseUrl + "/api/Checkout/postback";
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "POST",
//             url: url_,
//             headers: {
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processCheckoutPostback(_response);
//         });
//     }

//     protected processCheckoutPostback(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }
// }





// export interface IProductClient {
//     /**
//      * @param searchPattern (optional) 
//      * @return Success
//      */
//     searchProducts(searchPattern?: string | null | undefined): Promise<ProductSearchResponse>;
//     /**
//      * @param id (optional) 
//      * @return Success
//      */
//     getProductOverview(id?: number | null | undefined): Promise<ProductOverviewDto>;
//     /**
//      * @param startIndex (optional) 
//      * @param endIndex (optional) 
//      * @return Success
//      */
//     getAllProducts(startIndex?: number | null | undefined, endIndex?: number | null | undefined): Promise<ProductDto[]>;
//     /**
//      * @param limit (optional) 
//      * @return Success
//      */
//     getAllProductsOnHomepage(limit?: number | null | undefined): Promise<ProductDto[]>;
//     /**
//      * @param id (optional) 
//      * @return Success
//      */
//     getProductById(id?: number | null | undefined): Promise<ProductDto>;
//     /**
//      * @param _model (optional) 
//      * @return Success
//      */
//     createProduct(_model?: CreateProductRequest | null | undefined): Promise<void>;
//     /**
//      * @param _model (optional) 
//      * @return Success
//      */
//     editProduct(_model?: StormyProduct | null | undefined): Promise<void>;
//     /**
//      * @param categoryIds (optional) 
//      * @return Success
//      */
//     getNumberOfProductsInCategory(categoryIds?: number[] | null | undefined): Promise<number>;
//     /**
//      * @param categoryId (optional) 
//      * @param limit (optional) 
//      * @return Success
//      */
//     getAllProductsOnCategory(categoryId?: number | null | undefined, limit?: number | null | undefined): Promise<ProductDto[]>;
// }

// export class ProductClient implements IProductClient {
//     private instance: AxiosInstance;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(baseUrl?: string, instance?: AxiosInstance) {
//         this.instance = instance ? instance : axios.create();
//         this.baseUrl = baseUrl ? baseUrl : "https://localhost:443";
//     }

//     /**
//      * @param searchPattern (optional) 
//      * @return Success
//      */
//     searchProducts(searchPattern?: string | null | undefined): Promise<ProductSearchResponse> {
//         let url_ = this.baseUrl + "/api/Product/search?";
//         if (searchPattern !== undefined)
//             url_ += "searchPattern=" + encodeURIComponent("" + searchPattern) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processSearchProducts(_response);
//         });
//     }

//     protected processSearchProducts(response: AxiosResponse): Promise<ProductSearchResponse> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             result200 = ProductSearchResponse.fromJS(resultData200);
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<ProductSearchResponse>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @return Success
//      */
//     getProductOverview(id?: number | null | undefined): Promise<ProductOverviewDto> {
//         let url_ = this.baseUrl + "/api/Product/get_overview?";
//         if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processGetProductOverview(_response);
//         });
//     }

//     protected processGetProductOverview(response: AxiosResponse): Promise<ProductOverviewDto> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             result200 = ProductOverviewDto.fromJS(resultData200);
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<ProductOverviewDto>(<any>null);
//     }

//     /**
//      * @param startIndex (optional) 
//      * @param endIndex (optional) 
//      * @return Success
//      */
//     getAllProducts(startIndex?: number | null | undefined, endIndex?: number | null | undefined): Promise<ProductDto[]> {
//         let url_ = this.baseUrl + "/api/Product/list?";
//         if (startIndex !== undefined)
//             url_ += "startIndex=" + encodeURIComponent("" + startIndex) + "&"; 
//         if (endIndex !== undefined)
//             url_ += "endIndex=" + encodeURIComponent("" + endIndex) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processGetAllProducts(_response);
//         });
//     }

//     protected processGetAllProducts(response: AxiosResponse): Promise<ProductDto[]> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(ProductDto.fromJS(item));
//             }
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<ProductDto[]>(<any>null);
//     }

//     /**
//      * @param limit (optional) 
//      * @return Success
//      */
//     getAllProductsOnHomepage(limit?: number | null | undefined): Promise<ProductDto[]> {
//         let url_ = this.baseUrl + "/api/Product/homepage?";
//         if (limit !== undefined)
//             url_ += "limit=" + encodeURIComponent("" + limit) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processGetAllProductsOnHomepage(_response);
//         });
//     }

//     protected processGetAllProductsOnHomepage(response: AxiosResponse): Promise<ProductDto[]> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(ProductDto.fromJS(item));
//             }
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<ProductDto[]>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @return Success
//      */
//     getProductById(id?: number | null | undefined): Promise<ProductDto> {
//         let url_ = this.baseUrl + "/api/Product/get?";
//         if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processGetProductById(_response);
//         });
//     }

//     protected processGetProductById(response: AxiosResponse): Promise<ProductDto> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             result200 = ProductDto.fromJS(resultData200);
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<ProductDto>(<any>null);
//     }

//     /**
//      * @param _model (optional) 
//      * @return Success
//      */
//     createProduct(_model?: CreateProductRequest | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Product/create";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(_model);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "POST",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processCreateProduct(_response);
//         });
//     }

//     protected processCreateProduct(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }

//     /**
//      * @param _model (optional) 
//      * @return Success
//      */
//     editProduct(_model?: StormyProduct | null | undefined): Promise<void> {
//         let url_ = this.baseUrl + "/api/Product/edit";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(_model);

//         let options_ = <AxiosRequestConfig>{
//             data: content_,
//             method: "PUT",
//             url: url_,
//             headers: {
//                 "Content-Type": "application/json", 
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processEditProduct(_response);
//         });
//     }

//     protected processEditProduct(response: AxiosResponse): Promise<void> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             return Promise.resolve<void>(<any>null);
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<void>(<any>null);
//     }

//     /**
//      * @param categoryIds (optional) 
//      * @return Success
//      */
//     getNumberOfProductsInCategory(categoryIds?: number[] | null | undefined): Promise<number> {
//         let url_ = this.baseUrl + "/api/Product/getlength/category?";
//         if (categoryIds !== undefined)
//             categoryIds && categoryIds.forEach(item => { url_ += "categoryIds=" + encodeURIComponent("" + item) + "&"; });
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processGetNumberOfProductsInCategory(_response);
//         });
//     }

//     protected processGetNumberOfProductsInCategory(response: AxiosResponse): Promise<number> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<number>(<any>null);
//     }

//     /**
//      * @param categoryId (optional) 
//      * @param limit (optional) 
//      * @return Success
//      */
//     getAllProductsOnCategory(categoryId?: number | null | undefined, limit?: number | null | undefined): Promise<ProductDto[]> {
//         let url_ = this.baseUrl + "/api/Product/list/category?";
//         if (categoryId !== undefined)
//             url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&"; 
//         if (limit !== undefined)
//             url_ += "limit=" + encodeURIComponent("" + limit) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ = <AxiosRequestConfig>{
//             method: "GET",
//             url: url_,
//             headers: {
//                 "Accept": "application/json"
//             }
//         };

//         return this.instance.request(options_).then((_response: AxiosResponse) => {
//             return this.processGetAllProductsOnCategory(_response);
//         });
//     }

//     protected processGetAllProductsOnCategory(response: AxiosResponse): Promise<ProductDto[]> {
//         const status = response.status;
//         let _headers: any = {};
//         if (response.headers && typeof response.headers === "object") {
//             for (let k in response.headers) {
//                 if (response.headers.hasOwnProperty(k)) {
//                     _headers[k] = response.headers[k];
//                 }
//             }
//         }
//         if (status === 200) {
//             const _responseText = response.data;
//             let result200: any = null;
//             let resultData200  = _responseText;
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200!.push(ProductDto.fromJS(item));
//             }
//             return result200;
//         } else if (status !== 200 && status !== 204) {
//             const _responseText = response.data;
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//         }
//         return Promise.resolve<ProductDto[]>(<any>null);
//     }
// }







// }