/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

export interface IAccountClient {
    /**
     * @param userId (optional) 
     * @param code (optional) 
     * @return Success
     */
    confirmEmail(userId?: string | null | undefined, code?: string | null | undefined): Promise<void>;
    /**
     * @param model (optional) 
     * @return Success
     */
    resetPassword(model?: ResetPasswordViewModel | null | undefined): Promise<void>;
    /**
     * @param model (optional) 
     * @return Success
     */
    addDefaultShippingAddress(model?: CreateShippingAddressRequest | null | undefined): Promise<void>;
    /**
     * @param request (optional) 
     * @return Success
     */
    editAccount(request?: EditCustomerRequest | null | undefined): Promise<void>;
    /**
     * @param request (optional) 
     * @return Success
     */
    editAddress(request?: EditCustomerAddressRequest | null | undefined): Promise<void>;
    resendConfirmationEmail(): Promise<Result>;
    /**
     * @return Success
     */
    getCurrentCustomer(): Promise<CustomerDto>;
    /**
     * @param password (optional) 
     * @return Success
     */
    deleteAccount(password?: string | null | undefined): Promise<void>;
    /**
     * @param addressId (optional) 
     * @return Success
     */
    deleteAddress(addressId?: number | null | undefined): Promise<void>;
}

export class AccountClient implements IAccountClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @param userId (optional) 
     * @param code (optional) 
     * @return Success
     */
    confirmEmail(userId?: string | null | undefined, code?: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/ConfirmEmail?";
        if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&"; 
        if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processConfirmEmail(_response);
        });
    }

    protected processConfirmEmail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    resetPassword(model?: ResetPasswordViewModel | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/reset_password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResetPassword(_response);
        });
    }

    protected processResetPassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    addDefaultShippingAddress(model?: CreateShippingAddressRequest | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/add_shipping_address";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddDefaultShippingAddress(_response);
        });
    }

    protected processAddDefaultShippingAddress(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    editAccount(request?: EditCustomerRequest | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/edit_account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processEditAccount(_response);
        });
    }

    protected processEditAccount(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    editAddress(request?: EditCustomerAddressRequest | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/edit_shipping_address";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processEditAddress(_response);
        });
    }

    protected processEditAddress(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    resendConfirmationEmail(): Promise<Result> {
        let url_ = this.baseUrl + "/api/Account/resend_confirm_email";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processResendConfirmationEmail(_response);
        });
    }

    protected processResendConfirmationEmail(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = Result.fromJS(resultDatadefault);
            return resultdefault;
        }
    }

    /**
     * @return Success
     */
    getCurrentCustomer(): Promise<CustomerDto> {
        let url_ = this.baseUrl + "/api/Account/get_current_user";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCurrentCustomer(_response);
        });
    }

    protected processGetCurrentCustomer(response: AxiosResponse): Promise<CustomerDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CustomerDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerDto>(<any>null);
    }

    /**
     * @param password (optional) 
     * @return Success
     */
    deleteAccount(password?: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/delete?";
        if (password !== undefined)
            url_ += "password=" + encodeURIComponent("" + password) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteAccount(_response);
        });
    }

    protected processDeleteAccount(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param addressId (optional) 
     * @return Success
     */
    deleteAddress(addressId?: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Account/delete_address?";
        if (addressId !== undefined)
            url_ += "addressId=" + encodeURIComponent("" + addressId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteAddress(_response);
        });
    }

    protected processDeleteAddress(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IAuthenticationClient {
    /**
     * @param signInVm (optional) 
     * @return Success
     */
    login(signInVm?: SignInVm | null | undefined): Promise<void>;
    /**
     * @param signUpVm (optional) 
     * @return Success
     */
    register(signUpVm?: SignUpVm | null | undefined): Promise<void>;
    /**
     * @param model (optional) 
     * @return Success
     */
    refreshToken(model?: RefreshTokenModel | null | undefined): Promise<void>;
    /**
     * @param model (optional) 
     * @return Success
     */
    forgotPassword(model?: ForgotPasswordViewModel | null | undefined): Promise<void>;
}

export class AuthenticationClient implements IAuthenticationClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @param signInVm (optional) 
     * @return Success
     */
    login(signInVm?: SignInVm | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(signInVm);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param signUpVm (optional) 
     * @return Success
     */
    register(signUpVm?: SignUpVm | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(signUpVm);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    refreshToken(model?: RefreshTokenModel | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/refresh_token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRefreshToken(_response);
        });
    }

    protected processRefreshToken(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    forgotPassword(model?: ForgotPasswordViewModel | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Authentication/ForgotPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processForgotPassword(_response);
        });
    }

    protected processForgotPassword(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IBrandClient {
    /**
     * @param brand (optional) 
     * @return Success
     */
    createBrand(brand?: Brand | null | undefined): Promise<void>;
    /**
     * @param id (optional) 
     * @return Success
     */
    getBrandById(id?: number | null | undefined): Promise<Brand>;
    /**
     * @return Success
     */
    getAllBrand(): Promise<Brand[]>;
}

export class BrandClient implements IBrandClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @param brand (optional) 
     * @return Success
     */
    createBrand(brand?: Brand | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Brand/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(brand);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateBrand(_response);
        });
    }

    protected processCreateBrand(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getBrandById(id?: number | null | undefined): Promise<Brand> {
        let url_ = this.baseUrl + "/api/Brand/get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetBrandById(_response);
        });
    }

    protected processGetBrandById(response: AxiosResponse): Promise<Brand> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Brand.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Brand>(<any>null);
    }

    /**
     * @return Success
     */
    getAllBrand(): Promise<Brand[]> {
        let url_ = this.baseUrl + "/api/Brand/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllBrand(_response);
        });
    }

    protected processGetAllBrand(response: AxiosResponse): Promise<Brand[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Brand.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Brand[]>(<any>null);
    }
}

export interface ICategoryClient {
    /**
     * @return Success
     */
    getAll(): Promise<CategoryDto[]>;
    /**
     * @param id (optional) 
     * @return Success
     */
    getCategoryById(id?: number | null | undefined): Promise<CategoryDto>;
    /**
     * @param category (optional) 
     * @return Success
     */
    createCategory(category?: Category | null | undefined): Promise<void>;
    /**
     * @param category (optional) 
     * @return Success
     */
    editCategory(category?: Category | null | undefined): Promise<void>;
}

export class CategoryClient implements ICategoryClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @return Success
     */
    getAll(): Promise<CategoryDto[]> {
        let url_ = this.baseUrl + "/api/Category/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<CategoryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CategoryDto[]>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getCategoryById(id?: number | null | undefined): Promise<CategoryDto> {
        let url_ = this.baseUrl + "/api/Category?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCategoryById(_response);
        });
    }

    protected processGetCategoryById(response: AxiosResponse): Promise<CategoryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CategoryDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CategoryDto>(<any>null);
    }

    /**
     * @param category (optional) 
     * @return Success
     */
    createCategory(category?: Category | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Category/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(category);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateCategory(_response);
        });
    }

    protected processCreateCategory(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param category (optional) 
     * @return Success
     */
    editCategory(category?: Category | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Category/edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(category);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processEditCategory(_response);
        });
    }

    protected processEditCategory(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface ICheckoutClient {
    /**
     * @param request (optional) 
     * @return Success
     */
    boletoCheckout(request?: CheckoutRequest | null | undefined): Promise<CheckoutResponse>;
    /**
     * @param request (optional) 
     * @return Success
     */
    creditCardCheckout(request?: CheckoutRequest | null | undefined): Promise<CreditCardCheckoutResponse>;
    /**
     * @param postback (optional) 
     * @return Success
     */
    checkoutPostback(postback?: Postback | null | undefined): Promise<void>;
}

export class CheckoutClient implements ICheckoutClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    boletoCheckout(request?: CheckoutRequest | null | undefined): Promise<CheckoutResponse> {
        let url_ = this.baseUrl + "/api/Checkout/boleto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processBoletoCheckout(_response);
        });
    }

    protected processBoletoCheckout(response: AxiosResponse): Promise<CheckoutResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CheckoutResponse.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CheckoutResponse>(<any>null);
    }

    /**
     * @param request (optional) 
     * @return Success
     */
    creditCardCheckout(request?: CheckoutRequest | null | undefined): Promise<CreditCardCheckoutResponse> {
        let url_ = this.baseUrl + "/api/Checkout/credit_card";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreditCardCheckout(_response);
        });
    }

    protected processCreditCardCheckout(response: AxiosResponse): Promise<CreditCardCheckoutResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CreditCardCheckoutResponse.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreditCardCheckoutResponse>(<any>null);
    }

    /**
     * @param postback (optional) 
     * @return Success
     */
    checkoutPostback(postback?: Postback | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Checkout/postback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(postback);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCheckoutPostback(_response);
        });
    }

    protected processCheckoutPostback(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface ICustomerClient {
    /**
     * @return Success
     */
    getCustomers(): Promise<StormyCustomer[]>;
}

export class CustomerClient implements ICustomerClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @return Success
     */
    getCustomers(): Promise<StormyCustomer[]> {
        let url_ = this.baseUrl + "/api/Customer/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCustomers(_response);
        });
    }

    protected processGetCustomers(response: AxiosResponse): Promise<StormyCustomer[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StormyCustomer.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StormyCustomer[]>(<any>null);
    }
}

export interface IDgmlClient {
    /**
     * @return Success
     */
    get(): Promise<void>;
}

export class DgmlClient implements IDgmlClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @return Success
     */
    get(): Promise<void> {
        let url_ = this.baseUrl + "/Dgml";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IMediaClient {
    /**
     * @param filename (optional) 
     * @param file (optional) 
     * @return Success
     */
    uploadMediaFile(filename?: string | null | undefined, file?: FileParameter | null | undefined): Promise<void>;
    /**
     * @param _model (optional) 
     * @return Success
     */
    addProductImage(_model?: CreateProductImageRequest | null | undefined): Promise<void>;
}

export class MediaClient implements IMediaClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @param filename (optional) 
     * @param file (optional) 
     * @return Success
     */
    uploadMediaFile(filename?: string | null | undefined, file?: FileParameter | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Media/upload";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (filename !== null && filename !== undefined)
            content_.append("Filename", filename.toString());
        if (file !== null && file !== undefined)
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUploadMediaFile(_response);
        });
    }

    protected processUploadMediaFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param _model (optional) 
     * @return Success
     */
    addProductImage(_model?: CreateProductImageRequest | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Media/add_image";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(_model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddProductImage(_response);
        });
    }

    protected processAddProductImage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IProductClient {
    /**
     * @param searchPattern (optional) 
     * @return Success
     */
    searchProducts(searchPattern?: string | null | undefined): Promise<ProductSearchResponse>;
    /**
     * @param productName (optional) 
     * @return Success
     */
    getProductByName(productName?: string | null | undefined): Promise<StormyProduct>;
    /**
     * @param id (optional) 
     * @return Success
     */
    getProductOverview(id?: number | null | undefined): Promise<ProductOverviewDto>;
    /**
     * @param startIndex (optional) 
     * @param endIndex (optional) 
     * @return Success
     */
    getAllProducts(startIndex?: number | null | undefined, endIndex?: number | null | undefined): Promise<ProductDto[]>;
    /**
     * @param limit (optional) 
     * @return Success
     */
    getAllProductsOnHomepage(limit?: number | null | undefined): Promise<ProductDto[]>;
    /**
     * @param id (optional) 
     * @return Success
     */
    getProductById(id?: number | null | undefined): Promise<ProductDto>;
    /**
     * @return Success
     */
    getNumberOfProducts(): Promise<number>;
    /**
     * @param _model (optional) 
     * @return Success
     */
    createProduct(_model?: CreateProductRequest | null | undefined): Promise<void>;
    /**
     * @param _model (optional) 
     * @return Success
     */
    editProduct(_model?: EditProductRequest | null | undefined): Promise<void>;
    /**
     * @param categoryIds (optional) 
     * @return Success
     */
    getNumberOfProductsInCategory(categoryIds?: number[] | null | undefined): Promise<number>;
    /**
     * @param categoryId (optional) 
     * @param limit (optional) 
     * @return Success
     */
    getAllProductsOnCategory(categoryId?: number | null | undefined, limit?: number | null | undefined): Promise<ProductDto[]>;
}

export class ProductClient implements IProductClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @param searchPattern (optional) 
     * @return Success
     */
    searchProducts(searchPattern?: string | null | undefined): Promise<ProductSearchResponse> {
        let url_ = this.baseUrl + "/api/Product/search?";
        if (searchPattern !== undefined)
            url_ += "searchPattern=" + encodeURIComponent("" + searchPattern) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearchProducts(_response);
        });
    }

    protected processSearchProducts(response: AxiosResponse): Promise<ProductSearchResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductSearchResponse.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductSearchResponse>(<any>null);
    }

    /**
     * @param productName (optional) 
     * @return Success
     */
    getProductByName(productName?: string | null | undefined): Promise<StormyProduct> {
        let url_ = this.baseUrl + "/api/Product/get_by_name?";
        if (productName !== undefined)
            url_ += "productName=" + encodeURIComponent("" + productName) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetProductByName(_response);
        });
    }

    protected processGetProductByName(response: AxiosResponse): Promise<StormyProduct> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = StormyProduct.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StormyProduct>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getProductOverview(id?: number | null | undefined): Promise<ProductOverviewDto> {
        let url_ = this.baseUrl + "/api/Product/get_overview?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetProductOverview(_response);
        });
    }

    protected processGetProductOverview(response: AxiosResponse): Promise<ProductOverviewDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductOverviewDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductOverviewDto>(<any>null);
    }

    /**
     * @param startIndex (optional) 
     * @param endIndex (optional) 
     * @return Success
     */
    getAllProducts(startIndex?: number | null | undefined, endIndex?: number | null | undefined): Promise<ProductDto[]> {
        let url_ = this.baseUrl + "/api/Product/list?";
        if (startIndex !== undefined)
            url_ += "startIndex=" + encodeURIComponent("" + startIndex) + "&"; 
        if (endIndex !== undefined)
            url_ += "endIndex=" + encodeURIComponent("" + endIndex) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllProducts(_response);
        });
    }

    protected processGetAllProducts(response: AxiosResponse): Promise<ProductDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDto[]>(<any>null);
    }

    /**
     * @param limit (optional) 
     * @return Success
     */
    getAllProductsOnHomepage(limit?: number | null | undefined): Promise<ProductDto[]> {
        let url_ = this.baseUrl + "/api/Product/homepage?";
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllProductsOnHomepage(_response);
        });
    }

    protected processGetAllProductsOnHomepage(response: AxiosResponse): Promise<ProductDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDto[]>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getProductById(id?: number | null | undefined): Promise<ProductDto> {
        let url_ = this.baseUrl + "/api/Product/get?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetProductById(_response);
        });
    }

    protected processGetProductById(response: AxiosResponse): Promise<ProductDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDto>(<any>null);
    }

    /**
     * @return Success
     */
    getNumberOfProducts(): Promise<number> {
        let url_ = this.baseUrl + "/api/Product/get_number_of_products";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetNumberOfProducts(_response);
        });
    }

    protected processGetNumberOfProducts(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @param _model (optional) 
     * @return Success
     */
    createProduct(_model?: CreateProductRequest | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Product/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(_model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreateProduct(_response);
        });
    }

    protected processCreateProduct(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param _model (optional) 
     * @return Success
     */
    editProduct(_model?: EditProductRequest | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Product/edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(_model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processEditProduct(_response);
        });
    }

    protected processEditProduct(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param categoryIds (optional) 
     * @return Success
     */
    getNumberOfProductsInCategory(categoryIds?: number[] | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/Product/getlength/category?";
        if (categoryIds !== undefined)
            categoryIds && categoryIds.forEach(item => { url_ += "categoryIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetNumberOfProductsInCategory(_response);
        });
    }

    protected processGetNumberOfProductsInCategory(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * @param categoryId (optional) 
     * @param limit (optional) 
     * @return Success
     */
    getAllProductsOnCategory(categoryId?: number | null | undefined, limit?: number | null | undefined): Promise<ProductDto[]> {
        let url_ = this.baseUrl + "/api/Product/list/category?";
        if (categoryId !== undefined)
            url_ += "categoryId=" + encodeURIComponent("" + categoryId) + "&"; 
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetAllProductsOnCategory(_response);
        });
    }

    protected processGetAllProductsOnCategory(response: AxiosResponse): Promise<ProductDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductDto.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDto[]>(<any>null);
    }
}

export interface IReviewClient {
    /**
     * @return Success
     */
    getCustomerReviews(): Promise<Review[]>;
    /**
     * @param reviewId (optional) 
     * @return Success
     */
    getReviewById(reviewId?: number | null | undefined): Promise<Review>;
    /**
     * @param model (optional) 
     * @return Success
     */
    writeReview(model?: WriteReviewRequest | null | undefined): Promise<Result>;
    /**
     * @param review (optional) 
     * @return Success
     */
    editReview(review?: Review | null | undefined): Promise<Result>;
    /**
     * @param reviewId (optional) 
     * @return Success
     */
    deleteReview(reviewId?: number | null | undefined): Promise<Result>;
}

export class ReviewClient implements IReviewClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @return Success
     */
    getCustomerReviews(): Promise<Review[]> {
        let url_ = this.baseUrl + "/api/Review/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetCustomerReviews(_response);
        });
    }

    protected processGetCustomerReviews(response: AxiosResponse): Promise<Review[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Review.fromJS(item));
            }
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Review[]>(<any>null);
    }

    /**
     * @param reviewId (optional) 
     * @return Success
     */
    getReviewById(reviewId?: number | null | undefined): Promise<Review> {
        let url_ = this.baseUrl + "/api/Review/get?";
        if (reviewId !== undefined)
            url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetReviewById(_response);
        });
    }

    protected processGetReviewById(response: AxiosResponse): Promise<Review> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Review.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Review>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    writeReview(model?: WriteReviewRequest | null | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Review/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processWriteReview(_response);
        });
    }

    protected processWriteReview(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(<any>null);
    }

    /**
     * @param review (optional) 
     * @return Success
     */
    editReview(review?: Review | null | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Review/edit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(review);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processEditReview(_response);
        });
    }

    protected processEditReview(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(<any>null);
    }

    /**
     * @param reviewId (optional) 
     * @return Success
     */
    deleteReview(reviewId?: number | null | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Review/delete?";
        if (reviewId !== undefined)
            url_ += "reviewId=" + encodeURIComponent("" + reviewId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDeleteReview(_response);
        });
    }

    protected processDeleteReview(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(<any>null);
    }
}

export interface IShippingClient {
    /**
     * @param model (optional) 
     * @return Success
     */
    calculateDeliveryCostAll(model?: DeliveryCalculationRequest | null | undefined): Promise<DeliveryCalculationOptionResponse[]>;
    /**
     * @param model (optional) 
     * @return Success
     */
    calculateDeliveryCost(model?: DeliveryCalculationForOrderRequest | null | undefined): Promise<DeliveryCalculationOptionResponse[]>;
}

export class ShippingClient implements IShippingClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    calculateDeliveryCostAll(model?: DeliveryCalculationRequest | null | undefined): Promise<DeliveryCalculationOptionResponse[]> {
        let url_ = this.baseUrl + "/api/Shipping/calcdelivery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCalculateDeliveryCostAll(_response);
        });
    }

    protected processCalculateDeliveryCostAll(response: AxiosResponse): Promise<DeliveryCalculationOptionResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeliveryCalculationOptionResponse.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeliveryCalculationOptionResponse[]>(<any>null);
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    calculateDeliveryCost(model?: DeliveryCalculationForOrderRequest | null | undefined): Promise<DeliveryCalculationOptionResponse[]> {
        let url_ = this.baseUrl + "/api/Shipping/calcdelivery_fororder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCalculateDeliveryCost(_response);
        });
    }

    protected processCalculateDeliveryCost(response: AxiosResponse): Promise<DeliveryCalculationOptionResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeliveryCalculationOptionResponse.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeliveryCalculationOptionResponse[]>(<any>null);
    }
}

export interface IWishListClient {
    /**
     * @param productId (optional) 
     * @return Success
     */
    addItemToWishList(productId?: number | null | undefined): Promise<void>;
    /**
     * @param productId (optional) 
     * @return Success
     */
    removeWishListItem(productId?: number | null | undefined): Promise<void>;
    /**
     * @return Success
     */
    getWishList(): Promise<WishlistDto>;
}

export class WishListClient implements IWishListClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://https//localhost:80";
    }

    /**
     * @param productId (optional) 
     * @return Success
     */
    addItemToWishList(productId?: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/WishList/add_item?";
        if (productId !== undefined)
            url_ += "productId=" + encodeURIComponent("" + productId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddItemToWishList(_response);
        });
    }

    protected processAddItemToWishList(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param productId (optional) 
     * @return Success
     */
    removeWishListItem(productId?: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/WishList/remove_item?";
        if (productId !== undefined)
            url_ += "productId=" + encodeURIComponent("" + productId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveWishListItem(_response);
        });
    }

    protected processRemoveWishListItem(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    getWishList(): Promise<WishlistDto> {
        let url_ = this.baseUrl + "/api/WishList/get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetWishList(_response);
        });
    }

    protected processGetWishList(response: AxiosResponse): Promise<WishlistDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = WishlistDto.fromJS(resultData200);
            return result200;
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);
        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WishlistDto>(<any>null);
    }
}

export class ResetPasswordViewModel implements IResetPasswordViewModel {
    email!: string;
    password!: string;
    confirmPassword?: string | undefined;
    code?: string | undefined;

    constructor(data?: IResetPasswordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
            this.confirmPassword = data["confirmPassword"];
            this.code = data["code"];
        }
    }

    static fromJS(data: any): ResetPasswordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["code"] = this.code;
        return data; 
    }
}

export interface IResetPasswordViewModel {
    email: string;
    password: string;
    confirmPassword?: string | undefined;
    code?: string | undefined;
}

export class CreateShippingAddressRequest implements ICreateShippingAddressRequest {
    address!: Address;
    whoReceives?: string | undefined;
    type!: CreateShippingAddressRequestType;
    isDefault?: boolean | undefined;

    constructor(data?: ICreateShippingAddressRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.address = new Address();
        }
    }

    init(data?: any) {
        if (data) {
            this.address = data["address"] ? Address.fromJS(data["address"]) : new Address();
            this.whoReceives = data["whoReceives"];
            this.type = data["type"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): CreateShippingAddressRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateShippingAddressRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["whoReceives"] = this.whoReceives;
        data["type"] = this.type;
        data["isDefault"] = this.isDefault;
        return data; 
    }
}

export interface ICreateShippingAddressRequest {
    address: Address;
    whoReceives?: string | undefined;
    type: CreateShippingAddressRequestType;
    isDefault?: boolean | undefined;
}

export class Address implements IAddress {
    readonly street?: string | undefined;
    readonly firstAddress?: string | undefined;
    readonly secondAddress?: string | undefined;
    readonly city?: string | undefined;
    readonly district?: string | undefined;
    readonly state?: string | undefined;
    readonly postalCode?: string | undefined;
    readonly number?: string | undefined;
    readonly complement?: string | undefined;
    readonly country?: string | undefined;

    constructor(data?: IAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).street = data["street"];
            (<any>this).firstAddress = data["firstAddress"];
            (<any>this).secondAddress = data["secondAddress"];
            (<any>this).city = data["city"];
            (<any>this).district = data["district"];
            (<any>this).state = data["state"];
            (<any>this).postalCode = data["postalCode"];
            (<any>this).number = data["number"];
            (<any>this).complement = data["complement"];
            (<any>this).country = data["country"];
        }
    }

    static fromJS(data: any): Address {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["firstAddress"] = this.firstAddress;
        data["secondAddress"] = this.secondAddress;
        data["city"] = this.city;
        data["district"] = this.district;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        data["number"] = this.number;
        data["complement"] = this.complement;
        data["country"] = this.country;
        return data; 
    }
}

export interface IAddress {
    street?: string | undefined;
    firstAddress?: string | undefined;
    secondAddress?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    country?: string | undefined;
}

export class EditCustomerRequest implements IEditCustomerRequest {
    cpf?: string | undefined;
    fullName?: string | undefined;
    userName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    dateOfBirth?: Date | undefined;

    constructor(data?: IEditCustomerRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cpf = data["cpf"];
            this.fullName = data["fullName"];
            this.userName = data["userName"];
            this.phoneNumber = data["phoneNumber"];
            this.email = data["email"];
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): EditCustomerRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditCustomerRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cpf"] = this.cpf;
        data["fullName"] = this.fullName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IEditCustomerRequest {
    cpf?: string | undefined;
    fullName?: string | undefined;
    userName?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    dateOfBirth?: Date | undefined;
}

export class EditCustomerAddressRequest implements IEditCustomerAddressRequest {
    address?: Address | undefined;
    whoReceives?: string | undefined;

    constructor(data?: IEditCustomerAddressRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.address = data["address"] ? Address.fromJS(data["address"]) : <any>undefined;
            this.whoReceives = data["whoReceives"];
        }
    }

    static fromJS(data: any): EditCustomerAddressRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditCustomerAddressRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["whoReceives"] = this.whoReceives;
        return data; 
    }
}

export interface IEditCustomerAddressRequest {
    address?: Address | undefined;
    whoReceives?: string | undefined;
}

export class Result implements IResult {
    success?: boolean | undefined;
    message?: string | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        return data; 
    }
}

export interface IResult {
    success?: boolean | undefined;
    message?: string | undefined;
}

export class CustomerDto implements ICustomerDto {
    readonly userName?: string | undefined;
    readonly email?: string | undefined;
    readonly addresses?: CustomerAddressDto[] | undefined;
    readonly customerReviews?: CustomerReviewDto[] | undefined;
    readonly cpf?: string | undefined;
    readonly phoneNumber?: string | undefined;
    readonly fullName?: string | undefined;
    emailConfirmed?: boolean | undefined;
    dateOfBirth?: Date | undefined;
    customerWishlist?: WishlistDto | undefined;

    constructor(data?: ICustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).userName = data["userName"];
            (<any>this).email = data["email"];
            if (Array.isArray(data["addresses"])) {
                (<any>this).addresses = [] as any;
                for (let item of data["addresses"])
                    (<any>this).addresses!.push(CustomerAddressDto.fromJS(item));
            }
            if (Array.isArray(data["customerReviews"])) {
                (<any>this).customerReviews = [] as any;
                for (let item of data["customerReviews"])
                    (<any>this).customerReviews!.push(CustomerReviewDto.fromJS(item));
            }
            (<any>this).cpf = data["cpf"];
            (<any>this).phoneNumber = data["phoneNumber"];
            (<any>this).fullName = data["fullName"];
            this.emailConfirmed = data["emailConfirmed"];
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>undefined;
            this.customerWishlist = data["customerWishlist"] ? WishlistDto.fromJS(data["customerWishlist"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["email"] = this.email;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        if (Array.isArray(this.customerReviews)) {
            data["customerReviews"] = [];
            for (let item of this.customerReviews)
                data["customerReviews"].push(item.toJSON());
        }
        data["cpf"] = this.cpf;
        data["phoneNumber"] = this.phoneNumber;
        data["fullName"] = this.fullName;
        data["emailConfirmed"] = this.emailConfirmed;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["customerWishlist"] = this.customerWishlist ? this.customerWishlist.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICustomerDto {
    userName?: string | undefined;
    email?: string | undefined;
    addresses?: CustomerAddressDto[] | undefined;
    customerReviews?: CustomerReviewDto[] | undefined;
    cpf?: string | undefined;
    phoneNumber?: string | undefined;
    fullName?: string | undefined;
    emailConfirmed?: boolean | undefined;
    dateOfBirth?: Date | undefined;
    customerWishlist?: WishlistDto | undefined;
}

export class CustomerAddressDto implements ICustomerAddressDto {
    readonly id?: number | undefined;
    readonly address?: Address | undefined;
    readonly type?: CustomerAddressDtoType | undefined;
    readonly isDefault?: boolean | undefined;
    readonly whoReceives?: string | undefined;
    readonly owner?: CustomerDto | undefined;

    constructor(data?: ICustomerAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).address = data["address"] ? Address.fromJS(data["address"]) : <any>undefined;
            (<any>this).type = data["type"];
            (<any>this).isDefault = data["isDefault"];
            (<any>this).whoReceives = data["whoReceives"];
            (<any>this).owner = data["owner"] ? CustomerDto.fromJS(data["owner"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CustomerAddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerAddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["type"] = this.type;
        data["isDefault"] = this.isDefault;
        data["whoReceives"] = this.whoReceives;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICustomerAddressDto {
    id?: number | undefined;
    address?: Address | undefined;
    type?: CustomerAddressDtoType | undefined;
    isDefault?: boolean | undefined;
    whoReceives?: string | undefined;
    owner?: CustomerDto | undefined;
}

export class CustomerReviewDto implements ICustomerReviewDto {
    readonly id?: number | undefined;
    readonly title?: string | undefined;
    readonly comment?: string | undefined;
    readonly email?: string | undefined;
    readonly reviewerName?: string | undefined;
    readonly userName?: string | undefined;
    readonly ratingLevel?: number | undefined;

    constructor(data?: ICustomerReviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).title = data["title"];
            (<any>this).comment = data["comment"];
            (<any>this).email = data["email"];
            (<any>this).reviewerName = data["reviewerName"];
            (<any>this).userName = data["userName"];
            (<any>this).ratingLevel = data["ratingLevel"];
        }
    }

    static fromJS(data: any): CustomerReviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerReviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["comment"] = this.comment;
        data["email"] = this.email;
        data["reviewerName"] = this.reviewerName;
        data["userName"] = this.userName;
        data["ratingLevel"] = this.ratingLevel;
        return data; 
    }
}

export interface ICustomerReviewDto {
    id?: number | undefined;
    title?: string | undefined;
    comment?: string | undefined;
    email?: string | undefined;
    reviewerName?: string | undefined;
    userName?: string | undefined;
    ratingLevel?: number | undefined;
}

export class WishlistDto implements IWishlistDto {
    items?: WishListItemDto[] | undefined;

    constructor(data?: IWishlistDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(WishListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WishlistDto {
        data = typeof data === 'object' ? data : {};
        let result = new WishlistDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IWishlistDto {
    items?: WishListItemDto[] | undefined;
}

export class WishListItemDto implements IWishListItemDto {
    readonly product?: ProductDto | undefined;

    constructor(data?: IWishListItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).product = data["product"] ? ProductDto.fromJS(data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WishListItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new WishListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IWishListItemDto {
    product?: ProductDto | undefined;
}

export class ProductDto implements IProductDto {
    id?: number | undefined;
    productName?: string | undefined;
    shortDescription?: string | undefined;
    productAvailable?: boolean | undefined;
    slug?: string | undefined;
    quantityPerUnity?: number | undefined;
    availableSizes?: string | undefined;
    unitPrice?: number | undefined;
    discount?: number | undefined;
    height?: number | undefined;
    width?: number | undefined;
    length?: number | undefined;
    unitWeight?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    price?: string | undefined;
    oldPrice?: string | undefined;
    thumbnailImage?: string | undefined;
    categories?: ProductCategoryDto[] | undefined;
    brand?: BrandDto | undefined;
    vendor?: VendorDto | undefined;
    medias?: ProductMediaDto[] | undefined;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.productName = data["productName"];
            this.shortDescription = data["shortDescription"];
            this.productAvailable = data["productAvailable"];
            this.slug = data["slug"];
            this.quantityPerUnity = data["quantityPerUnity"];
            this.availableSizes = data["availableSizes"];
            this.unitPrice = data["unitPrice"];
            this.discount = data["discount"];
            this.height = data["height"];
            this.width = data["width"];
            this.length = data["length"];
            this.unitWeight = data["unitWeight"];
            this.unitsInStock = data["unitsInStock"];
            this.unitsOnOrder = data["unitsOnOrder"];
            this.price = data["price"];
            this.oldPrice = data["oldPrice"];
            this.thumbnailImage = data["thumbnailImage"];
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(ProductCategoryDto.fromJS(item));
            }
            this.brand = data["brand"] ? BrandDto.fromJS(data["brand"]) : <any>undefined;
            this.vendor = data["vendor"] ? VendorDto.fromJS(data["vendor"]) : <any>undefined;
            if (Array.isArray(data["medias"])) {
                this.medias = [] as any;
                for (let item of data["medias"])
                    this.medias!.push(ProductMediaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productName"] = this.productName;
        data["shortDescription"] = this.shortDescription;
        data["productAvailable"] = this.productAvailable;
        data["slug"] = this.slug;
        data["quantityPerUnity"] = this.quantityPerUnity;
        data["availableSizes"] = this.availableSizes;
        data["unitPrice"] = this.unitPrice;
        data["discount"] = this.discount;
        data["height"] = this.height;
        data["width"] = this.width;
        data["length"] = this.length;
        data["unitWeight"] = this.unitWeight;
        data["unitsInStock"] = this.unitsInStock;
        data["unitsOnOrder"] = this.unitsOnOrder;
        data["price"] = this.price;
        data["oldPrice"] = this.oldPrice;
        data["thumbnailImage"] = this.thumbnailImage;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        data["vendor"] = this.vendor ? this.vendor.toJSON() : <any>undefined;
        if (Array.isArray(this.medias)) {
            data["medias"] = [];
            for (let item of this.medias)
                data["medias"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductDto {
    id?: number | undefined;
    productName?: string | undefined;
    shortDescription?: string | undefined;
    productAvailable?: boolean | undefined;
    slug?: string | undefined;
    quantityPerUnity?: number | undefined;
    availableSizes?: string | undefined;
    unitPrice?: number | undefined;
    discount?: number | undefined;
    height?: number | undefined;
    width?: number | undefined;
    length?: number | undefined;
    unitWeight?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    price?: string | undefined;
    oldPrice?: string | undefined;
    thumbnailImage?: string | undefined;
    categories?: ProductCategoryDto[] | undefined;
    brand?: BrandDto | undefined;
    vendor?: VendorDto | undefined;
    medias?: ProductMediaDto[] | undefined;
}

export class ProductCategoryDto implements IProductCategoryDto {
    readonly category?: CategoryDto | undefined;

    constructor(data?: IProductCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).category = data["category"] ? CategoryDto.fromJS(data["category"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IProductCategoryDto {
    category?: CategoryDto | undefined;
}

export class BrandDto implements IBrandDto {
    readonly name?: string | undefined;
    readonly slug?: string | undefined;
    readonly website?: string | undefined;

    constructor(data?: IBrandDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).name = data["name"];
            (<any>this).slug = data["slug"];
            (<any>this).website = data["website"];
        }
    }

    static fromJS(data: any): BrandDto {
        data = typeof data === 'object' ? data : {};
        let result = new BrandDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["website"] = this.website;
        return data; 
    }
}

export interface IBrandDto {
    name?: string | undefined;
    slug?: string | undefined;
    website?: string | undefined;
}

export class VendorDto implements IVendorDto {
    companyName?: string | undefined;
    contactTitle?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    webSite?: string | undefined;
    typeGoods?: string | undefined;
    sizeUrl?: string | undefined;
    logo?: string | undefined;
    note?: string | undefined;

    constructor(data?: IVendorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyName = data["companyName"];
            this.contactTitle = data["contactTitle"];
            this.phone = data["phone"];
            this.email = data["email"];
            this.webSite = data["webSite"];
            this.typeGoods = data["typeGoods"];
            this.sizeUrl = data["sizeUrl"];
            this.logo = data["logo"];
            this.note = data["note"];
        }
    }

    static fromJS(data: any): VendorDto {
        data = typeof data === 'object' ? data : {};
        let result = new VendorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        data["contactTitle"] = this.contactTitle;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["webSite"] = this.webSite;
        data["typeGoods"] = this.typeGoods;
        data["sizeUrl"] = this.sizeUrl;
        data["logo"] = this.logo;
        data["note"] = this.note;
        return data; 
    }
}

export interface IVendorDto {
    companyName?: string | undefined;
    contactTitle?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    webSite?: string | undefined;
    typeGoods?: string | undefined;
    sizeUrl?: string | undefined;
    logo?: string | undefined;
    note?: string | undefined;
}

export class ProductMediaDto implements IProductMediaDto {
    fileName?: string | undefined;
    fileSize?: number | undefined;
    seoFilename?: string | undefined;

    constructor(data?: IProductMediaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.fileSize = data["fileSize"];
            this.seoFilename = data["seoFilename"];
        }
    }

    static fromJS(data: any): ProductMediaDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductMediaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileSize"] = this.fileSize;
        data["seoFilename"] = this.seoFilename;
        return data; 
    }
}

export interface IProductMediaDto {
    fileName?: string | undefined;
    fileSize?: number | undefined;
    seoFilename?: string | undefined;
}

export class CategoryDto implements ICategoryDto {
    readonly id?: number | undefined;
    readonly name?: string | undefined;
    readonly slug?: string | undefined;
    readonly displayOrder?: number | undefined;
    readonly description?: string | undefined;
    readonly thumbnailImageUrl?: string | undefined;

    constructor(data?: ICategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).name = data["name"];
            (<any>this).slug = data["slug"];
            (<any>this).displayOrder = data["displayOrder"];
            (<any>this).description = data["description"];
            (<any>this).thumbnailImageUrl = data["thumbnailImageUrl"];
        }
    }

    static fromJS(data: any): CategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["displayOrder"] = this.displayOrder;
        data["description"] = this.description;
        data["thumbnailImageUrl"] = this.thumbnailImageUrl;
        return data; 
    }
}

export interface ICategoryDto {
    id?: number | undefined;
    name?: string | undefined;
    slug?: string | undefined;
    displayOrder?: number | undefined;
    description?: string | undefined;
    thumbnailImageUrl?: string | undefined;
}

export class SignInVm implements ISignInVm {
    email!: string;
    password!: string;

    constructor(data?: ISignInVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): SignInVm {
        data = typeof data === 'object' ? data : {};
        let result = new SignInVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data; 
    }
}

export interface ISignInVm {
    email: string;
    password: string;
}

export class SignUpVm implements ISignUpVm {
    email!: string;
    password!: string;
    confirmPassword?: string | undefined;
    userName?: string | undefined;

    constructor(data?: ISignUpVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
            this.password = data["password"];
            this.confirmPassword = data["confirmPassword"];
            this.userName = data["userName"];
        }
    }

    static fromJS(data: any): SignUpVm {
        data = typeof data === 'object' ? data : {};
        let result = new SignUpVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["userName"] = this.userName;
        return data; 
    }
}

export interface ISignUpVm {
    email: string;
    password: string;
    confirmPassword?: string | undefined;
    userName?: string | undefined;
}

export class RefreshTokenModel implements IRefreshTokenModel {
    token?: string | undefined;
    refreshToken?: string | undefined;

    constructor(data?: IRefreshTokenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"];
            this.refreshToken = data["refreshToken"];
        }
    }

    static fromJS(data: any): RefreshTokenModel {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["refreshToken"] = this.refreshToken;
        return data; 
    }
}

export interface IRefreshTokenModel {
    token?: string | undefined;
    refreshToken?: string | undefined;
}

export class ForgotPasswordViewModel implements IForgotPasswordViewModel {
    email!: string;

    constructor(data?: IForgotPasswordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.email = data["email"];
        }
    }

    static fromJS(data: any): ForgotPasswordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data; 
    }
}

export interface IForgotPasswordViewModel {
    email: string;
}

export class Brand implements IBrand {
    name?: string | undefined;
    slug?: string | undefined;
    description?: string | undefined;
    website?: string | undefined;
    logoImage?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IBrand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.slug = data["slug"];
            this.description = data["description"];
            this.website = data["website"];
            this.logoImage = data["logoImage"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Brand {
        data = typeof data === 'object' ? data : {};
        let result = new Brand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["description"] = this.description;
        data["website"] = this.website;
        data["logoImage"] = this.logoImage;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IBrand {
    name?: string | undefined;
    slug?: string | undefined;
    description?: string | undefined;
    website?: string | undefined;
    logoImage?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class Category implements ICategory {
    name?: string | undefined;
    slug?: string | undefined;
    description?: string | undefined;
    displayOrder?: number | undefined;
    isPublished?: boolean | undefined;
    includeInMenu?: boolean | undefined;
    parentId?: number | undefined;
    childrenId?: number | undefined;
    thumbnailImageUrl?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.slug = data["slug"];
            this.description = data["description"];
            this.displayOrder = data["displayOrder"];
            this.isPublished = data["isPublished"];
            this.includeInMenu = data["includeInMenu"];
            this.parentId = data["parentId"];
            this.childrenId = data["childrenId"];
            this.thumbnailImageUrl = data["thumbnailImageUrl"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["slug"] = this.slug;
        data["description"] = this.description;
        data["displayOrder"] = this.displayOrder;
        data["isPublished"] = this.isPublished;
        data["includeInMenu"] = this.includeInMenu;
        data["parentId"] = this.parentId;
        data["childrenId"] = this.childrenId;
        data["thumbnailImageUrl"] = this.thumbnailImageUrl;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICategory {
    name?: string | undefined;
    slug?: string | undefined;
    description?: string | undefined;
    displayOrder?: number | undefined;
    isPublished?: boolean | undefined;
    includeInMenu?: boolean | undefined;
    parentId?: number | undefined;
    childrenId?: number | undefined;
    thumbnailImageUrl?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class CheckoutRequest implements ICheckoutRequest {
    amount!: number;
    shippingMethod?: CheckoutRequestShippingMethod | undefined;
    pickUpOnStore?: boolean | undefined;
    items!: CartItem[];
    paymentMethod?: CheckoutRequestPaymentMethod | undefined;
    postalCode?: string | undefined;
    cardHash?: string | undefined;

    constructor(data?: ICheckoutRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.amount = data["amount"];
            this.shippingMethod = data["shippingMethod"];
            this.pickUpOnStore = data["pickUpOnStore"];
            if (Array.isArray(data["items"])) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(CartItem.fromJS(item));
            }
            this.paymentMethod = data["paymentMethod"];
            this.postalCode = data["postalCode"];
            this.cardHash = data["cardHash"];
        }
    }

    static fromJS(data: any): CheckoutRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CheckoutRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["shippingMethod"] = this.shippingMethod;
        data["pickUpOnStore"] = this.pickUpOnStore;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["paymentMethod"] = this.paymentMethod;
        data["postalCode"] = this.postalCode;
        data["cardHash"] = this.cardHash;
        return data; 
    }
}

export interface ICheckoutRequest {
    amount: number;
    shippingMethod?: CheckoutRequestShippingMethod | undefined;
    pickUpOnStore?: boolean | undefined;
    items: CartItem[];
    paymentMethod?: CheckoutRequestPaymentMethod | undefined;
    postalCode?: string | undefined;
    cardHash?: string | undefined;
}

export class CartItem implements ICartItem {
    stormyProductId!: number;
    quantity!: number;

    constructor(data?: ICartItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.stormyProductId = data["stormyProductId"];
            this.quantity = data["quantity"];
        }
    }

    static fromJS(data: any): CartItem {
        data = typeof data === 'object' ? data : {};
        let result = new CartItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stormyProductId"] = this.stormyProductId;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface ICartItem {
    stormyProductId: number;
    quantity: number;
}

export class CheckoutResponse implements ICheckoutResponse {
    payment?: PaymentDto | undefined;
    shipment?: ShipmentDto | undefined;
    order?: OrderDto | undefined;

    constructor(data?: ICheckoutResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.payment = data["payment"] ? PaymentDto.fromJS(data["payment"]) : <any>undefined;
            this.shipment = data["shipment"] ? ShipmentDto.fromJS(data["shipment"]) : <any>undefined;
            this.order = data["order"] ? OrderDto.fromJS(data["order"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CheckoutResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CheckoutResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payment"] = this.payment ? this.payment.toJSON() : <any>undefined;
        data["shipment"] = this.shipment ? this.shipment.toJSON() : <any>undefined;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICheckoutResponse {
    payment?: PaymentDto | undefined;
    shipment?: ShipmentDto | undefined;
    order?: OrderDto | undefined;
}

export class PaymentDto implements IPaymentDto {
    readonly amount?: number | undefined;
    readonly createdOn?: Date | undefined;
    readonly paidOutAt?: Date | undefined;
    readonly paymentFee?: number | undefined;
    readonly paymentMethod?: PaymentDtoPaymentMethod | undefined;
    readonly gatewayTransactionId?: string | undefined;
    readonly paymentStatus?: PaymentDtoPaymentStatus | undefined;
    readonly failureMessage?: string | undefined;
    readonly boletoBarcode?: string | undefined;
    readonly boletoUrl?: string | undefined;

    constructor(data?: IPaymentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).amount = data["amount"];
            (<any>this).createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>undefined;
            (<any>this).paidOutAt = data["paidOutAt"] ? new Date(data["paidOutAt"].toString()) : <any>undefined;
            (<any>this).paymentFee = data["paymentFee"];
            (<any>this).paymentMethod = data["paymentMethod"];
            (<any>this).gatewayTransactionId = data["gatewayTransactionId"];
            (<any>this).paymentStatus = data["paymentStatus"];
            (<any>this).failureMessage = data["failureMessage"];
            (<any>this).boletoBarcode = data["boletoBarcode"];
            (<any>this).boletoUrl = data["boletoUrl"];
        }
    }

    static fromJS(data: any): PaymentDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["paidOutAt"] = this.paidOutAt ? this.paidOutAt.toISOString() : <any>undefined;
        data["paymentFee"] = this.paymentFee;
        data["paymentMethod"] = this.paymentMethod;
        data["gatewayTransactionId"] = this.gatewayTransactionId;
        data["paymentStatus"] = this.paymentStatus;
        data["failureMessage"] = this.failureMessage;
        data["boletoBarcode"] = this.boletoBarcode;
        data["boletoUrl"] = this.boletoUrl;
        return data; 
    }
}

export interface IPaymentDto {
    amount?: number | undefined;
    createdOn?: Date | undefined;
    paidOutAt?: Date | undefined;
    paymentFee?: number | undefined;
    paymentMethod?: PaymentDtoPaymentMethod | undefined;
    gatewayTransactionId?: string | undefined;
    paymentStatus?: PaymentDtoPaymentStatus | undefined;
    failureMessage?: string | undefined;
    boletoBarcode?: string | undefined;
    boletoUrl?: string | undefined;
}

export class ShipmentDto implements IShipmentDto {
    readonly deliveryCost?: number | undefined;
    readonly destinationAddress?: CustomerAddressDto | undefined;
    readonly createdOn?: Date | undefined;
    readonly shippedDate?: Date | undefined;
    readonly deliveryDate?: Date | undefined;
    readonly expectedDeliveryDate?: Date | undefined;
    readonly expectedHourOfDay?: Date | undefined;
    readonly shipmentMethod?: ShipmentDtoShipmentMethod | undefined;
    readonly status?: ShipmentDtoStatus | undefined;
    readonly trackNumber?: string | undefined;
    readonly shipmentProvider?: string | undefined;

    constructor(data?: IShipmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).deliveryCost = data["deliveryCost"];
            (<any>this).destinationAddress = data["destinationAddress"] ? CustomerAddressDto.fromJS(data["destinationAddress"]) : <any>undefined;
            (<any>this).createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>undefined;
            (<any>this).shippedDate = data["shippedDate"] ? new Date(data["shippedDate"].toString()) : <any>undefined;
            (<any>this).deliveryDate = data["deliveryDate"] ? new Date(data["deliveryDate"].toString()) : <any>undefined;
            (<any>this).expectedDeliveryDate = data["expectedDeliveryDate"] ? new Date(data["expectedDeliveryDate"].toString()) : <any>undefined;
            (<any>this).expectedHourOfDay = data["expectedHourOfDay"] ? new Date(data["expectedHourOfDay"].toString()) : <any>undefined;
            (<any>this).shipmentMethod = data["shipmentMethod"];
            (<any>this).status = data["status"];
            (<any>this).trackNumber = data["trackNumber"];
            (<any>this).shipmentProvider = data["shipmentProvider"];
        }
    }

    static fromJS(data: any): ShipmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShipmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryCost"] = this.deliveryCost;
        data["destinationAddress"] = this.destinationAddress ? this.destinationAddress.toJSON() : <any>undefined;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["shippedDate"] = this.shippedDate ? this.shippedDate.toISOString() : <any>undefined;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["expectedDeliveryDate"] = this.expectedDeliveryDate ? this.expectedDeliveryDate.toISOString() : <any>undefined;
        data["expectedHourOfDay"] = this.expectedHourOfDay ? this.expectedHourOfDay.toISOString() : <any>undefined;
        data["shipmentMethod"] = this.shipmentMethod;
        data["status"] = this.status;
        data["trackNumber"] = this.trackNumber;
        data["shipmentProvider"] = this.shipmentProvider;
        return data; 
    }
}

export interface IShipmentDto {
    deliveryCost?: number | undefined;
    destinationAddress?: CustomerAddressDto | undefined;
    createdOn?: Date | undefined;
    shippedDate?: Date | undefined;
    deliveryDate?: Date | undefined;
    expectedDeliveryDate?: Date | undefined;
    expectedHourOfDay?: Date | undefined;
    shipmentMethod?: ShipmentDtoShipmentMethod | undefined;
    status?: ShipmentDtoStatus | undefined;
    trackNumber?: string | undefined;
    shipmentProvider?: string | undefined;
}

export class OrderDto implements IOrderDto {
    readonly id?: number | undefined;
    readonly orderUniqueKey?: string | undefined;
    readonly comment?: string | undefined;
    readonly discount?: number | undefined;
    readonly totalPrice?: number | undefined;
    readonly deliveryCost?: number | undefined;
    readonly orderDate?: Date | undefined;
    readonly paymentDate?: Date | undefined;
    readonly payment?: PaymentDto | undefined;
    readonly items?: OrderItemDto[] | undefined;
    readonly shipment?: ShipmentDto | undefined;
    readonly status?: OrderDtoStatus | undefined;
    readonly isCancelled?: boolean | undefined;

    constructor(data?: IOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).orderUniqueKey = data["orderUniqueKey"];
            (<any>this).comment = data["comment"];
            (<any>this).discount = data["discount"];
            (<any>this).totalPrice = data["totalPrice"];
            (<any>this).deliveryCost = data["deliveryCost"];
            (<any>this).orderDate = data["orderDate"] ? new Date(data["orderDate"].toString()) : <any>undefined;
            (<any>this).paymentDate = data["paymentDate"] ? new Date(data["paymentDate"].toString()) : <any>undefined;
            (<any>this).payment = data["payment"] ? PaymentDto.fromJS(data["payment"]) : <any>undefined;
            if (Array.isArray(data["items"])) {
                (<any>this).items = [] as any;
                for (let item of data["items"])
                    (<any>this).items!.push(OrderItemDto.fromJS(item));
            }
            (<any>this).shipment = data["shipment"] ? ShipmentDto.fromJS(data["shipment"]) : <any>undefined;
            (<any>this).status = data["status"];
            (<any>this).isCancelled = data["isCancelled"];
        }
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orderUniqueKey"] = this.orderUniqueKey;
        data["comment"] = this.comment;
        data["discount"] = this.discount;
        data["totalPrice"] = this.totalPrice;
        data["deliveryCost"] = this.deliveryCost;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["payment"] = this.payment ? this.payment.toJSON() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["shipment"] = this.shipment ? this.shipment.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["isCancelled"] = this.isCancelled;
        return data; 
    }
}

export interface IOrderDto {
    id?: number | undefined;
    orderUniqueKey?: string | undefined;
    comment?: string | undefined;
    discount?: number | undefined;
    totalPrice?: number | undefined;
    deliveryCost?: number | undefined;
    orderDate?: Date | undefined;
    paymentDate?: Date | undefined;
    payment?: PaymentDto | undefined;
    items?: OrderItemDto[] | undefined;
    shipment?: ShipmentDto | undefined;
    status?: OrderDtoStatus | undefined;
    isCancelled?: boolean | undefined;
}

export class OrderItemDto implements IOrderItemDto {
    readonly id?: number | undefined;
    readonly price?: number | undefined;
    readonly quantity?: number | undefined;
    readonly product?: ProductDto | undefined;

    constructor(data?: IOrderItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).price = data["price"];
            (<any>this).quantity = data["quantity"];
            (<any>this).product = data["product"] ? ProductDto.fromJS(data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IOrderItemDto {
    id?: number | undefined;
    price?: number | undefined;
    quantity?: number | undefined;
    product?: ProductDto | undefined;
}

export class CreditCardCheckoutResponse implements ICreditCardCheckoutResponse {
    payment?: PaymentDto | undefined;
    shipment?: ShipmentDto | undefined;
    order?: OrderDto | undefined;

    constructor(data?: ICreditCardCheckoutResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.payment = data["payment"] ? PaymentDto.fromJS(data["payment"]) : <any>undefined;
            this.shipment = data["shipment"] ? ShipmentDto.fromJS(data["shipment"]) : <any>undefined;
            this.order = data["order"] ? OrderDto.fromJS(data["order"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreditCardCheckoutResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreditCardCheckoutResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["payment"] = this.payment ? this.payment.toJSON() : <any>undefined;
        data["shipment"] = this.shipment ? this.shipment.toJSON() : <any>undefined;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreditCardCheckoutResponse {
    payment?: PaymentDto | undefined;
    shipment?: ShipmentDto | undefined;
    order?: OrderDto | undefined;
}

export class Postback implements IPostback {
    readonly deliveries?: PostbackDelivery[] | undefined;
    readonly headers?: string | undefined;
    readonly model?: PostbackModel | undefined;
    readonly modelId?: string | undefined;
    readonly payload?: string | undefined;
    readonly requestUrl?: string | undefined;
    readonly retries?: number | undefined;
    readonly signature?: string | undefined;
    readonly status?: PostbackStatus | undefined;
    id?: string | undefined;
    readonly dateCreated?: Date | undefined;
    readonly dateUpdated?: Date | undefined;
    readonly loaded?: boolean | undefined;

    constructor(data?: IPostback) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["deliveries"])) {
                (<any>this).deliveries = [] as any;
                for (let item of data["deliveries"])
                    (<any>this).deliveries!.push(PostbackDelivery.fromJS(item));
            }
            (<any>this).headers = data["headers"];
            (<any>this).model = data["model"];
            (<any>this).modelId = data["modelId"];
            (<any>this).payload = data["payload"];
            (<any>this).requestUrl = data["requestUrl"];
            (<any>this).retries = data["retries"];
            (<any>this).signature = data["signature"];
            (<any>this).status = data["status"];
            this.id = data["id"];
            (<any>this).dateCreated = data["dateCreated"] ? new Date(data["dateCreated"].toString()) : <any>undefined;
            (<any>this).dateUpdated = data["dateUpdated"] ? new Date(data["dateUpdated"].toString()) : <any>undefined;
            (<any>this).loaded = data["loaded"];
        }
    }

    static fromJS(data: any): Postback {
        data = typeof data === 'object' ? data : {};
        let result = new Postback();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deliveries)) {
            data["deliveries"] = [];
            for (let item of this.deliveries)
                data["deliveries"].push(item.toJSON());
        }
        data["headers"] = this.headers;
        data["model"] = this.model;
        data["modelId"] = this.modelId;
        data["payload"] = this.payload;
        data["requestUrl"] = this.requestUrl;
        data["retries"] = this.retries;
        data["signature"] = this.signature;
        data["status"] = this.status;
        data["id"] = this.id;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        data["dateUpdated"] = this.dateUpdated ? this.dateUpdated.toISOString() : <any>undefined;
        data["loaded"] = this.loaded;
        return data; 
    }
}

export interface IPostback {
    deliveries?: PostbackDelivery[] | undefined;
    headers?: string | undefined;
    model?: PostbackModel | undefined;
    modelId?: string | undefined;
    payload?: string | undefined;
    requestUrl?: string | undefined;
    retries?: number | undefined;
    signature?: string | undefined;
    status?: PostbackStatus | undefined;
    id?: string | undefined;
    dateCreated?: Date | undefined;
    dateUpdated?: Date | undefined;
    loaded?: boolean | undefined;
}

export class PostbackDelivery implements IPostbackDelivery {
    id?: string | undefined;
    readonly responseBody?: string | undefined;
    readonly responseHeaders?: string | undefined;
    readonly responseTime?: number | undefined;
    readonly status?: PostbackDeliveryStatus | undefined;
    readonly statusCode?: number | undefined;
    readonly statusReason?: string | undefined;
    readonly loaded?: boolean | undefined;

    constructor(data?: IPostbackDelivery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            (<any>this).responseBody = data["responseBody"];
            (<any>this).responseHeaders = data["responseHeaders"];
            (<any>this).responseTime = data["responseTime"];
            (<any>this).status = data["status"];
            (<any>this).statusCode = data["statusCode"];
            (<any>this).statusReason = data["statusReason"];
            (<any>this).loaded = data["loaded"];
        }
    }

    static fromJS(data: any): PostbackDelivery {
        data = typeof data === 'object' ? data : {};
        let result = new PostbackDelivery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["responseBody"] = this.responseBody;
        data["responseHeaders"] = this.responseHeaders;
        data["responseTime"] = this.responseTime;
        data["status"] = this.status;
        data["statusCode"] = this.statusCode;
        data["statusReason"] = this.statusReason;
        data["loaded"] = this.loaded;
        return data; 
    }
}

export interface IPostbackDelivery {
    id?: string | undefined;
    responseBody?: string | undefined;
    responseHeaders?: string | undefined;
    responseTime?: number | undefined;
    status?: PostbackDeliveryStatus | undefined;
    statusCode?: number | undefined;
    statusReason?: string | undefined;
    loaded?: boolean | undefined;
}

export class StormyCustomer implements IStormyCustomer {
    cpf?: string | undefined;
    addresses?: CustomerAddress[] | undefined;
    customerReviewsId?: number | undefined;
    customerReviews?: Review[] | undefined;
    customerWishlistId?: number | undefined;
    customerWishlist?: Wishlist | undefined;
    fullName?: string | undefined;
    refreshTokenHash?: string | undefined;
    dateOfBirth?: Date | undefined;
    role?: ApplicationRole | undefined;
    createdOn?: Date | undefined;
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean | undefined;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;

    constructor(data?: IStormyCustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cpf = data["cpf"];
            if (Array.isArray(data["addresses"])) {
                this.addresses = [] as any;
                for (let item of data["addresses"])
                    this.addresses!.push(CustomerAddress.fromJS(item));
            }
            this.customerReviewsId = data["customerReviewsId"];
            if (Array.isArray(data["customerReviews"])) {
                this.customerReviews = [] as any;
                for (let item of data["customerReviews"])
                    this.customerReviews!.push(Review.fromJS(item));
            }
            this.customerWishlistId = data["customerWishlistId"];
            this.customerWishlist = data["customerWishlist"] ? Wishlist.fromJS(data["customerWishlist"]) : <any>undefined;
            this.fullName = data["fullName"];
            this.refreshTokenHash = data["refreshTokenHash"];
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>undefined;
            this.role = data["role"] ? ApplicationRole.fromJS(data["role"]) : <any>undefined;
            this.createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>undefined;
            this.id = data["id"];
            this.userName = data["userName"];
            this.normalizedUserName = data["normalizedUserName"];
            this.email = data["email"];
            this.normalizedEmail = data["normalizedEmail"];
            this.emailConfirmed = data["emailConfirmed"];
            this.passwordHash = data["passwordHash"];
            this.securityStamp = data["securityStamp"];
            this.concurrencyStamp = data["concurrencyStamp"];
            this.phoneNumber = data["phoneNumber"];
            this.phoneNumberConfirmed = data["phoneNumberConfirmed"];
            this.twoFactorEnabled = data["twoFactorEnabled"];
            this.lockoutEnd = data["lockoutEnd"] ? new Date(data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = data["lockoutEnabled"];
            this.accessFailedCount = data["accessFailedCount"];
        }
    }

    static fromJS(data: any): StormyCustomer {
        data = typeof data === 'object' ? data : {};
        let result = new StormyCustomer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cpf"] = this.cpf;
        if (Array.isArray(this.addresses)) {
            data["addresses"] = [];
            for (let item of this.addresses)
                data["addresses"].push(item.toJSON());
        }
        data["customerReviewsId"] = this.customerReviewsId;
        if (Array.isArray(this.customerReviews)) {
            data["customerReviews"] = [];
            for (let item of this.customerReviews)
                data["customerReviews"].push(item.toJSON());
        }
        data["customerWishlistId"] = this.customerWishlistId;
        data["customerWishlist"] = this.customerWishlist ? this.customerWishlist.toJSON() : <any>undefined;
        data["fullName"] = this.fullName;
        data["refreshTokenHash"] = this.refreshTokenHash;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data; 
    }
}

export interface IStormyCustomer {
    cpf?: string | undefined;
    addresses?: CustomerAddress[] | undefined;
    customerReviewsId?: number | undefined;
    customerReviews?: Review[] | undefined;
    customerWishlistId?: number | undefined;
    customerWishlist?: Wishlist | undefined;
    fullName?: string | undefined;
    refreshTokenHash?: string | undefined;
    dateOfBirth?: Date | undefined;
    role?: ApplicationRole | undefined;
    createdOn?: Date | undefined;
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean | undefined;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
}

export class CustomerAddress implements ICustomerAddress {
    street?: string | undefined;
    firstAddress?: string | undefined;
    secondAddress?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    country?: string | undefined;
    whoReceives?: string | undefined;
    type?: CustomerAddressType | undefined;
    isDefault?: boolean | undefined;
    isDeleted?: boolean | undefined;
    stormyCustomerId?: string | undefined;
    owner?: StormyCustomer | undefined;
    id?: number | undefined;

    constructor(data?: ICustomerAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.street = data["street"];
            this.firstAddress = data["firstAddress"];
            this.secondAddress = data["secondAddress"];
            this.city = data["city"];
            this.district = data["district"];
            this.state = data["state"];
            this.postalCode = data["postalCode"];
            this.number = data["number"];
            this.complement = data["complement"];
            this.country = data["country"];
            this.whoReceives = data["whoReceives"];
            this.type = data["type"];
            this.isDefault = data["isDefault"];
            this.isDeleted = data["isDeleted"];
            this.stormyCustomerId = data["stormyCustomerId"];
            this.owner = data["owner"] ? StormyCustomer.fromJS(data["owner"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CustomerAddress {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["street"] = this.street;
        data["firstAddress"] = this.firstAddress;
        data["secondAddress"] = this.secondAddress;
        data["city"] = this.city;
        data["district"] = this.district;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        data["number"] = this.number;
        data["complement"] = this.complement;
        data["country"] = this.country;
        data["whoReceives"] = this.whoReceives;
        data["type"] = this.type;
        data["isDefault"] = this.isDefault;
        data["isDeleted"] = this.isDeleted;
        data["stormyCustomerId"] = this.stormyCustomerId;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface ICustomerAddress {
    street?: string | undefined;
    firstAddress?: string | undefined;
    secondAddress?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    state?: string | undefined;
    postalCode?: string | undefined;
    number?: string | undefined;
    complement?: string | undefined;
    country?: string | undefined;
    whoReceives?: string | undefined;
    type?: CustomerAddressType | undefined;
    isDefault?: boolean | undefined;
    isDeleted?: boolean | undefined;
    stormyCustomerId?: string | undefined;
    owner?: StormyCustomer | undefined;
    id?: number | undefined;
}

export class Review implements IReview {
    stormyCustomerId?: string | undefined;
    author?: StormyCustomer | undefined;
    stormyProductId?: number | undefined;
    product?: StormyProduct | undefined;
    title?: string | undefined;
    comment?: string | undefined;
    reviewerName?: string | undefined;
    ratingLevel?: number | undefined;
    status?: ReviewStatus | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IReview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.stormyCustomerId = data["stormyCustomerId"];
            this.author = data["author"] ? StormyCustomer.fromJS(data["author"]) : <any>undefined;
            this.stormyProductId = data["stormyProductId"];
            this.product = data["product"] ? StormyProduct.fromJS(data["product"]) : <any>undefined;
            this.title = data["title"];
            this.comment = data["comment"];
            this.reviewerName = data["reviewerName"];
            this.ratingLevel = data["ratingLevel"];
            this.status = data["status"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Review {
        data = typeof data === 'object' ? data : {};
        let result = new Review();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stormyCustomerId"] = this.stormyCustomerId;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["stormyProductId"] = this.stormyProductId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["title"] = this.title;
        data["comment"] = this.comment;
        data["reviewerName"] = this.reviewerName;
        data["ratingLevel"] = this.ratingLevel;
        data["status"] = this.status;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IReview {
    stormyCustomerId?: string | undefined;
    author?: StormyCustomer | undefined;
    stormyProductId?: number | undefined;
    product?: StormyProduct | undefined;
    title?: string | undefined;
    comment?: string | undefined;
    reviewerName?: string | undefined;
    ratingLevel?: number | undefined;
    status?: ReviewStatus | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class Wishlist implements IWishlist {
    stormyCustomerId?: string | undefined;
    customer?: StormyCustomer | undefined;
    wishlistItems?: WishlistItem[] | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IWishlist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.stormyCustomerId = data["stormyCustomerId"];
            this.customer = data["customer"] ? StormyCustomer.fromJS(data["customer"]) : <any>undefined;
            if (Array.isArray(data["wishlistItems"])) {
                this.wishlistItems = [] as any;
                for (let item of data["wishlistItems"])
                    this.wishlistItems!.push(WishlistItem.fromJS(item));
            }
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Wishlist {
        data = typeof data === 'object' ? data : {};
        let result = new Wishlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stormyCustomerId"] = this.stormyCustomerId;
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        if (Array.isArray(this.wishlistItems)) {
            data["wishlistItems"] = [];
            for (let item of this.wishlistItems)
                data["wishlistItems"].push(item.toJSON());
        }
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IWishlist {
    stormyCustomerId?: string | undefined;
    customer?: StormyCustomer | undefined;
    wishlistItems?: WishlistItem[] | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ApplicationRole implements IApplicationRole {
    id?: string | undefined;
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;

    constructor(data?: IApplicationRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.normalizedName = data["normalizedName"];
            this.concurrencyStamp = data["concurrencyStamp"];
        }
    }

    static fromJS(data: any): ApplicationRole {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["normalizedName"] = this.normalizedName;
        data["concurrencyStamp"] = this.concurrencyStamp;
        return data; 
    }
}

export interface IApplicationRole {
    id?: string | undefined;
    name?: string | undefined;
    normalizedName?: string | undefined;
    concurrencyStamp?: string | undefined;
}

export class StormyProduct implements IStormyProduct {
    sku?: string | undefined;
    productName?: string | undefined;
    slug?: string | undefined;
    brandId?: number | undefined;
    vendorId?: number | undefined;
    categoryId?: number | undefined;
    mediaId?: number | undefined;
    productLinksId?: number | undefined;
    vendor?: StormyVendor | undefined;
    brand?: Brand | undefined;
    shortDescription?: string | undefined;
    description?: string | undefined;
    quantityPerUnity?: number | undefined;
    availableSizes?: string | undefined;
    unitPrice?: number | undefined;
    discount?: number | undefined;
    unitWeight?: number | undefined;
    height?: number | undefined;
    width?: number | undefined;
    length?: number | undefined;
    diameter?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    thumbnailImage?: string | undefined;
    medias?: ProductMedia[] | undefined;
    links?: ProductLink[] | undefined;
    attributeValues?: ProductAttributeValue[] | undefined;
    optionValues?: ProductOptionValue[] | undefined;
    categories?: ProductCategory[] | undefined;
    note?: string | undefined;
    price?: string | undefined;
    productCost?: number | undefined;
    publishedOn?: Date | undefined;
    createdOn?: Date | undefined;
    ratingAverage?: number | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IStormyProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sku = data["sku"];
            this.productName = data["productName"];
            this.slug = data["slug"];
            this.brandId = data["brandId"];
            this.vendorId = data["vendorId"];
            this.categoryId = data["categoryId"];
            this.mediaId = data["mediaId"];
            this.productLinksId = data["productLinksId"];
            this.vendor = data["vendor"] ? StormyVendor.fromJS(data["vendor"]) : <any>undefined;
            this.brand = data["brand"] ? Brand.fromJS(data["brand"]) : <any>undefined;
            this.shortDescription = data["shortDescription"];
            this.description = data["description"];
            this.quantityPerUnity = data["quantityPerUnity"];
            this.availableSizes = data["availableSizes"];
            this.unitPrice = data["unitPrice"];
            this.discount = data["discount"];
            this.unitWeight = data["unitWeight"];
            this.height = data["height"];
            this.width = data["width"];
            this.length = data["length"];
            this.diameter = data["diameter"];
            this.unitsInStock = data["unitsInStock"];
            this.unitsOnOrder = data["unitsOnOrder"];
            this.thumbnailImage = data["thumbnailImage"];
            if (Array.isArray(data["medias"])) {
                this.medias = [] as any;
                for (let item of data["medias"])
                    this.medias!.push(ProductMedia.fromJS(item));
            }
            if (Array.isArray(data["links"])) {
                this.links = [] as any;
                for (let item of data["links"])
                    this.links!.push(ProductLink.fromJS(item));
            }
            if (Array.isArray(data["attributeValues"])) {
                this.attributeValues = [] as any;
                for (let item of data["attributeValues"])
                    this.attributeValues!.push(ProductAttributeValue.fromJS(item));
            }
            if (Array.isArray(data["optionValues"])) {
                this.optionValues = [] as any;
                for (let item of data["optionValues"])
                    this.optionValues!.push(ProductOptionValue.fromJS(item));
            }
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(ProductCategory.fromJS(item));
            }
            this.note = data["note"];
            this.price = data["price"];
            this.productCost = data["productCost"];
            this.publishedOn = data["publishedOn"] ? new Date(data["publishedOn"].toString()) : <any>undefined;
            this.createdOn = data["createdOn"] ? new Date(data["createdOn"].toString()) : <any>undefined;
            this.ratingAverage = data["ratingAverage"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): StormyProduct {
        data = typeof data === 'object' ? data : {};
        let result = new StormyProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["productName"] = this.productName;
        data["slug"] = this.slug;
        data["brandId"] = this.brandId;
        data["vendorId"] = this.vendorId;
        data["categoryId"] = this.categoryId;
        data["mediaId"] = this.mediaId;
        data["productLinksId"] = this.productLinksId;
        data["vendor"] = this.vendor ? this.vendor.toJSON() : <any>undefined;
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        data["shortDescription"] = this.shortDescription;
        data["description"] = this.description;
        data["quantityPerUnity"] = this.quantityPerUnity;
        data["availableSizes"] = this.availableSizes;
        data["unitPrice"] = this.unitPrice;
        data["discount"] = this.discount;
        data["unitWeight"] = this.unitWeight;
        data["height"] = this.height;
        data["width"] = this.width;
        data["length"] = this.length;
        data["diameter"] = this.diameter;
        data["unitsInStock"] = this.unitsInStock;
        data["unitsOnOrder"] = this.unitsOnOrder;
        data["thumbnailImage"] = this.thumbnailImage;
        if (Array.isArray(this.medias)) {
            data["medias"] = [];
            for (let item of this.medias)
                data["medias"].push(item.toJSON());
        }
        if (Array.isArray(this.links)) {
            data["links"] = [];
            for (let item of this.links)
                data["links"].push(item.toJSON());
        }
        if (Array.isArray(this.attributeValues)) {
            data["attributeValues"] = [];
            for (let item of this.attributeValues)
                data["attributeValues"].push(item.toJSON());
        }
        if (Array.isArray(this.optionValues)) {
            data["optionValues"] = [];
            for (let item of this.optionValues)
                data["optionValues"].push(item.toJSON());
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["note"] = this.note;
        data["price"] = this.price;
        data["productCost"] = this.productCost;
        data["publishedOn"] = this.publishedOn ? this.publishedOn.toISOString() : <any>undefined;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["ratingAverage"] = this.ratingAverage;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IStormyProduct {
    sku?: string | undefined;
    productName?: string | undefined;
    slug?: string | undefined;
    brandId?: number | undefined;
    vendorId?: number | undefined;
    categoryId?: number | undefined;
    mediaId?: number | undefined;
    productLinksId?: number | undefined;
    vendor?: StormyVendor | undefined;
    brand?: Brand | undefined;
    shortDescription?: string | undefined;
    description?: string | undefined;
    quantityPerUnity?: number | undefined;
    availableSizes?: string | undefined;
    unitPrice?: number | undefined;
    discount?: number | undefined;
    unitWeight?: number | undefined;
    height?: number | undefined;
    width?: number | undefined;
    length?: number | undefined;
    diameter?: number | undefined;
    unitsInStock?: number | undefined;
    unitsOnOrder?: number | undefined;
    thumbnailImage?: string | undefined;
    medias?: ProductMedia[] | undefined;
    links?: ProductLink[] | undefined;
    attributeValues?: ProductAttributeValue[] | undefined;
    optionValues?: ProductOptionValue[] | undefined;
    categories?: ProductCategory[] | undefined;
    note?: string | undefined;
    price?: string | undefined;
    productCost?: number | undefined;
    publishedOn?: Date | undefined;
    createdOn?: Date | undefined;
    ratingAverage?: number | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class WishlistItem implements IWishlistItem {
    productId?: number | undefined;
    product?: StormyProduct | undefined;
    wishlistId?: number | undefined;
    wishlist?: Wishlist | undefined;
    addedAt?: Date | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IWishlistItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.product = data["product"] ? StormyProduct.fromJS(data["product"]) : <any>undefined;
            this.wishlistId = data["wishlistId"];
            this.wishlist = data["wishlist"] ? Wishlist.fromJS(data["wishlist"]) : <any>undefined;
            this.addedAt = data["addedAt"] ? new Date(data["addedAt"].toString()) : <any>undefined;
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): WishlistItem {
        data = typeof data === 'object' ? data : {};
        let result = new WishlistItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["wishlistId"] = this.wishlistId;
        data["wishlist"] = this.wishlist ? this.wishlist.toJSON() : <any>undefined;
        data["addedAt"] = this.addedAt ? this.addedAt.toISOString() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IWishlistItem {
    productId?: number | undefined;
    product?: StormyProduct | undefined;
    wishlistId?: number | undefined;
    wishlist?: Wishlist | undefined;
    addedAt?: Date | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class StormyVendor implements IStormyVendor {
    companyName?: string | undefined;
    contactTitle?: string | undefined;
    vendorAddressId?: number | undefined;
    address?: VendorAddress | undefined;
    productId?: number | undefined;
    products?: StormyProduct[] | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    webSite?: string | undefined;
    typeGoods?: string | undefined;
    sizeUrl?: string | undefined;
    logo?: string | undefined;
    note?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IStormyVendor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.companyName = data["companyName"];
            this.contactTitle = data["contactTitle"];
            this.vendorAddressId = data["vendorAddressId"];
            this.address = data["address"] ? VendorAddress.fromJS(data["address"]) : <any>undefined;
            this.productId = data["productId"];
            if (Array.isArray(data["products"])) {
                this.products = [] as any;
                for (let item of data["products"])
                    this.products!.push(StormyProduct.fromJS(item));
            }
            this.phone = data["phone"];
            this.email = data["email"];
            this.webSite = data["webSite"];
            this.typeGoods = data["typeGoods"];
            this.sizeUrl = data["sizeUrl"];
            this.logo = data["logo"];
            this.note = data["note"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): StormyVendor {
        data = typeof data === 'object' ? data : {};
        let result = new StormyVendor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyName"] = this.companyName;
        data["contactTitle"] = this.contactTitle;
        data["vendorAddressId"] = this.vendorAddressId;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["webSite"] = this.webSite;
        data["typeGoods"] = this.typeGoods;
        data["sizeUrl"] = this.sizeUrl;
        data["logo"] = this.logo;
        data["note"] = this.note;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IStormyVendor {
    companyName?: string | undefined;
    contactTitle?: string | undefined;
    vendorAddressId?: number | undefined;
    address?: VendorAddress | undefined;
    productId?: number | undefined;
    products?: StormyProduct[] | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    webSite?: string | undefined;
    typeGoods?: string | undefined;
    sizeUrl?: string | undefined;
    logo?: string | undefined;
    note?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductMedia implements IProductMedia {
    mediaId?: number | undefined;
    media?: Media | undefined;
    stormyProductId?: number | undefined;
    product?: StormyProduct | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductMedia) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.mediaId = data["mediaId"];
            this.media = data["media"] ? Media.fromJS(data["media"]) : <any>undefined;
            this.stormyProductId = data["stormyProductId"];
            this.product = data["product"] ? StormyProduct.fromJS(data["product"]) : <any>undefined;
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductMedia {
        data = typeof data === 'object' ? data : {};
        let result = new ProductMedia();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mediaId"] = this.mediaId;
        data["media"] = this.media ? this.media.toJSON() : <any>undefined;
        data["stormyProductId"] = this.stormyProductId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductMedia {
    mediaId?: number | undefined;
    media?: Media | undefined;
    stormyProductId?: number | undefined;
    product?: StormyProduct | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductLink implements IProductLink {
    productId?: number | undefined;
    product?: StormyProduct | undefined;
    linkedProductId?: number | undefined;
    linkedProduct?: StormyProduct | undefined;
    linkType?: ProductLinkLinkType | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductLink) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.product = data["product"] ? StormyProduct.fromJS(data["product"]) : <any>undefined;
            this.linkedProductId = data["linkedProductId"];
            this.linkedProduct = data["linkedProduct"] ? StormyProduct.fromJS(data["linkedProduct"]) : <any>undefined;
            this.linkType = data["linkType"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductLink {
        data = typeof data === 'object' ? data : {};
        let result = new ProductLink();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["linkedProductId"] = this.linkedProductId;
        data["linkedProduct"] = this.linkedProduct ? this.linkedProduct.toJSON() : <any>undefined;
        data["linkType"] = this.linkType;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductLink {
    productId?: number | undefined;
    product?: StormyProduct | undefined;
    linkedProductId?: number | undefined;
    linkedProduct?: StormyProduct | undefined;
    linkType?: ProductLinkLinkType | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductAttributeValue implements IProductAttributeValue {
    attributeId?: number | undefined;
    attribute?: ProductAttribute | undefined;
    productId?: number | undefined;
    product?: StormyProduct | undefined;
    value?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductAttributeValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attributeId = data["attributeId"];
            this.attribute = data["attribute"] ? ProductAttribute.fromJS(data["attribute"]) : <any>undefined;
            this.productId = data["productId"];
            this.product = data["product"] ? StormyProduct.fromJS(data["product"]) : <any>undefined;
            this.value = data["value"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductAttributeValue {
        data = typeof data === 'object' ? data : {};
        let result = new ProductAttributeValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeId"] = this.attributeId;
        data["attribute"] = this.attribute ? this.attribute.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["value"] = this.value;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductAttributeValue {
    attributeId?: number | undefined;
    attribute?: ProductAttribute | undefined;
    productId?: number | undefined;
    product?: StormyProduct | undefined;
    value?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductOptionValue implements IProductOptionValue {
    optionId?: number | undefined;
    option?: ProductOption | undefined;
    productId?: number | undefined;
    product?: StormyProduct | undefined;
    value?: string | undefined;
    displayType?: string | undefined;
    sortIndex?: number | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductOptionValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.optionId = data["optionId"];
            this.option = data["option"] ? ProductOption.fromJS(data["option"]) : <any>undefined;
            this.productId = data["productId"];
            this.product = data["product"] ? StormyProduct.fromJS(data["product"]) : <any>undefined;
            this.value = data["value"];
            this.displayType = data["displayType"];
            this.sortIndex = data["sortIndex"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductOptionValue {
        data = typeof data === 'object' ? data : {};
        let result = new ProductOptionValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["optionId"] = this.optionId;
        data["option"] = this.option ? this.option.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["value"] = this.value;
        data["displayType"] = this.displayType;
        data["sortIndex"] = this.sortIndex;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductOptionValue {
    optionId?: number | undefined;
    option?: ProductOption | undefined;
    productId?: number | undefined;
    product?: StormyProduct | undefined;
    value?: string | undefined;
    displayType?: string | undefined;
    sortIndex?: number | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductCategory implements IProductCategory {
    displayOrder?: number | undefined;
    categoryId?: number | undefined;
    productId?: number | undefined;
    category?: Category | undefined;
    product?: StormyProduct | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayOrder = data["displayOrder"];
            this.categoryId = data["categoryId"];
            this.productId = data["productId"];
            this.category = data["category"] ? Category.fromJS(data["category"]) : <any>undefined;
            this.product = data["product"] ? StormyProduct.fromJS(data["product"]) : <any>undefined;
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductCategory {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayOrder"] = this.displayOrder;
        data["categoryId"] = this.categoryId;
        data["productId"] = this.productId;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductCategory {
    displayOrder?: number | undefined;
    categoryId?: number | undefined;
    productId?: number | undefined;
    category?: Category | undefined;
    product?: StormyProduct | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class VendorAddress implements IVendorAddress {
    address?: Address | undefined;
    whoReceives?: string | undefined;
    phoneNumber?: string | undefined;
    owner?: StormyVendor | undefined;
    id?: number | undefined;

    constructor(data?: IVendorAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.address = data["address"] ? Address.fromJS(data["address"]) : <any>undefined;
            this.whoReceives = data["whoReceives"];
            this.phoneNumber = data["phoneNumber"];
            this.owner = data["owner"] ? StormyVendor.fromJS(data["owner"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VendorAddress {
        data = typeof data === 'object' ? data : {};
        let result = new VendorAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["whoReceives"] = this.whoReceives;
        data["phoneNumber"] = this.phoneNumber;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }
}

export interface IVendorAddress {
    address?: Address | undefined;
    whoReceives?: string | undefined;
    phoneNumber?: string | undefined;
    owner?: StormyVendor | undefined;
    id?: number | undefined;
}

export class Media implements IMedia {
    caption?: string | undefined;
    fileSize?: number | undefined;
    fileName?: string | undefined;
    mediaType?: MediaType | undefined;
    seoFileName?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IMedia) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.caption = data["caption"];
            this.fileSize = data["fileSize"];
            this.fileName = data["fileName"];
            this.mediaType = data["mediaType"];
            this.seoFileName = data["seoFileName"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Media {
        data = typeof data === 'object' ? data : {};
        let result = new Media();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caption"] = this.caption;
        data["fileSize"] = this.fileSize;
        data["fileName"] = this.fileName;
        data["mediaType"] = this.mediaType;
        data["seoFileName"] = this.seoFileName;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IMedia {
    caption?: string | undefined;
    fileSize?: number | undefined;
    fileName?: string | undefined;
    mediaType?: MediaType | undefined;
    seoFileName?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductAttribute implements IProductAttribute {
    groupId?: number | undefined;
    group?: ProductAttributeGroup | undefined;
    name?: string | undefined;
    readonly productTemplates?: ProductTemplateProductAttribute[] | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductAttribute) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.groupId = data["groupId"];
            this.group = data["group"] ? ProductAttributeGroup.fromJS(data["group"]) : <any>undefined;
            this.name = data["name"];
            if (Array.isArray(data["productTemplates"])) {
                (<any>this).productTemplates = [] as any;
                for (let item of data["productTemplates"])
                    (<any>this).productTemplates!.push(ProductTemplateProductAttribute.fromJS(item));
            }
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductAttribute {
        data = typeof data === 'object' ? data : {};
        let result = new ProductAttribute();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        data["name"] = this.name;
        if (Array.isArray(this.productTemplates)) {
            data["productTemplates"] = [];
            for (let item of this.productTemplates)
                data["productTemplates"].push(item.toJSON());
        }
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductAttribute {
    groupId?: number | undefined;
    group?: ProductAttributeGroup | undefined;
    name?: string | undefined;
    productTemplates?: ProductTemplateProductAttribute[] | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductOption implements IProductOption {
    name?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductOption {
        data = typeof data === 'object' ? data : {};
        let result = new ProductOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductOption {
    name?: string | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductAttributeGroup implements IProductAttributeGroup {
    name?: string | undefined;
    attributes?: ProductAttribute[] | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductAttributeGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            if (Array.isArray(data["attributes"])) {
                this.attributes = [] as any;
                for (let item of data["attributes"])
                    this.attributes!.push(ProductAttribute.fromJS(item));
            }
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductAttributeGroup {
        data = typeof data === 'object' ? data : {};
        let result = new ProductAttributeGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.attributes)) {
            data["attributes"] = [];
            for (let item of this.attributes)
                data["attributes"].push(item.toJSON());
        }
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductAttributeGroup {
    name?: string | undefined;
    attributes?: ProductAttribute[] | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class ProductTemplateProductAttribute implements IProductTemplateProductAttribute {
    productTemplateId?: number | undefined;
    productTemplate?: ProductTemplate | undefined;
    productAttributeId?: number | undefined;
    productAttribute?: ProductAttribute | undefined;

    constructor(data?: IProductTemplateProductAttribute) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.productTemplateId = data["productTemplateId"];
            this.productTemplate = data["productTemplate"] ? ProductTemplate.fromJS(data["productTemplate"]) : <any>undefined;
            this.productAttributeId = data["productAttributeId"];
            this.productAttribute = data["productAttribute"] ? ProductAttribute.fromJS(data["productAttribute"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductTemplateProductAttribute {
        data = typeof data === 'object' ? data : {};
        let result = new ProductTemplateProductAttribute();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productTemplateId"] = this.productTemplateId;
        data["productTemplate"] = this.productTemplate ? this.productTemplate.toJSON() : <any>undefined;
        data["productAttributeId"] = this.productAttributeId;
        data["productAttribute"] = this.productAttribute ? this.productAttribute.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IProductTemplateProductAttribute {
    productTemplateId?: number | undefined;
    productTemplate?: ProductTemplate | undefined;
    productAttributeId?: number | undefined;
    productAttribute?: ProductAttribute | undefined;
}

export class ProductTemplate implements IProductTemplate {
    name?: string | undefined;
    stormyProductId?: number | undefined;
    product?: StormyProduct | undefined;
    readonly productAttributes?: ProductTemplateProductAttribute[] | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;

    constructor(data?: IProductTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.stormyProductId = data["stormyProductId"];
            this.product = data["product"] ? StormyProduct.fromJS(data["product"]) : <any>undefined;
            if (Array.isArray(data["productAttributes"])) {
                (<any>this).productAttributes = [] as any;
                for (let item of data["productAttributes"])
                    (<any>this).productAttributes!.push(ProductTemplateProductAttribute.fromJS(item));
            }
            this.lastModified = data["lastModified"] ? new Date(data["lastModified"].toString()) : <any>undefined;
            this.isDeleted = data["isDeleted"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ProductTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new ProductTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["stormyProductId"] = this.stormyProductId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        if (Array.isArray(this.productAttributes)) {
            data["productAttributes"] = [];
            for (let item of this.productAttributes)
                data["productAttributes"].push(item.toJSON());
        }
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductTemplate {
    name?: string | undefined;
    stormyProductId?: number | undefined;
    product?: StormyProduct | undefined;
    productAttributes?: ProductTemplateProductAttribute[] | undefined;
    lastModified?: Date | undefined;
    isDeleted?: boolean | undefined;
    id?: number | undefined;
}

export class CreateProductImageRequest implements ICreateProductImageRequest {
    productId!: number;
    file!: IFormFile;
    imageName?: string | undefined;

    constructor(data?: ICreateProductImageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.file = new IFormFile();
        }
    }

    init(data?: any) {
        if (data) {
            this.productId = data["productId"];
            this.file = data["file"] ? IFormFile.fromJS(data["file"]) : new IFormFile();
            this.imageName = data["imageName"];
        }
    }

    static fromJS(data: any): CreateProductImageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductImageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["file"] = this.file ? this.file.toJSON() : <any>undefined;
        data["imageName"] = this.imageName;
        return data; 
    }
}

export interface ICreateProductImageRequest {
    productId: number;
    file: IFormFile;
    imageName?: string | undefined;
}

export class IFormFile implements IIFormFile {
    readonly contentType?: string | undefined;
    readonly contentDisposition?: string | undefined;
    readonly headers?: { [key: string]: string[]; } | undefined;
    readonly length?: number | undefined;
    readonly name?: string | undefined;
    readonly fileName?: string | undefined;

    constructor(data?: IIFormFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).contentType = data["contentType"];
            (<any>this).contentDisposition = data["contentDisposition"];
            if (data["headers"]) {
                (<any>this).headers = {} as any;
                for (let key in data["headers"]) {
                    if (data["headers"].hasOwnProperty(key))
                        (<any>this).headers![key] = data["headers"][key] !== undefined ? data["headers"][key] : [];
                }
            }
            (<any>this).length = data["length"];
            (<any>this).name = data["name"];
            (<any>this).fileName = data["fileName"];
        }
    }

    static fromJS(data: any): IFormFile {
        data = typeof data === 'object' ? data : {};
        let result = new IFormFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentType"] = this.contentType;
        data["contentDisposition"] = this.contentDisposition;
        if (this.headers) {
            data["headers"] = {};
            for (let key in this.headers) {
                if (this.headers.hasOwnProperty(key))
                    data["headers"][key] = this.headers[key];
            }
        }
        data["length"] = this.length;
        data["name"] = this.name;
        data["fileName"] = this.fileName;
        return data; 
    }
}

export interface IIFormFile {
    contentType?: string | undefined;
    contentDisposition?: string | undefined;
    headers?: { [key: string]: string[]; } | undefined;
    length?: number | undefined;
    name?: string | undefined;
    fileName?: string | undefined;
}

export class ProductSearchResponse implements IProductSearchResponse {
    readonly id?: number | undefined;
    readonly productName?: string | undefined;
    readonly thumbnailImage?: string | undefined;
    readonly slug?: string | undefined;
    readonly shortDescription?: string | undefined;
    unitPrice?: string | undefined;

    constructor(data?: IProductSearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).productName = data["productName"];
            (<any>this).thumbnailImage = data["thumbnailImage"];
            (<any>this).slug = data["slug"];
            (<any>this).shortDescription = data["shortDescription"];
            this.unitPrice = data["unitPrice"];
        }
    }

    static fromJS(data: any): ProductSearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductSearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productName"] = this.productName;
        data["thumbnailImage"] = this.thumbnailImage;
        data["slug"] = this.slug;
        data["shortDescription"] = this.shortDescription;
        data["unitPrice"] = this.unitPrice;
        return data; 
    }
}

export interface IProductSearchResponse {
    id?: number | undefined;
    productName?: string | undefined;
    thumbnailImage?: string | undefined;
    slug?: string | undefined;
    shortDescription?: string | undefined;
    unitPrice?: string | undefined;
}

export class ProductOverviewDto implements IProductOverviewDto {
    readonly id?: number | undefined;
    readonly productName?: string | undefined;
    readonly slug?: string | undefined;
    readonly price?: Price | undefined;
    readonly thumbnailImage?: string | undefined;
    readonly categories?: ProductCategoryDto[] | undefined;
    readonly medias?: ProductMedia[] | undefined;

    constructor(data?: IProductOverviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).id = data["id"];
            (<any>this).productName = data["productName"];
            (<any>this).slug = data["slug"];
            (<any>this).price = data["price"] ? Price.fromJS(data["price"]) : <any>undefined;
            (<any>this).thumbnailImage = data["thumbnailImage"];
            if (Array.isArray(data["categories"])) {
                (<any>this).categories = [] as any;
                for (let item of data["categories"])
                    (<any>this).categories!.push(ProductCategoryDto.fromJS(item));
            }
            if (Array.isArray(data["medias"])) {
                (<any>this).medias = [] as any;
                for (let item of data["medias"])
                    (<any>this).medias!.push(ProductMedia.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductOverviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductOverviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["productName"] = this.productName;
        data["slug"] = this.slug;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["thumbnailImage"] = this.thumbnailImage;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.medias)) {
            data["medias"] = [];
            for (let item of this.medias)
                data["medias"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductOverviewDto {
    id?: number | undefined;
    productName?: string | undefined;
    slug?: string | undefined;
    price?: Price | undefined;
    thumbnailImage?: string | undefined;
    categories?: ProductCategoryDto[] | undefined;
    medias?: ProductMedia[] | undefined;
}

export class Price implements IPrice {
    readonly currency?: string | undefined;
    readonly value?: string | undefined;

    constructor(data?: IPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).currency = data["currency"];
            (<any>this).value = data["value"];
        }
    }

    static fromJS(data: any): Price {
        data = typeof data === 'object' ? data : {};
        let result = new Price();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currency"] = this.currency;
        data["value"] = this.value;
        return data; 
    }
}

export interface IPrice {
    currency?: string | undefined;
    value?: string | undefined;
}

export class CreateProductRequest implements ICreateProductRequest {
    productName!: string;
    sku!: string;
    brand!: Brand;
    categories!: ProductCategory[];
    vendor!: StormyVendor;
    shortDescription!: string;
    description!: string;
    quantityPerUnity!: number;
    availableSizes!: string;
    unitPrice!: number;
    price?: Price | undefined;
    discount?: number | undefined;
    unitWeight!: number;
    height!: number;
    width!: number;
    length!: number;
    diameter?: number | undefined;
    unitsInStock!: number;
    productAvailable?: boolean | undefined;
    thumbnailImage!: string;
    medias?: ProductMedia[] | undefined;
    links?: ProductLinkDto[] | undefined;
    note?: string | undefined;
    ranking?: number | undefined;
    productCost?: number | undefined;

    constructor(data?: ICreateProductRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.brand = new Brand();
            this.categories = [];
            this.vendor = new StormyVendor();
        }
    }

    init(data?: any) {
        if (data) {
            this.productName = data["productName"];
            this.sku = data["sku"];
            this.brand = data["brand"] ? Brand.fromJS(data["brand"]) : new Brand();
            if (Array.isArray(data["categories"])) {
                this.categories = [] as any;
                for (let item of data["categories"])
                    this.categories!.push(ProductCategory.fromJS(item));
            }
            this.vendor = data["vendor"] ? StormyVendor.fromJS(data["vendor"]) : new StormyVendor();
            this.shortDescription = data["shortDescription"];
            this.description = data["description"];
            this.quantityPerUnity = data["quantityPerUnity"];
            this.availableSizes = data["availableSizes"];
            this.unitPrice = data["unitPrice"];
            this.price = data["price"] ? Price.fromJS(data["price"]) : <any>undefined;
            this.discount = data["discount"];
            this.unitWeight = data["unitWeight"];
            this.height = data["height"];
            this.width = data["width"];
            this.length = data["length"];
            this.diameter = data["diameter"];
            this.unitsInStock = data["unitsInStock"];
            this.productAvailable = data["productAvailable"];
            this.thumbnailImage = data["thumbnailImage"];
            if (Array.isArray(data["medias"])) {
                this.medias = [] as any;
                for (let item of data["medias"])
                    this.medias!.push(ProductMedia.fromJS(item));
            }
            if (Array.isArray(data["links"])) {
                this.links = [] as any;
                for (let item of data["links"])
                    this.links!.push(ProductLinkDto.fromJS(item));
            }
            this.note = data["note"];
            this.ranking = data["ranking"];
            this.productCost = data["productCost"];
        }
    }

    static fromJS(data: any): CreateProductRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productName"] = this.productName;
        data["sku"] = this.sku;
        data["brand"] = this.brand ? this.brand.toJSON() : <any>undefined;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["vendor"] = this.vendor ? this.vendor.toJSON() : <any>undefined;
        data["shortDescription"] = this.shortDescription;
        data["description"] = this.description;
        data["quantityPerUnity"] = this.quantityPerUnity;
        data["availableSizes"] = this.availableSizes;
        data["unitPrice"] = this.unitPrice;
        data["price"] = this.price ? this.price.toJSON() : <any>undefined;
        data["discount"] = this.discount;
        data["unitWeight"] = this.unitWeight;
        data["height"] = this.height;
        data["width"] = this.width;
        data["length"] = this.length;
        data["diameter"] = this.diameter;
        data["unitsInStock"] = this.unitsInStock;
        data["productAvailable"] = this.productAvailable;
        data["thumbnailImage"] = this.thumbnailImage;
        if (Array.isArray(this.medias)) {
            data["medias"] = [];
            for (let item of this.medias)
                data["medias"].push(item.toJSON());
        }
        if (Array.isArray(this.links)) {
            data["links"] = [];
            for (let item of this.links)
                data["links"].push(item.toJSON());
        }
        data["note"] = this.note;
        data["ranking"] = this.ranking;
        data["productCost"] = this.productCost;
        return data; 
    }
}

export interface ICreateProductRequest {
    productName: string;
    sku: string;
    brand: Brand;
    categories: ProductCategory[];
    vendor: StormyVendor;
    shortDescription: string;
    description: string;
    quantityPerUnity: number;
    availableSizes: string;
    unitPrice: number;
    price?: Price | undefined;
    discount?: number | undefined;
    unitWeight: number;
    height: number;
    width: number;
    length: number;
    diameter?: number | undefined;
    unitsInStock: number;
    productAvailable?: boolean | undefined;
    thumbnailImage: string;
    medias?: ProductMedia[] | undefined;
    links?: ProductLinkDto[] | undefined;
    note?: string | undefined;
    ranking?: number | undefined;
    productCost?: number | undefined;
}

export class ProductLinkDto implements IProductLinkDto {
    readonly product?: ProductDto | undefined;
    readonly linkedProduct?: ProductDto | undefined;
    readonly linkType?: ProductLinkDtoLinkType | undefined;

    constructor(data?: IProductLinkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).product = data["product"] ? ProductDto.fromJS(data["product"]) : <any>undefined;
            (<any>this).linkedProduct = data["linkedProduct"] ? ProductDto.fromJS(data["linkedProduct"]) : <any>undefined;
            (<any>this).linkType = data["linkType"];
        }
    }

    static fromJS(data: any): ProductLinkDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductLinkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        data["linkedProduct"] = this.linkedProduct ? this.linkedProduct.toJSON() : <any>undefined;
        data["linkType"] = this.linkType;
        return data; 
    }
}

export interface IProductLinkDto {
    product?: ProductDto | undefined;
    linkedProduct?: ProductDto | undefined;
    linkType?: ProductLinkDtoLinkType | undefined;
}

export class EditProductRequest implements IEditProductRequest {
    id?: number | undefined;
    sku!: string;
    productName!: string;
    slug?: string | undefined;
    shortDescription!: string;
    description!: string;
    quantityPerUnity?: number | undefined;
    availableSizes!: string;
    unitPrice!: number;
    discount?: number | undefined;
    unitWeight!: number;
    height!: number;
    width!: number;
    length!: number;
    diameter?: number | undefined;
    unitsInStock!: number;
    unitsOnOrder!: number;
    thumbnailImage!: string;
    note?: string | undefined;
    price!: string;
    productCost?: number | undefined;

    constructor(data?: IEditProductRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.sku = data["sku"];
            this.productName = data["productName"];
            this.slug = data["slug"];
            this.shortDescription = data["shortDescription"];
            this.description = data["description"];
            this.quantityPerUnity = data["quantityPerUnity"];
            this.availableSizes = data["availableSizes"];
            this.unitPrice = data["unitPrice"];
            this.discount = data["discount"];
            this.unitWeight = data["unitWeight"];
            this.height = data["height"];
            this.width = data["width"];
            this.length = data["length"];
            this.diameter = data["diameter"];
            this.unitsInStock = data["unitsInStock"];
            this.unitsOnOrder = data["unitsOnOrder"];
            this.thumbnailImage = data["thumbnailImage"];
            this.note = data["note"];
            this.price = data["price"];
            this.productCost = data["productCost"];
        }
    }

    static fromJS(data: any): EditProductRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditProductRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sku"] = this.sku;
        data["productName"] = this.productName;
        data["slug"] = this.slug;
        data["shortDescription"] = this.shortDescription;
        data["description"] = this.description;
        data["quantityPerUnity"] = this.quantityPerUnity;
        data["availableSizes"] = this.availableSizes;
        data["unitPrice"] = this.unitPrice;
        data["discount"] = this.discount;
        data["unitWeight"] = this.unitWeight;
        data["height"] = this.height;
        data["width"] = this.width;
        data["length"] = this.length;
        data["diameter"] = this.diameter;
        data["unitsInStock"] = this.unitsInStock;
        data["unitsOnOrder"] = this.unitsOnOrder;
        data["thumbnailImage"] = this.thumbnailImage;
        data["note"] = this.note;
        data["price"] = this.price;
        data["productCost"] = this.productCost;
        return data; 
    }
}

export interface IEditProductRequest {
    id?: number | undefined;
    sku: string;
    productName: string;
    slug?: string | undefined;
    shortDescription: string;
    description: string;
    quantityPerUnity?: number | undefined;
    availableSizes: string;
    unitPrice: number;
    discount?: number | undefined;
    unitWeight: number;
    height: number;
    width: number;
    length: number;
    diameter?: number | undefined;
    unitsInStock: number;
    unitsOnOrder: number;
    thumbnailImage: string;
    note?: string | undefined;
    price: string;
    productCost?: number | undefined;
}

export class WriteReviewRequest implements IWriteReviewRequest {
    title!: string;
    comment!: string;
    rating!: WriteReviewRequestRating;
    reviewerName?: string | undefined;
    stormyProductId?: number | undefined;

    constructor(data?: IWriteReviewRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"];
            this.comment = data["comment"];
            this.rating = data["rating"];
            this.reviewerName = data["reviewerName"];
            this.stormyProductId = data["stormyProductId"];
        }
    }

    static fromJS(data: any): WriteReviewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new WriteReviewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["comment"] = this.comment;
        data["rating"] = this.rating;
        data["reviewerName"] = this.reviewerName;
        data["stormyProductId"] = this.stormyProductId;
        return data; 
    }
}

export interface IWriteReviewRequest {
    title: string;
    comment: string;
    rating: WriteReviewRequestRating;
    reviewerName?: string | undefined;
    stormyProductId?: number | undefined;
}

export class DeliveryCalculationRequest implements IDeliveryCalculationRequest {
    shippingMethod!: string;
    formatCode!: DeliveryCalculationRequestFormatCode;
    height!: number;
    width!: number;
    length!: number;
    diameter!: number;
    weight?: number | undefined;
    destinationPostalCode!: string;
    valorDeclarado?: number | undefined;
    warningOfReceiving?: string | undefined;
    maoPropria?: string | undefined;

    constructor(data?: IDeliveryCalculationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shippingMethod = data["shippingMethod"];
            this.formatCode = data["formatCode"];
            this.height = data["height"];
            this.width = data["width"];
            this.length = data["length"];
            this.diameter = data["diameter"];
            this.weight = data["weight"];
            this.destinationPostalCode = data["destinationPostalCode"];
            this.valorDeclarado = data["valorDeclarado"];
            this.warningOfReceiving = data["warningOfReceiving"];
            this.maoPropria = data["maoPropria"];
        }
    }

    static fromJS(data: any): DeliveryCalculationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryCalculationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingMethod"] = this.shippingMethod;
        data["formatCode"] = this.formatCode;
        data["height"] = this.height;
        data["width"] = this.width;
        data["length"] = this.length;
        data["diameter"] = this.diameter;
        data["weight"] = this.weight;
        data["destinationPostalCode"] = this.destinationPostalCode;
        data["valorDeclarado"] = this.valorDeclarado;
        data["warningOfReceiving"] = this.warningOfReceiving;
        data["maoPropria"] = this.maoPropria;
        return data; 
    }
}

export interface IDeliveryCalculationRequest {
    shippingMethod: string;
    formatCode: DeliveryCalculationRequestFormatCode;
    height: number;
    width: number;
    length: number;
    diameter: number;
    weight?: number | undefined;
    destinationPostalCode: string;
    valorDeclarado?: number | undefined;
    warningOfReceiving?: string | undefined;
    maoPropria?: string | undefined;
}

export class DeliveryCalculationOptionResponse implements IDeliveryCalculationOptionResponse {
    deliveryDate?: Date | undefined;
    deliveryMaxDate?: Date | undefined;
    hourOfDay?: Date | undefined;
    price?: number | undefined;
    service?: string | undefined;

    constructor(data?: IDeliveryCalculationOptionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.deliveryDate = data["deliveryDate"] ? new Date(data["deliveryDate"].toString()) : <any>undefined;
            this.deliveryMaxDate = data["deliveryMaxDate"] ? new Date(data["deliveryMaxDate"].toString()) : <any>undefined;
            this.hourOfDay = data["hourOfDay"] ? new Date(data["hourOfDay"].toString()) : <any>undefined;
            this.price = data["price"];
            this.service = data["service"];
        }
    }

    static fromJS(data: any): DeliveryCalculationOptionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryCalculationOptionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>undefined;
        data["deliveryMaxDate"] = this.deliveryMaxDate ? this.deliveryMaxDate.toISOString() : <any>undefined;
        data["hourOfDay"] = this.hourOfDay ? this.hourOfDay.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["service"] = this.service;
        return data; 
    }
}

export interface IDeliveryCalculationOptionResponse {
    deliveryDate?: Date | undefined;
    deliveryMaxDate?: Date | undefined;
    hourOfDay?: Date | undefined;
    price?: number | undefined;
    service?: string | undefined;
}

export class DeliveryCalculationForOrderRequest implements IDeliveryCalculationForOrderRequest {
    destinationPostalCode?: string | undefined;
    order?: OrderDto | undefined;

    constructor(data?: IDeliveryCalculationForOrderRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.destinationPostalCode = data["destinationPostalCode"];
            this.order = data["order"] ? OrderDto.fromJS(data["order"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeliveryCalculationForOrderRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryCalculationForOrderRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["destinationPostalCode"] = this.destinationPostalCode;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IDeliveryCalculationForOrderRequest {
    destinationPostalCode?: string | undefined;
    order?: OrderDto | undefined;
}

export enum CreateShippingAddressRequestType {
    _0 = 0,
    _1 = 1,
}

export enum CustomerAddressDtoType {
    _0 = 0,
    _1 = 1,
}

export enum CheckoutRequestShippingMethod {
    _40010 = 40010,
    _40045 = 40045,
    _40169 = 40169,
    _40215 = 40215,
    _40290 = 40290,
    _41106 = 41106,
}

export enum CheckoutRequestPaymentMethod {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum PaymentDtoPaymentMethod {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum PaymentDtoPaymentStatus {
    _1 = 1,
    _5 = 5,
    _10 = 10,
    _15 = 15,
    _20 = 20,
    _25 = 25,
    _30 = 30,
}

export enum ShipmentDtoShipmentMethod {
    _40010 = 40010,
    _40045 = 40045,
    _40169 = 40169,
    _40215 = 40215,
    _40290 = 40290,
    _41106 = 41106,
}

export enum ShipmentDtoStatus {
    _1 = 1,
    _5 = 5,
    _10 = 10,
    _15 = 15,
    _20 = 20,
}

export enum OrderDtoStatus {
    _1 = 1,
    _10 = 10,
    _20 = 20,
    _30 = 30,
    _35 = 35,
    _40 = 40,
    _50 = 50,
    _60 = 60,
    _70 = 70,
    _80 = 80,
    _90 = 90,
    _100 = 100,
}

export enum PostbackModel {
    _0 = 0,
    _1 = 1,
}

export enum PostbackStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum PostbackDeliveryStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum CustomerAddressType {
    _0 = 0,
    _1 = 1,
}

export enum ReviewStatus {
    _1 = 1,
    _5 = 5,
    _8 = 8,
}

export enum ProductLinkLinkType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum MediaType {
    _1 = 1,
    _5 = 5,
    _10 = 10,
}

export enum ProductLinkDtoLinkType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum WriteReviewRequestRating {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum DeliveryCalculationRequestFormatCode {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}