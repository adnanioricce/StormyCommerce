{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Danilo\\\\Documents\\\\GitHub\\\\WithoffStore\\\\Web\\\\components\\\\Slide.jsx\";\nimport * as React from 'react';\nimport nextSlideSVG from '../static/assets/slides/nextSlide.svg';\nimport previousSlideSVG from '../static/assets/slides/previousSlide.svg';\nexport default (function () {\n  var _React$useState = React.useState(2),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      index = _React$useState2[0],\n      setIndex = _React$useState2[1];\n\n  var imgRef = React.useRef();\n\n  var _React$useState3 = React.useState([0, 1, 2, 3, 4]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      images = _React$useState4[0],\n      setImages = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      slideWidth = _React$useState6[0],\n      setSlideWidth = _React$useState6[1];\n\n  var _React$useState7 = React.useState(null),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      slides = _React$useState8[0],\n      setSlides = _React$useState8[1];\n\n  var timer = React.useRef();\n  React.useEffect(function () {\n    var newSlides = images.map(function (e, eIndex) {\n      return React.createElement(\"div\", {\n        ref: imgRef,\n        key: e,\n        className: eIndex === index ? 'main image' : 'image',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"/static/assets/slides/\".concat(e, \".svg\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }));\n    });\n    setSlides(newSlides);\n  }, [index, images]);\n  React.useEffect(function () {\n    if (imgRef.current) {\n      setSlideWidth(imgRef.current.offsetWidth);\n    }\n  });\n\n  function handleNextSlide() {\n    if (index <= images.length - 2) {\n      setIndex(index + 1);\n    }\n  }\n\n  function handlePreviousSlide() {\n    if (index !== 0) {\n      setIndex(index - 1);\n    }\n  }\n\n  React.useEffect(function () {\n    // setTimeout(()=>{\n    //   handleNextSlide()\n    // }, 500)\n    clearTimeout(timer.current);\n    timer.current = setTimeout(function () {\n      if (index <= images.length - 2) {\n        setIndex(index + 1);\n      } else {\n        setIndex(0);\n      }\n    }, 4000);\n    return function () {\n      return clearTimeout(timer.current);\n    };\n  }, [index]); // const modifier = width<=425 ? 0 : (-0.12*slideWidth)\n\n  return React.createElement(\"div\", {\n    className: \"overflow-not-allower\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"Slide\",\n    style: {\n      transform: \"translateX(\".concat(index * slideWidth * -1, \"px)\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, slides), React.createElement(\"div\", {\n    className: \"slide-controller\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    onClick: handlePreviousSlide,\n    src: previousSlideSVG,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    onClick: handleNextSlide,\n    src: nextSlideSVG,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n});","map":{"version":3,"sources":["C:\\Users\\Danilo\\Documents\\GitHub\\WithoffStore\\Web\\components\\Slide.jsx"],"names":["React","nextSlideSVG","previousSlideSVG","useState","index","setIndex","imgRef","useRef","images","setImages","slideWidth","setSlideWidth","slides","setSlides","timer","useEffect","newSlides","map","e","eIndex","current","offsetWidth","handleNextSlide","length","handlePreviousSlide","clearTimeout","setTimeout","transform"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport nextSlideSVG from '../static/assets/slides/nextSlide.svg';\r\nimport previousSlideSVG from '../static/assets/slides/previousSlide.svg';\r\nexport default ()=>{\r\n  const [index, setIndex] = React.useState(2);\r\n  const imgRef = React.useRef();\r\n  const [images, setImages] = React.useState([0, 1, 2, 3, 4]);\r\n  const [slideWidth, setSlideWidth] = React.useState(0);\r\n  const [slides, setSlides] = React.useState(null);\r\n  const timer = React.useRef()\r\n  React.useEffect(()=>{\r\n    const newSlides = images.map((e, eIndex)=>(\r\n      <div ref={imgRef} key={e} className={eIndex === index ? 'main image' : 'image'}>\r\n        <img  src={`/static/assets/slides/${e}.svg`}/>\r\n      </div>\r\n    ))\r\n    setSlides(newSlides)\r\n  }, [index, images])\r\n  React.useEffect(()=>{\r\n    if(imgRef.current){\r\n      setSlideWidth(imgRef.current.offsetWidth);\r\n    }\r\n  })\r\n\r\n  function handleNextSlide(){\r\n    if(index<=images.length-2){\r\n      setIndex(index+1)\r\n    }\r\n    \r\n  }\r\n  function handlePreviousSlide(){\r\n    if(index!==0){\r\n      setIndex(index-1)\r\n    }\r\n  }\r\n  React.useEffect(()=>{\r\n    // setTimeout(()=>{\r\n    //   handleNextSlide()\r\n    // }, 500)\r\n    clearTimeout(timer.current)\r\n    timer.current = setTimeout(()=>{\r\n      if(index<=images.length-2){\r\n        setIndex(index+1)\r\n      }else{\r\n        setIndex(0)\r\n      }\r\n      \r\n    }, 4000)\r\n    return ()=>clearTimeout(timer.current)\r\n  }, [index])\r\n  \r\n  // const modifier = width<=425 ? 0 : (-0.12*slideWidth)\r\n  return (\r\n    <div className=\"overflow-not-allower\">\r\n      <div className=\"Slide\" style={{transform: `translateX(${((index*slideWidth))*-1}px)`}}>\r\n          \r\n        {slides}\r\n      </div>\r\n      <div className=\"slide-controller\">\r\n        <img onClick={handlePreviousSlide} src={previousSlideSVG} alt=\"\"/>\r\n        <img onClick={handleNextSlide} src={nextSlideSVG} alt=\"\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}