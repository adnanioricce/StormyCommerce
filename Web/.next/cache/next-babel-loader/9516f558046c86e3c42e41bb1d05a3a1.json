{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Danilo\\\\Documents\\\\GitHub\\\\WithoffStore\\\\Web\\\\components\\\\ColorSelector.jsx\";\nimport React from 'react';\nimport { useClickAway } from 'react-use';\nimport InteractiveElement from './InteractiveElement';\nimport Title from './Title';\n\nfunction ColorSelector({\n  options,\n  getActiveColor\n}) {\n  const [isPopupActive, setIsPopupActive] = React.useState(false);\n  const [activeColor, setActiveColor] = React.useState(options[0].color);\n  React.useEffect(() => {\n    getActiveColor(getActiveColor);\n  }, activeColor);\n  React.useEffect(() => {\n    if (isPopupActive && window) {\n      window.document.body.style.overflow = 'hidden';\n    } else if (window) {\n      window.document.body.style.overflow = 'auto';\n    }\n  }, [isPopupActive]);\n  return React.createElement(React.Fragment, null, React.createElement(ColorPopup, {\n    state: [isPopupActive, setIsPopupActive, activeColor, setActiveColor],\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(Title, {\n    label: \"Cor\",\n    style: {\n      margin: '5px 0',\n      fontSize: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }), React.createElement(InteractiveElement, {\n    className: \"color-selector\",\n    style: {\n      backgroundColor: activeColor\n    },\n    tag: \"div\",\n    onClick: () => {\n      setIsPopupActive(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }));\n}\n\nconst ColorPopup = ({\n  state,\n  options\n}) => {\n  const [isPopupActive, setIsPopupActive, activeColor, setActiveColor] = state;\n  const popupRef = React.useRef(null);\n  useClickAway(popupRef, () => {\n    setIsPopupActive(false);\n  });\n  return React.createElement(\"div\", {\n    className: \"color-popup-overlay\",\n    style: {\n      transition: 'opacity .3s ease-in-out',\n      pointerEvents: isPopupActive ? 'all' : 'none',\n      opacity: isPopupActive ? 1 : 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"color-popup\",\n    ref: popupRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"color-popup-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Title, {\n    label: \"Selecione uma cor\",\n    style: {\n      color: 'white',\n      fontSize: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"color-popup-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, options.map(({\n    value,\n    color\n  }, index) => {\n    const handleColorClick = () => {\n      setActiveColor(value);\n      setIsPopupActive(false);\n    };\n\n    return React.createElement(InteractiveElement, {\n      key: index,\n      className: color === activeColor ? 'color-popup-box selected' : 'color-popup-box',\n      style: {\n        backgroundColor: color\n      },\n      onClick: handleColorClick,\n      tag: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n  }))));\n};\n\nexport default ColorSelector;","map":{"version":3,"sources":["C:\\Users\\Danilo\\Documents\\GitHub\\WithoffStore\\Web\\components\\ColorSelector.jsx"],"names":["React","useClickAway","InteractiveElement","Title","ColorSelector","options","getActiveColor","isPopupActive","setIsPopupActive","useState","activeColor","setActiveColor","color","useEffect","window","document","body","style","overflow","margin","fontSize","backgroundColor","ColorPopup","state","popupRef","useRef","transition","pointerEvents","opacity","map","value","index","handleColorClick"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useClickAway } from 'react-use';\r\nimport InteractiveElement from './InteractiveElement';\r\nimport Title from './Title';\r\n\r\nfunction ColorSelector({ options, getActiveColor }) {\r\n  const [isPopupActive, setIsPopupActive] = React.useState(false);\r\n  const [activeColor, setActiveColor] = React.useState(options[0].color);\r\n  React.useEffect(() => {\r\n    getActiveColor(getActiveColor);\r\n  }, activeColor);\r\n  React.useEffect(() => {\r\n    if (isPopupActive && window) {\r\n      window.document.body.style.overflow = 'hidden';\r\n    } else if (window) {\r\n      window.document.body.style.overflow = 'auto';\r\n    }\r\n  }, [isPopupActive]);\r\n  return (\r\n    <>\r\n      <ColorPopup\r\n        state={[isPopupActive, setIsPopupActive, activeColor, setActiveColor]}\r\n        options={options}\r\n      />\r\n      <Title label=\"Cor\" style={{ margin: '5px 0', fontSize: '10px' }} />\r\n      <InteractiveElement\r\n        className=\"color-selector\"\r\n        style={{ backgroundColor: activeColor }}\r\n        tag=\"div\"\r\n        onClick={() => {\r\n          setIsPopupActive(true);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\nconst ColorPopup = ({ state, options }) => {\r\n  const [isPopupActive, setIsPopupActive, activeColor, setActiveColor] = state;\r\n  const popupRef = React.useRef(null);\r\n  useClickAway(popupRef, () => {\r\n    setIsPopupActive(false);\r\n  });\r\n  return (\r\n    <div\r\n      className=\"color-popup-overlay\"\r\n      style={{\r\n        transition: 'opacity .3s ease-in-out',\r\n        pointerEvents: isPopupActive ? 'all' : 'none',\r\n        opacity: isPopupActive ? 1 : 0\r\n      }}\r\n    >\r\n      <div className=\"color-popup\" ref={popupRef}>\r\n        <div className=\"color-popup-header\">\r\n          <Title\r\n            label=\"Selecione uma cor\"\r\n            style={{ color: 'white', fontSize: 10 }}\r\n          />\r\n        </div>\r\n        <div className=\"color-popup-body\">\r\n          {options.map(({ value, color }, index) => {\r\n            const handleColorClick = () => {\r\n              setActiveColor(value);\r\n              setIsPopupActive(false);\r\n            };\r\n            return (\r\n              <InteractiveElement\r\n                key={index}\r\n                className={\r\n                  color === activeColor\r\n                    ? 'color-popup-box selected'\r\n                    : 'color-popup-box'\r\n                }\r\n                style={{ backgroundColor: color }}\r\n                onClick={handleColorClick}\r\n                tag=\"div\"\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ColorSelector;\r\n"]},"metadata":{},"sourceType":"module"}