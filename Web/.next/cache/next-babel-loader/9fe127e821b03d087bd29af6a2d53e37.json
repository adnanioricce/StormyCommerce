{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Danilo\\\\Documents\\\\GitHub\\\\WithoffStore\\\\Web\\\\components\\\\ColorSelector.jsx\";\nimport React from 'react';\nimport { useClickAway } from 'react-use';\nimport InteractiveElement from './InteractiveElement';\nimport Title from './Title';\n\nfunction ColorSelector(_ref) {\n  var options = _ref.options;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isPopupActive = _React$useState2[0],\n      setIsPopupActive = _React$useState2[1];\n\n  var _React$useState3 = React.useState(options[0].color),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      activeColor = _React$useState4[0],\n      setActiveColor = _React$useState4[1];\n\n  return React.createElement(React.Fragment, null, isPopupActive && React.createElement(ColorPopup, {\n    state: [isPopupActive, setIsPopupActive, activeColor, setActiveColor],\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), React.createElement(Title, {\n    label: \"Cor\",\n    style: {\n      margin: '5px 0',\n      fontSize: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), React.createElement(InteractiveElement, {\n    className: \"color-selector\",\n    style: {\n      backgroundColor: activeColor\n    },\n    tag: \"div\",\n    onClick: function onClick() {\n      setIsPopupActive(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }));\n}\n\nvar ColorPopup = function ColorPopup(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n\n  var _state = _slicedToArray(state, 4),\n      isPopupActive = _state[0],\n      setIsPopupActive = _state[1],\n      activeColor = _state[2],\n      setActiveColor = _state[3];\n\n  var popupRef = React.useRef(null);\n  useClickAway(popupRef, function () {\n    setIsPopupActive(false);\n  });\n  return React.createElement(\"div\", {\n    className: \"color-popup-overlay\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"color-popup\",\n    ref: popupRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"color-popup-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Title, {\n    label: \"Selecione uma cor\",\n    style: {\n      color: 'white',\n      fontSize: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"color-popup-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, options.map(function (_ref3, index) {\n    var value = _ref3.value,\n        color = _ref3.color;\n\n    var handleColorClick = function handleColorClick() {\n      setActiveColor(value);\n      setIsPopupActive(false);\n    };\n\n    return React.createElement(InteractiveElement, {\n      key: index,\n      className: color === activeColor ? 'color-popup-box selected' : 'color-popup-box',\n      style: {\n        backgroundColor: color\n      },\n      onClick: handleColorClick,\n      tag: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  }))));\n};\n\nexport default ColorSelector;","map":{"version":3,"sources":["C:\\Users\\Danilo\\Documents\\GitHub\\WithoffStore\\Web\\components\\ColorSelector.jsx"],"names":["React","useClickAway","InteractiveElement","Title","ColorSelector","options","useState","isPopupActive","setIsPopupActive","color","activeColor","setActiveColor","margin","fontSize","backgroundColor","ColorPopup","state","popupRef","useRef","map","index","value","handleColorClick"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,SAASC,aAAT,OAAoC;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAAA,wBACQL,KAAK,CAACM,QAAN,CAAe,KAAf,CADR;AAAA;AAAA,MAC3BC,aAD2B;AAAA,MACZC,gBADY;;AAAA,yBAEIR,KAAK,CAACM,QAAN,CAAeD,OAAO,CAAC,CAAD,CAAP,CAAWI,KAA1B,CAFJ;AAAA;AAAA,MAE3BC,WAF2B;AAAA,MAEdC,cAFc;;AAGlC,SACE,0CACGJ,aAAa,IACZ,oBAAC,UAAD;AACE,IAAA,KAAK,EAAE,CAACA,aAAD,EAAgBC,gBAAhB,EAAkCE,WAAlC,EAA+CC,cAA/C,CADT;AAEE,IAAA,OAAO,EAAEN,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAOE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAC,KAAb;AAAmB,IAAA,KAAK,EAAE;AAAEO,MAAAA,MAAM,EAAE,OAAV;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQE,oBAAC,kBAAD;AACE,IAAA,SAAS,EAAC,gBADZ;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAEJ;AAAnB,KAFT;AAGE,IAAA,GAAG,EAAC,KAHN;AAIE,IAAA,OAAO,EAAE,mBAAM;AACbF,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAmBD;;AACD,IAAMO,UAAU,GAAG,SAAbA,UAAa,QAAwB;AAAA,MAArBC,KAAqB,SAArBA,KAAqB;AAAA,MAAdX,OAAc,SAAdA,OAAc;;AAAA,8BAC8BW,KAD9B;AAAA,MAClCT,aADkC;AAAA,MACnBC,gBADmB;AAAA,MACDE,WADC;AAAA,MACYC,cADZ;;AAEzC,MAAMM,QAAQ,GAAGjB,KAAK,CAACkB,MAAN,CAAa,IAAb,CAAjB;AACAjB,EAAAA,YAAY,CAACgB,QAAD,EAAW,YAAM;AAC3BT,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,GAFW,CAAZ;AAGA,SACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,GAAG,EAAES,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAC,mBADR;AAEE,IAAA,KAAK,EAAE;AAAER,MAAAA,KAAK,EAAE,OAAT;AAAkBI,MAAAA,QAAQ,EAAE;AAA5B,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAOE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,OAAO,CAACc,GAAR,CAAY,iBAAmBC,KAAnB,EAA6B;AAAA,QAA1BC,KAA0B,SAA1BA,KAA0B;AAAA,QAAnBZ,KAAmB,SAAnBA,KAAmB;;AACxC,QAAMa,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BX,MAAAA,cAAc,CAACU,KAAD,CAAd;AACAb,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,KAHD;;AAIA,WACE,oBAAC,kBAAD;AACE,MAAA,GAAG,EAAEY,KADP;AAEE,MAAA,SAAS,EACPX,KAAK,KAAKC,WAAV,GACI,0BADJ,GAEI,iBALR;AAOE,MAAA,KAAK,EAAE;AAAEI,QAAAA,eAAe,EAAEL;AAAnB,OAPT;AAQE,MAAA,OAAO,EAAEa,gBARX;AASE,MAAA,GAAG,EAAC,KATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAaD,GAlBA,CADH,CAPF,CADF,CADF;AAiCD,CAvCD;;AAwCA,eAAelB,aAAf","sourcesContent":["import React from 'react';\r\nimport { useClickAway } from 'react-use';\r\nimport InteractiveElement from './InteractiveElement';\r\nimport Title from './Title';\r\n\r\nfunction ColorSelector({ options }) {\r\n  const [isPopupActive, setIsPopupActive] = React.useState(false);\r\n  const [activeColor, setActiveColor] = React.useState(options[0].color);\r\n  return (\r\n    <>\r\n      {isPopupActive && (\r\n        <ColorPopup\r\n          state={[isPopupActive, setIsPopupActive, activeColor, setActiveColor]}\r\n          options={options}\r\n        />\r\n      )}\r\n      <Title label=\"Cor\" style={{ margin: '5px 0', fontSize: '10px' }} />\r\n      <InteractiveElement\r\n        className=\"color-selector\"\r\n        style={{ backgroundColor: activeColor }}\r\n        tag=\"div\"\r\n        onClick={() => {\r\n          setIsPopupActive(true);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\nconst ColorPopup = ({ state, options }) => {\r\n  const [isPopupActive, setIsPopupActive, activeColor, setActiveColor] = state;\r\n  const popupRef = React.useRef(null);\r\n  useClickAway(popupRef, () => {\r\n    setIsPopupActive(false);\r\n  });\r\n  return (\r\n    <div className=\"color-popup-overlay\">\r\n      <div className=\"color-popup\" ref={popupRef}>\r\n        <div className=\"color-popup-header\">\r\n          <Title\r\n            label=\"Selecione uma cor\"\r\n            style={{ color: 'white', fontSize: 10 }}\r\n          />\r\n        </div>\r\n        <div className=\"color-popup-body\">\r\n          {options.map(({ value, color }, index) => {\r\n            const handleColorClick = () => {\r\n              setActiveColor(value);\r\n              setIsPopupActive(false);\r\n            };\r\n            return (\r\n              <InteractiveElement\r\n                key={index}\r\n                className={\r\n                  color === activeColor\r\n                    ? 'color-popup-box selected'\r\n                    : 'color-popup-box'\r\n                }\r\n                style={{ backgroundColor: color }}\r\n                onClick={handleColorClick}\r\n                tag=\"div\"\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ColorSelector;\r\n"]},"metadata":{},"sourceType":"module"}