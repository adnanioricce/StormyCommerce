//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace StormyCommerce.Api.Client
{
    using System = global::System;
    
    //[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    //public partial interface IClient
    //{
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> LoginAsync(SignInVm signInVm = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> RegisterAsync(SignUpVm signUpVm = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> ConfirmEmailAsync(string email = null, string code = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> ResetPasswordAsync(ResetPasswordViewModel model = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> ForgotPasswordAsync(ForgotPasswordViewModel model = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<ICollection<CategoryDto>>> GetAllAsync(CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<CategoryDto>> GetCategoryByIdAsync(long id, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> CreateCategoryAsync(Category category = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> EditCategoryAsync(string id, Category category = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> CheckoutBoletoAsync(CheckoutOrderVm checkoutVm = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> AddAddressAsync(Address address = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> WriteReviewAsync(CustomerReviewDto review = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<ICollection<StormyCustomer>>> GetCustomersAsync(int? minLimit = null, long? maxLimit = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<CustomerDto>> GetCustomerByEmailOrUsernameAsync(string email = null, string username = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> CreateCustomerAsync(CustomerDto customerDto = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> CreateOrderAsync(OrderDto orderDto = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<ProductOverviewDto>> GetProductOverviewAsync(string _0, long? id = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<ICollection<ProductDto>>> GetAllProductsAsync(long? startIndex = null, long? endIndex = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<ICollection<ProductDto>>> GetAllProductsOnHomepageAsync(int? limit = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<ProductDto>> GetProductByIdAsync(string _0, long? id = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> CreateProductAsync(ProductDto _model = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> EditProductAsync(ProductDto _model = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<int>> GetNumberOfProductsInCategoryAsync(IEnumerable<int> categoryIds = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result<ICollection<ProductDto>>> GetAllProductsOnCategoryAsync(int? categoryId = null, int? limit = null, CancellationToken cancellationToken = default(CancellationToken));
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    Tasks.Task<Result> SeedDatabaseAsync(CancellationToken cancellationToken = default(CancellationToken));
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    //public partial class Client : IClient
    //{
    //    private string _baseUrl = "https://localhost:80";
    //    private System.Net.Http.HttpClient _httpClient;
    //    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
    //    public Client(System.Net.Http.HttpClient httpClient)
    //    {
    //        _httpClient = httpClient; 
    //        _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
    //        {
    //            var settings = new Newtonsoft.Json.JsonSerializerSettings();
    //            UpdateJsonSerializerSettings(settings);
    //            return settings;
    //        });
    //    }
    
    //    public string BaseUrl 
    //    {
    //        get { return _baseUrl; }
    //        set { _baseUrl = value; }
    //    }
    
    //    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
    //    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    //    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    //    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    //    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> LoginAsync(SignInVm signInVm = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Authentication/login");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(signInVm, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> RegisterAsync(SignUpVm signUpVm = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Authentication/register");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(signUpVm, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> ConfirmEmailAsync(string email = null, string code = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Authentication/ConfirmEmail?");
    //        if (email != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        if (code != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        urlBuilder_.Length--;
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> ResetPasswordAsync(ResetPasswordViewModel model = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Authentication/ResetPassword");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> ForgotPasswordAsync(ForgotPasswordViewModel model = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Authentication");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<ICollection<CategoryDto>>> GetAllAsync(CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Category/GetAll/list");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<ICollection<CategoryDto>>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<ICollection<CategoryDto>>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<ICollection<CategoryDto>>((int)response_.StatusCode, headers_, default(ICollection<CategoryDto>)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<CategoryDto>> GetCategoryByIdAsync(long id, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        if (id == null)
    //            throw new System.ArgumentNullException("id");
    
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Category/GetCategoryById/{id}");
    //        urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<CategoryDto>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<CategoryDto>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<CategoryDto>((int)response_.StatusCode, headers_, default(CategoryDto)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> CreateCategoryAsync(Category category = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Category/CreateCategory");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(category, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> EditCategoryAsync(string id, Category category = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        if (id == null)
    //            throw new System.ArgumentNullException("id");
    
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Category/EditCategory/{id}");
    //        urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(category, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("PUT");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> CheckoutBoletoAsync(CheckoutOrderVm checkoutVm = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Checkout");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(checkoutVm, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> AddAddressAsync(Address address = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/address/create");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(address, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> WriteReviewAsync(CustomerReviewDto review = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/review/create");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(review, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<ICollection<StormyCustomer>>> GetCustomersAsync(int? minLimit = null, long? maxLimit = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/customer/list?");
    //        if (minLimit != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("minLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(minLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        if (maxLimit != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("maxLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        urlBuilder_.Length--;
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<ICollection<StormyCustomer>>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<ICollection<StormyCustomer>>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<ICollection<StormyCustomer>>((int)response_.StatusCode, headers_, default(ICollection<StormyCustomer>)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<CustomerDto>> GetCustomerByEmailOrUsernameAsync(string email = null, string username = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/customer/getbyemail?");
    //        if (email != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        if (username != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        urlBuilder_.Length--;
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<CustomerDto>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<CustomerDto>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<CustomerDto>((int)response_.StatusCode, headers_, default(CustomerDto)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> CreateCustomerAsync(CustomerDto customerDto = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/createcustomer");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(customerDto, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> CreateOrderAsync(OrderDto orderDto = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/create");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(orderDto, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<ProductOverviewDto>> GetProductOverviewAsync(string _0, long? id = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        if (_0 == null)
    //            throw new System.ArgumentNullException("_0");
    
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Product/GetProductOverviewAsync/{0}?");
    //        urlBuilder_.Replace("{0}", System.Uri.EscapeDataString(ConvertToString(_0, System.Globalization.CultureInfo.InvariantCulture)));
    //        if (id != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        urlBuilder_.Length--;
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<ProductOverviewDto>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<ProductOverviewDto>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<ProductOverviewDto>((int)response_.StatusCode, headers_, default(ProductOverviewDto)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<ICollection<ProductDto>>> GetAllProductsAsync(long? startIndex = null, long? endIndex = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Product/GetAllProducts?");
    //        if (startIndex != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("startIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        if (endIndex != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("endIndex") + "=").Append(System.Uri.EscapeDataString(ConvertToString(endIndex, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        urlBuilder_.Length--;
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<ICollection<ProductDto>>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<ICollection<ProductDto>>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<ICollection<ProductDto>>((int)response_.StatusCode, headers_, default(ICollection<ProductDto>)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<ICollection<ProductDto>>> GetAllProductsOnHomepageAsync(int? limit = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Product/GetAllProductsOnHomepage?");
    //        if (limit != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        urlBuilder_.Length--;
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<ICollection<ProductDto>>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<ICollection<ProductDto>>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<ICollection<ProductDto>>((int)response_.StatusCode, headers_, default(ICollection<ProductDto>)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<ProductDto>> GetProductByIdAsync(string _0, long? id = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        if (_0 == null)
    //            throw new System.ArgumentNullException("_0");
    
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Product/GetProductById/{0}?");
    //        urlBuilder_.Replace("{0}", System.Uri.EscapeDataString(ConvertToString(_0, System.Globalization.CultureInfo.InvariantCulture)));
    //        if (id != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        urlBuilder_.Length--;
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<ProductDto>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<ProductDto>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<ProductDto>((int)response_.StatusCode, headers_, default(ProductDto)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> CreateProductAsync(ProductDto _model = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Product/CreateProduct");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_model, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("POST");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> EditProductAsync(ProductDto _model = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Product/EditProduct");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(_model, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("PUT");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<int>> GetNumberOfProductsInCategoryAsync(IEnumerable<int> categoryIds = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Product/GetNumberOfProductsInCategory");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(categoryIds, _settings.Value));
    //                content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
    //                request_.Content = content_;
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<int>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<int>((int)response_.StatusCode, headers_, default(int)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result<ICollection<ProductDto>>> GetAllProductsOnCategoryAsync(int? categoryId = null, int? limit = null, CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Product/GetAllProductsOnCategory?");
    //        if (categoryId != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("categoryId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        if (limit != null) 
    //        {
    //            urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
    //        }
    //        urlBuilder_.Length--;
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    //                request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        var objectResponse_ = await ReadObjectResponseAsync<ICollection<ProductDto>>(response_, headers_).ConfigureAwait(false);
    //                        return new Result<ICollection<ProductDto>>((int)response_.StatusCode, headers_, objectResponse_.Object);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
            
    //                    return new Result<ICollection<ProductDto>>((int)response_.StatusCode, headers_, default(ICollection<ProductDto>)); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    //    /// <returns>Success</returns>
    //    /// <exception cref="ApiException">A server side error occurred.</exception>
    //    public async Tasks.Task<Result> SeedDatabaseAsync(CancellationToken cancellationToken = default(CancellationToken))
    //    {
    //        var urlBuilder_ = new System.Text.StringBuilder();
    //        urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/seed");
    
    //        var client_ = _httpClient;
    //        try
    //        {
    //            using (var request_ = new System.Net.Http.HttpRequestMessage())
    //            {
    //                request_.Method = new System.Net.Http.HttpMethod("GET");
    
    //                PrepareRequest(client_, request_, urlBuilder_);
    //                var url_ = urlBuilder_.ToString();
    //                request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    //                PrepareRequest(client_, request_, url_);
    
    //                var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    //                try
    //                {
    //                    var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
    //                    if (response_.Content != null && response_.Content.Headers != null)
    //                    {
    //                        foreach (var item_ in response_.Content.Headers)
    //                            headers_[item_.Key] = item_.Value;
    //                    }
    
    //                    ProcessResponse(client_, response_);
    
    //                    var status_ = ((int)response_.StatusCode).ToString();
    //                    if (status_ == "200") 
    //                    {
    //                        return new Result((int)response_.StatusCode, headers_);
    //                    }
    //                    else
    //                    if (status_ != "200" && status_ != "204")
    //                    {
    //                        var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
    //                        throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
    //                    }
    
    //                    return new Result((int)response_.StatusCode, headers_); 
    //                }
    //                finally
    //                {
    //                    if (response_ != null)
    //                        response_.Dispose();
    //                }
    //            }
    //        }
    //        finally
    //        {
    //        }
    //    }
    
    //    protected struct ObjectResponseResult<T>
    //    {
    //        public ObjectResponseResult(T responseObject, string responseText)
    //        {
    //            this.Object = responseObject;
    //            this.Text = responseText;
    //        }
    
    //        public T Object { get; }
    
    //        public string Text { get; }
    //    }
    
    //    public bool ReadResponseAsString { get; set; }
        
    //    protected virtual async Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers)
    //    {
    //        if (response == null || response.Content == null)
    //        {
    //            return new ObjectResponseResult<T>(default(T), string.Empty);
    //        }
        
    //        if (ReadResponseAsString)
    //        {
    //            var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
    //            try
    //            {
    //                var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
    //                return new ObjectResponseResult<T>(typedBody, responseText);
    //            }
    //            catch (Newtonsoft.Json.JsonException exception)
    //            {
    //                var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
    //                throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
    //            }
    //        }
    //        else
    //        {
    //            try
    //            {
    //                using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
    //                using (var streamReader = new System.IO.StreamReader(responseStream))
    //                using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
    //                {
    //                    var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
    //                    var typedBody = serializer.Deserialize<T>(jsonTextReader);
    //                    return new ObjectResponseResult<T>(typedBody, string.Empty);
    //                }
    //            }
    //            catch (Newtonsoft.Json.JsonException exception)
    //            {
    //                var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
    //                throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
    //            }
    //        }
    //    }
    
    //    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    //    {
    //        if (value is System.Enum)
    //        {
    //            string name = System.Enum.GetName(value.GetType(), value);
    //            if (name != null)
    //            {
    //                var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
    //                if (field != null)
    //                {
    //                    var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
    //                        as System.Runtime.Serialization.EnumMemberAttribute;
    //                    if (attribute != null)
    //                    {
    //                        return attribute.Value != null ? attribute.Value : name;
    //                    }
    //                }
    //            }
    //        }
    //        else if (value is bool) {
    //            return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
    //        }
    //        else if (value is byte[])
    //        {
    //            return System.Convert.ToBase64String((byte[]) value);
    //        }
    //        else if (value != null && value.GetType().IsArray)
    //        {
    //            var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
    //            return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
    //        }
        
    //        return System.Convert.ToString(value, cultureInfo);
    //    }
    //}

    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class SignInVm 
    //{
    //    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Email { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Password { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Username { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static SignInVm FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<SignInVm>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class SignUpVm 
    //{
    //    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Email { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required]
    //    [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 4)]
    //    public string Password { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("confirmPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ConfirmPassword { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string UserName { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static SignUpVm FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<SignUpVm>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ResetPasswordViewModel 
    //{
    //    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Email { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required]
    //    [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 6)]
    //    public string Password { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("confirmPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ConfirmPassword { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Code { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ResetPasswordViewModel FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ResetPasswordViewModel>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ForgotPasswordViewModel 
    //{
    //    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    public string Email { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ForgotPasswordViewModel FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ForgotPasswordViewModel>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class CategoryDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Name { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Slug { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("displayOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? DisplayOrder { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("childrens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<CategoryDto> Childrens { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public CategoryDto Parent { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Description { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("thumbnailImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ThumbnailImageUrl { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static CategoryDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<CategoryDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class Category 
    //{
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Name { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Slug { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("metaTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string MetaTitle { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("metaKeywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string MetaKeywords { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("metaDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string MetaDescription { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Description { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("displayOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? DisplayOrder { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsPublished { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("includeInMenu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IncludeInMenu { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? ParentId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Category Parent { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("childrens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<Category> Childrens { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("thumbnailImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ThumbnailImageUrl { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static Category FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<Category>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class CheckoutOrderVm 
    //{
    //    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public AddressVm Address { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("deliveryCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? DeliveryCost { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? Discount { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductDto> Items { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string PaymentMethod { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("totalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? TotalPrice { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("shippingFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? ShippingFee { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static CheckoutOrderVm FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<CheckoutOrderVm>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class AddressVm 
    //{
    //    [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string City { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("cpf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Cpf { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Complement { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("firstAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string FirstAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string PhoneNumber { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string PostalCode { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("secondAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string SecondAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string State { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Street { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("whoReceives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string WhoReceives { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Number { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static AddressVm FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<AddressVm>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ProductName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Slug { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("quantityPerUnity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? QuantityPerUnity { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string UnitSize { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? UnitPrice { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? Discount { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? UnitWeight { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitsInStock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? UnitsInStock { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitsOnOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? UnitsOnOrder { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Price { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("oldPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string OldPrice { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("thumbnailImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ThumbnailImage { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public CategoryDto Category { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public BrandDto Brand { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("vendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public VendorDto Vendor { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("medias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<MediaDto> Medias { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class BrandDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Name { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Slug { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Website { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static BrandDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class VendorDto 
    //{
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static VendorDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<VendorDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class MediaDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Filename { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static MediaDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<MediaDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class Address 
    //{
    //    [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Street { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("firstAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string FirstAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("secondAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string SecondAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string City { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("district", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string District { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string State { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string PostalCode { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Number { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Complement { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string PhoneNumber { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Country { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("whoReceives", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string WhoReceives { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? OwnerId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static Address FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class CustomerReviewDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Title { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Comment { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Email { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("reviewerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ReviewerName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string UserName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("ratingLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? RatingLevel { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static CustomerReviewDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerReviewDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class StormyCustomer 
    //{
    //    [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string UserId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("cpf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Cpf { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("normalizedEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string NormalizedEmail { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string PhoneNumber { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("phoneNumberConfirmed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? PhoneNumberConfirmed { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("emailConfirmed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? EmailConfirmed { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("customerAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<Address> CustomerAddresses { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("defaultShippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Address DefaultShippingAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("defaultShippingAddressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? DefaultShippingAddressId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("defaultBillingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Address DefaultBillingAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("defaultBillingAddressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? DefaultBillingAddressId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("customerReviewsId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? CustomerReviewsId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("customerReviews", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<Review> CustomerReviews { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("customerWishlistId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? CustomerWishlistId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("customerWishlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Wishlist CustomerWishlist { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string UserName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string FullName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Email { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? CreatedOn { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static StormyCustomer FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<StormyCustomer>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class Review 
    //{
    //    [Newtonsoft.Json.JsonProperty("stormyCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? StormyCustomerId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public StormyCustomer Author { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Title { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Comment { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("reviewerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ReviewerName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("ratingLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? RatingLevel { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ReviewStatus? Status { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static Review FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<Review>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class Wishlist 
    //{
    //    [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? CustomerId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public StormyCustomer Customer { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("wishlistItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<WishlistItem> WishlistItems { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static Wishlist FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<Wishlist>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class WishlistItem 
    //{
    //    [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? ProductId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public StormyProduct Product { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("wishlistId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? WishlistId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("wishlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Wishlist Wishlist { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("addedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? AddedAt { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? Deleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static WishlistItem FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<WishlistItem>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class StormyProduct 
    //{
    //    [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Sku { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Gtin { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("normalizedName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string NormalizedName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ProductName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Slug { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("metaKeywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string MetaKeywords { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("metaDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string MetaDescription { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("metaTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string MetaTitle { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("createdById", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? CreatedById { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("brandId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? BrandId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("mediaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? MediaId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("vendorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? VendorId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? CategoryId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productLinksId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? ProductLinksId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("taxClassId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? TaxClassId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("latestUpdatedById", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? LatestUpdatedById { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("vendor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public StormyVendor Vendor { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Brand Brand { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Category Category { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("typeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string TypeName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ShortDescription { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Description { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("specification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Specification { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("quantityPerUnity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? QuantityPerUnity { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? UnitSize { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? UnitPrice { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? Discount { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? UnitWeight { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitsInStock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? UnitsInStock { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("unitsOnOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? UnitsOnOrder { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("reviewsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? ReviewsCount { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? ProductAvailable { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("discountAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? DiscountAvailable { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("stockTrackingIsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? StockTrackingIsEnabled { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("thumbnailImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ThumbnailImage { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("medias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<Media> Medias { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductLink> Links { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("linkedProductLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductLink> LinkedProductLinks { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductAttribute> ProductAttributes { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("attributeValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductAttributeValue> AttributeValues { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("optionValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductOptionValue> OptionValues { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("ranking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? Ranking { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Note { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Price { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("oldPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string OldPrice { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("specialPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string SpecialPrice { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("specialPriceStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? SpecialPriceStart { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("specialPriceEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? SpecialPriceEnd { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("hasDiscountApplied", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? HasDiscountApplied { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsPublished { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Status { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("notReturnable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? NotReturnable { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("availableForPreorder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? AvailableForPreorder { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("hasOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? HasOptions { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isVisibleIndividually", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsVisibleIndividually { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isFeatured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsFeatured { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isCallForPricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsCallForPricing { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isAllowToOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsAllowToOrder { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? ProductCost { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("preOrderAvailabilityStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? PreOrderAvailabilityStartDate { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("publishedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? PublishedOn { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("createdOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? CreatedOn { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("latestUpdatedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LatestUpdatedOn { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("allowCustomerReview", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? AllowCustomerReview { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("approvedRatingSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? ApprovedRatingSum { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("notApprovedRatingSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? NotApprovedRatingSum { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("approvedTotalReviews", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? ApprovedTotalReviews { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("notApprovedTotalReviews", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? NotApprovedTotalReviews { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("ratingAverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? RatingAverage { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static StormyProduct FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<StormyProduct>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class StormyVendor 
    //{
    //    [Newtonsoft.Json.JsonProperty("companyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string CompanyName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("contactTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ContactTitle { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? AddressId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Address Address { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Phone { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Email { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("webSite", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string WebSite { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("typeGoods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string TypeGoods { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("sizeUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string SizeUrl { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Logo { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Note { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static StormyVendor FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<StormyVendor>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class Brand 
    //{
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Name { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Slug { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Description { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("website", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Website { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("logoImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string LogoImage { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static Brand FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<Brand>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class Media 
    //{
    //    [Newtonsoft.Json.JsonProperty("caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Caption { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("fileSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? FileSize { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string FileName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public MediaType? MediaType { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("seoFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string SeoFileName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static Media FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<Media>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductLink 
    //{
    //    [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? ProductId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public StormyProduct Product { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("linkedProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? LinkedProductId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("linkedProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public StormyProduct LinkedProduct { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("linkType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ProductLinkLinkType? LinkType { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductLink FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductLink>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductAttribute 
    //{
    //    [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? GroupId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ProductAttributeGroup Group { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Name { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productTemplates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductTemplateProductAttribute> ProductTemplates { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductAttribute FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductAttribute>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductAttributeValue 
    //{
    //    [Newtonsoft.Json.JsonProperty("attributeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? AttributeId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ProductAttribute Attribute { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? ProductId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public StormyProduct Product { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Value { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductAttributeValue FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductAttributeValue>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductOptionValue 
    //{
    //    [Newtonsoft.Json.JsonProperty("optionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? OptionId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("option", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ProductOption Option { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? ProductId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public StormyProduct Product { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    [System.ComponentModel.DataAnnotations.StringLength(450)]
    //    public string Value { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("displayType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    [System.ComponentModel.DataAnnotations.StringLength(450)]
    //    public string DisplayType { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("sortIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? SortIndex { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductOptionValue FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductOptionValue>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductAttributeGroup 
    //{
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    [System.ComponentModel.DataAnnotations.StringLength(450)]
    //    public string Name { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductAttribute> Attributes { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductAttributeGroup FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductAttributeGroup>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductTemplateProductAttribute 
    //{
    //    [Newtonsoft.Json.JsonProperty("productTemplateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? ProductTemplateId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ProductTemplate ProductTemplate { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productAttributeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? ProductAttributeId { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productAttribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ProductAttribute ProductAttribute { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductTemplateProductAttribute FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductTemplateProductAttribute>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductOption 
    //{
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
    //    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    //    [System.ComponentModel.DataAnnotations.StringLength(450)]
    //    public string Name { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductOption FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductOption>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductTemplate 
    //{
    //    [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Name { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<ProductTemplateProductAttribute> ProductAttributes { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? LastModified { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsDeleted { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductTemplate FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductTemplate>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class CustomerDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string UserName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Email { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("customerAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<Address> CustomerAddresses { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("defaultBillingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Address DefaultBillingAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("defaultShippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Address DefaultShippingAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("cpf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Cpf { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string PhoneNumber { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string FullName { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static CustomerDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class OrderDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("orderUniqueKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.Guid? OrderUniqueKey { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("shippingMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ShippingMethod { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string PaymentMethod { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("trackNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string TrackNumber { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Comment { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("discount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? Discount { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? Tax { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? TotalWeight { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("totalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? TotalPrice { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("deliveryCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public double? DeliveryCost { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("shippingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public Address ShippingAddress { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("orderDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? OrderDate { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("shippedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? ShippedDate { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("deliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? DeliveryDate { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("paymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public System.DateTimeOffset? PaymentDate { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<OrderItemDto> Items { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public OrderDtoStatus? Status { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("shippingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public OrderDtoShippingStatus? ShippingStatus { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isCancelled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsCancelled { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static OrderDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class OrderItemDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ProductName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Price { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int? Quantity { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ProductDto Product { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static OrderItemDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderItemDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public partial class ProductOverviewDto 
    //{
    //    [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public long? Id { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ProductName { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("slug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Slug { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Price { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("oldPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string OldPrice { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("hasDiscountApplied", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? HasDiscountApplied { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("isPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? IsPublished { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("availableForPreorder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public bool? AvailableForPreorder { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("thumbnailImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string ThumbnailImage { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public CategoryDto Category { get; set; }
    
    //    [Newtonsoft.Json.JsonProperty("medias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public ICollection<MediaDto> Medias { get; set; }
    
    //    public string ToJson() 
    //    {
    //        return Newtonsoft.Json.JsonConvert.SerializeObject(this);
    //    }
    
    //    public static ProductOverviewDto FromJson(string data)
    //    {
    //        return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductOverviewDto>(data);
    //    }
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public enum ReviewStatus
    //{
    //    _1 = 1,
    
    //    _5 = 5,
    
    //    _8 = 8,
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public enum MediaType
    //{
    //    _1 = 1,
    
    //    _5 = 5,
    
    //    _10 = 10,
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public enum ProductLinkLinkType
    //{
    //    _1 = 1,
    
    //    _2 = 2,
    
    //    _3 = 3,
    
    //    _4 = 4,
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public enum OrderDtoStatus
    //{
    //    _1 = 1,
    
    //    _10 = 10,
    
    //    _20 = 20,
    
    //    _30 = 30,
    
    //    _35 = 35,
    
    //    _40 = 40,
    
    //    _50 = 50,
    
    //    _60 = 60,
    
    //    _70 = 70,
    
    //    _80 = 80,
    
    //    _90 = 90,
    
    //    _100 = 100,
    
    //}
    
    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.23.0 (Newtonsoft.Json v11.0.0.0)")]
    //public enum OrderDtoShippingStatus
    //{
    //    _1 = 1,
    
    //    _5 = 5,
    
    //    _10 = 10,
    
    //    _15 = 15,
    
    //    _20 = 20,
    
    //}

    //[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    //public partial class ApiException : System.Exception
    //{
    //    public int StatusCode { get; private set; }

    //    public string Response { get; private set; }

    //    public IReadOnlyDictionary<string, IEnumerable<string>> Headers { get; private set; }

    //    public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, System.Exception innerException) 
    //        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
    //    {
    //        StatusCode = statusCode;
    //        Response = response; 
    //        Headers = headers;
    //    }

    //    public override string ToString()
    //    {
    //        return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    //    }
    //}

    //[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0))")]
    //public partial class ApiException<TResult> : ApiException
    //{
    //    public TResult Result { get; private set; }

    //    public ApiException(string message, int statusCode, string response, IReadOnlyDictionary<string, IEnumerable<string>> headers, TResult result, System.Exception innerException) 
    //        : base(message, statusCode, response, headers, innerException)
    //    {
    //        Result = result;
    //    }
    //}

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
