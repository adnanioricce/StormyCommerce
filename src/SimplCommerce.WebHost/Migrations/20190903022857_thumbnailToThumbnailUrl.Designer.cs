// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StormyCommerce.Infraestructure.Data;

namespace SimplCommerce.WebHost.Migrations
{
    [DbContext(typeof(StormyDbContext))]
    [Migration("20190903022857_thumbnailToThumbnailUrl")]
    partial class thumbnailToThumbnailUrl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInMenu");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("ParentId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ThumbnailImageUrl");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("LogoImage");

                    b.Property<string>("Name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.Property<long?>("StormyProductId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeGroup");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AttributeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("ProductId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductLink", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("LinkType");

                    b.Property<long>("LinkedProductId");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("LinkedProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLink");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 10, 17, 11, 47, 366, DateTimeKind.Unspecified).AddTicks(7657), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 21L,
                            ProductId = 46L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 15, 22, 3, 26, 255, DateTimeKind.Unspecified).AddTicks(6594), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 34L,
                            ProductId = 42L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 13, 15, 31, 22, 528, DateTimeKind.Unspecified).AddTicks(6544), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 34L,
                            ProductId = 14L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 29, 4, 26, 10, 716, DateTimeKind.Unspecified).AddTicks(2758), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 45L,
                            ProductId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 14, 2, 25, 52, 996, DateTimeKind.Unspecified).AddTicks(6243), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 39L,
                            ProductId = 27L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 20, 14, 38, 6, 444, DateTimeKind.Unspecified).AddTicks(4501), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 41L,
                            ProductId = 29L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 27, 2, 23, 44, 280, DateTimeKind.Unspecified).AddTicks(3304), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 38L,
                            ProductId = 22L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 2, 1, 9, 25, 713, DateTimeKind.Unspecified).AddTicks(4067), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 8L,
                            ProductId = 34L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 19, 9, 39, 55, 315, DateTimeKind.Unspecified).AddTicks(2619), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 24L,
                            ProductId = 34L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 25, 3, 50, 23, 707, DateTimeKind.Unspecified).AddTicks(7431), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 5L,
                            ProductId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 13, 10, 38, 22, 478, DateTimeKind.Unspecified).AddTicks(1820), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 14L,
                            ProductId = 22L
                        },
                        new
                        {
                            Id = 12L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 15, 5, 14, 58, 684, DateTimeKind.Unspecified).AddTicks(471), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 25L,
                            ProductId = 40L
                        },
                        new
                        {
                            Id = 13L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 26, 7, 57, 58, 323, DateTimeKind.Unspecified).AddTicks(5462), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 7L,
                            ProductId = 46L
                        },
                        new
                        {
                            Id = 14L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 17, 8, 38, 21, 956, DateTimeKind.Unspecified).AddTicks(4718), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 16L,
                            ProductId = 12L
                        },
                        new
                        {
                            Id = 15L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 24, 18, 2, 22, 448, DateTimeKind.Unspecified).AddTicks(6976), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 10L,
                            ProductId = 38L
                        },
                        new
                        {
                            Id = 16L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 31, 7, 32, 12, 455, DateTimeKind.Unspecified).AddTicks(4562), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 6L,
                            ProductId = 29L
                        },
                        new
                        {
                            Id = 17L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 28, 19, 41, 53, 470, DateTimeKind.Unspecified).AddTicks(9161), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 26L,
                            ProductId = 24L
                        },
                        new
                        {
                            Id = 18L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 28, 3, 31, 40, 468, DateTimeKind.Unspecified).AddTicks(3966), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 33L,
                            ProductId = 48L
                        },
                        new
                        {
                            Id = 19L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 15, 9, 9, 32, 534, DateTimeKind.Unspecified).AddTicks(5134), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 45L,
                            ProductId = 13L
                        },
                        new
                        {
                            Id = 20L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 27, 19, 48, 32, 38, DateTimeKind.Unspecified).AddTicks(3472), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 7L,
                            ProductId = 11L
                        },
                        new
                        {
                            Id = 21L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 29, 18, 31, 0, 601, DateTimeKind.Unspecified).AddTicks(3368), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 24L,
                            ProductId = 30L
                        },
                        new
                        {
                            Id = 22L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 29, 19, 33, 3, 363, DateTimeKind.Unspecified).AddTicks(2855), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 19L,
                            ProductId = 32L
                        },
                        new
                        {
                            Id = 23L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 19, 11, 30, 31, 87, DateTimeKind.Unspecified).AddTicks(6), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 3L,
                            ProductId = 15L
                        },
                        new
                        {
                            Id = 24L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 15, 15, 53, 43, 859, DateTimeKind.Unspecified).AddTicks(4540), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 12L,
                            ProductId = 34L
                        },
                        new
                        {
                            Id = 25L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 17, 6, 40, 45, 248, DateTimeKind.Unspecified).AddTicks(6581), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 31L,
                            ProductId = 23L
                        },
                        new
                        {
                            Id = 26L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 28, 20, 24, 58, 647, DateTimeKind.Unspecified).AddTicks(326), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 34L,
                            ProductId = 49L
                        },
                        new
                        {
                            Id = 27L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 10, 20, 40, 30, 384, DateTimeKind.Unspecified).AddTicks(9315), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 24L,
                            ProductId = 18L
                        },
                        new
                        {
                            Id = 28L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 31, 10, 23, 53, 50, DateTimeKind.Unspecified).AddTicks(4087), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 8L,
                            ProductId = 30L
                        },
                        new
                        {
                            Id = 29L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 17, 22, 55, 54, 261, DateTimeKind.Unspecified).AddTicks(4565), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 30L,
                            ProductId = 31L
                        },
                        new
                        {
                            Id = 30L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 22, 4, 54, 10, 255, DateTimeKind.Unspecified).AddTicks(7975), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 1L,
                            ProductId = 30L
                        },
                        new
                        {
                            Id = 31L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 20, 10, 10, 49, 613, DateTimeKind.Unspecified).AddTicks(3876), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 3L,
                            ProductId = 50L
                        },
                        new
                        {
                            Id = 32L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 16, 15, 38, 4, 504, DateTimeKind.Unspecified).AddTicks(4047), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 25L,
                            ProductId = 43L
                        },
                        new
                        {
                            Id = 33L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 17, 15, 29, 15, 348, DateTimeKind.Unspecified).AddTicks(2754), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 11L,
                            ProductId = 41L
                        },
                        new
                        {
                            Id = 34L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 23, 28, 16, 614, DateTimeKind.Unspecified).AddTicks(2042), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 27L,
                            ProductId = 4L
                        },
                        new
                        {
                            Id = 35L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 26, 18, 54, 57, 465, DateTimeKind.Unspecified).AddTicks(888), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 24L,
                            ProductId = 14L
                        },
                        new
                        {
                            Id = 36L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 13, 21, 26, 11, 885, DateTimeKind.Unspecified).AddTicks(2383), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 29L,
                            ProductId = 3L
                        },
                        new
                        {
                            Id = 37L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 21, 14, 21, 29, 919, DateTimeKind.Unspecified).AddTicks(2003), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 27L,
                            ProductId = 12L
                        },
                        new
                        {
                            Id = 38L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 26, 20, 52, 11, 207, DateTimeKind.Unspecified).AddTicks(8792), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 17L,
                            ProductId = 34L
                        },
                        new
                        {
                            Id = 39L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 12, 7, 31, 52, 180, DateTimeKind.Unspecified).AddTicks(7699), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 4L,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 40L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 2, 23, 7, 29, 41, DateTimeKind.Unspecified).AddTicks(3873), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 27L,
                            ProductId = 40L
                        },
                        new
                        {
                            Id = 41L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 2, 21, 42, 39, 855, DateTimeKind.Unspecified).AddTicks(5540), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 6L,
                            ProductId = 2L
                        },
                        new
                        {
                            Id = 42L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 16, 19, 45, 46, 854, DateTimeKind.Unspecified).AddTicks(9285), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 10L,
                            ProductId = 9L
                        },
                        new
                        {
                            Id = 43L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 17, 7, 33, 29, 105, DateTimeKind.Unspecified).AddTicks(203), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 49L,
                            ProductId = 6L
                        },
                        new
                        {
                            Id = 44L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 18, 15, 15, 7, 588, DateTimeKind.Unspecified).AddTicks(9966), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 28L,
                            ProductId = 24L
                        },
                        new
                        {
                            Id = 45L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 6, 46, 30, 899, DateTimeKind.Unspecified).AddTicks(1888), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 41L,
                            ProductId = 48L
                        },
                        new
                        {
                            Id = 46L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 27, 4, 30, 41, 419, DateTimeKind.Unspecified).AddTicks(7945), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 41L,
                            ProductId = 34L
                        },
                        new
                        {
                            Id = 47L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 26, 10, 49, 7, 492, DateTimeKind.Unspecified).AddTicks(4651), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 42L,
                            ProductId = 2L
                        },
                        new
                        {
                            Id = 48L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 19, 17, 7, 39, 454, DateTimeKind.Unspecified).AddTicks(5424), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 49L,
                            ProductId = 24L
                        },
                        new
                        {
                            Id = 49L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 24, 17, 22, 45, 809, DateTimeKind.Unspecified).AddTicks(1149), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 13L,
                            ProductId = 37L
                        },
                        new
                        {
                            Id = 50L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 25, 13, 51, 38, 876, DateTimeKind.Unspecified).AddTicks(3295), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 42L,
                            ProductId = 22L
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ProductOption");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayType")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("OptionId");

                    b.Property<long>("ProductId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionValue");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplateProductAttribute", b =>
                {
                    b.Property<long>("ProductTemplateId");

                    b.Property<long>("ProductAttributeId");

                    b.HasKey("ProductTemplateId", "ProductAttributeId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductTemplateProductAttribute");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCustomerReview");

                    b.Property<int>("ApprovedRatingSum");

                    b.Property<int>("ApprovedTotalReviews");

                    b.Property<bool>("AvailableForPreorder");

                    b.Property<long>("BrandId");

                    b.Property<long>("CategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("DiscountAvailable");

                    b.Property<bool>("HasDiscountApplied");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("MediaId");

                    b.Property<int>("NotApprovedRatingSum");

                    b.Property<int>("NotApprovedTotalReviews");

                    b.Property<bool>("NotReturnable");

                    b.Property<string>("Note");

                    b.Property<string>("OldPrice");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDate");

                    b.Property<string>("Price");

                    b.Property<bool>("ProductAvailable");

                    b.Property<decimal>("ProductCost");

                    b.Property<long>("ProductLinksId");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<int>("QuantityPerUnity");

                    b.Property<int>("Ranking");

                    b.Property<string>("SKU")
                        .IsRequired();

                    b.Property<string>("Slug");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<bool>("StockTrackingIsEnabled");

                    b.Property<string>("ThumbnailImage");

                    b.Property<string>("TypeName")
                        .IsRequired();

                    b.Property<decimal>("UnitPrice");

                    b.Property<decimal>("UnitSize");

                    b.Property<double>("UnitWeight");

                    b.Property<int>("UnitsInStock");

                    b.Property<int>("UnitsOnOrder");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<long>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("VendorId");

                    b.ToTable("StormyProduct");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Common.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Complement");

                    b.Property<string>("Country");

                    b.Property<string>("FirstAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Number");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode");

                    b.Property<string>("SecondAddress");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Vila Alessandro",
                            FirstAddress = "Souza Ponte",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 2, 28, 56, 750, DateTimeKind.Unspecified).AddTicks(2398), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "69225",
                            PhoneNumber = "+55 (69) 1743-9201",
                            PostalCode = "40157",
                            SecondAddress = "Apto. 016",
                            State = "Acre",
                            Street = "1555 Batista Marginal"
                        },
                        new
                        {
                            Id = 2L,
                            City = "Carvalhodo Descoberto",
                            FirstAddress = "Deneval Viela",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 2, 28, 56, 774, DateTimeKind.Unspecified).AddTicks(3137), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "239",
                            PhoneNumber = "(29) 6328-2459",
                            PostalCode = "90633",
                            SecondAddress = "Apto. 765",
                            State = "Rio de Janeiro",
                            Street = "49012 Albuquerque Rodovia"
                        },
                        new
                        {
                            Id = 3L,
                            City = "Saraivado Sul",
                            FirstAddress = "Barros Rodovia",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 2, 28, 56, 774, DateTimeKind.Unspecified).AddTicks(3998), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "05336",
                            PhoneNumber = "(35) 65251-6113",
                            PostalCode = "26119-786",
                            SecondAddress = "Lote 76",
                            State = "Alagoas",
                            Street = "729 Ígor Ponte"
                        },
                        new
                        {
                            Id = 4L,
                            City = "Xavierde Nossa Senhora",
                            FirstAddress = "Kléber Viela",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 2, 28, 56, 774, DateTimeKind.Unspecified).AddTicks(4379), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "865",
                            PhoneNumber = "(56) 2363-7715",
                            PostalCode = "15703",
                            SecondAddress = "Sobrado 49",
                            State = "Minas Gerais",
                            Street = "2266 Braga Rodovia"
                        },
                        new
                        {
                            Id = 5L,
                            City = "Nogueirado Descoberto",
                            FirstAddress = "Xavier Avenida",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 2, 28, 56, 774, DateTimeKind.Unspecified).AddTicks(4750), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "401",
                            PhoneNumber = "(09) 9766-4931",
                            PostalCode = "74909-059",
                            SecondAddress = "Casa 9",
                            State = "Alagoas",
                            Street = "743 Carvalho Rodovia"
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.StormyCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPF")
                        .HasMaxLength(11);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long?>("DefaultBillingAddressId");

                    b.Property<long?>("DefaultShippingAddressId");

                    b.Property<string>("Email");

                    b.Property<string>("FullName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("DefaultBillingAddressId");

                    b.HasIndex("DefaultShippingAddressId");

                    b.ToTable("StormyCustomer");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.EntityType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("AreaName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMenuable");

                    b.Property<string>("RoutingAction")
                        .HasMaxLength(450);

                    b.Property<string>("RoutingController")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.Media", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Caption");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("MediaType");

                    b.Property<string>("SeoFileName");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Order.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Price");

                    b.Property<string>("ProductName");

                    b.Property<int>("Quantity");

                    b.Property<long>("StormyOrderId");

                    b.Property<long>("StormyProductId");

                    b.HasKey("Id");

                    b.HasIndex("StormyOrderId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Payments.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("FailureMessage");

                    b.Property<string>("GatewayTransactionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<decimal>("PaymentFee");

                    b.Property<string>("PaymentMethod");

                    b.Property<int>("PaymentStatus");

                    b.Property<long>("StormyOrderId");

                    b.HasKey("Id");

                    b.HasIndex("StormyOrderId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Settings.AppSettings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsVisibleInCommonSettingPage");

                    b.Property<string>("Module")
                        .HasMaxLength(450);

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal>("DeliveryCost");

                    b.Property<DateTime?>("DeliveryDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("ShippedDate");

                    b.Property<long?>("StormyOrderId");

                    b.Property<decimal>("TotalWeight");

                    b.Property<string>("TrackNumber");

                    b.HasKey("Id");

                    b.HasIndex("StormyOrderId");

                    b.ToTable("Shipment");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            Comment = "a single comment",
                            CreatedOn = new DateTime(2019, 9, 3, 2, 28, 56, 518, DateTimeKind.Utc).AddTicks(1414),
                            DeliveryCost = 22.29m,
                            DeliveryDate = new DateTime(2019, 9, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 2, 28, 56, 518, DateTimeKind.Unspecified).AddTicks(1004), new TimeSpan(0, 0, 0, 0, 0)),
                            Price = 20.99m,
                            ShippedDate = new DateTime(2019, 9, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            TotalWeight = 0.400m,
                            TrackNumber = "d5b9c21e-ce44-4f18-9324-913112c6da5e"
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.StormyOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<long>("CustomerId");

                    b.Property<decimal>("DeliveryCost");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("OrderDate");

                    b.Property<Guid>("OrderUniqueKey");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<long>("PaymentId");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("PickUpInStore");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<DateTime>("ShippedDate");

                    b.Property<long?>("ShippingAddressId");

                    b.Property<string>("ShippingMethod");

                    b.Property<int>("ShippingStatus");

                    b.Property<int>("Status");

                    b.Property<decimal>("Tax");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("TotalWeight");

                    b.Property<string>("TrackNumber");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("StormyOrder");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.StormyVendor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<long?>("AddressId1");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactTitle");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Logo");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.Property<string>("SizeUrl");

                    b.Property<string>("TypeGoods");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("AddressId1");

                    b.ToTable("StormyVendor");
                });

            modelBuilder.Entity("StormyCommerce.Infraestructure.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Category", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Category", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeGroup", "Group")
                        .WithMany("Attributes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("StormyProductId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeValue", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductLink", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("Links")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "LinkedProduct")
                        .WithMany("LinkedProductLinks")
                        .HasForeignKey("LinkedProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionValue", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("OptionValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplateProductAttribute", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", "ProductTemplate")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Category", "Category")
                        .WithOne()
                        .HasForeignKey("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Vendor.StormyVendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.StormyCustomer", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "DefaultBillingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultBillingAddressId");

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "DefaultShippingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultShippingAddressId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Entity", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.Media", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("Medias")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Order.OrderItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder", "Order")
                        .WithMany("Items")
                        .HasForeignKey("StormyOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("StormyProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Payments.Payment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("StormyCommerce.Core.Entities.Payments.Payment", "StormyOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder")
                        .WithMany("Shipments")
                        .HasForeignKey("StormyOrderId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.StormyOrder", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.StormyVendor", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId1");
                });
#pragma warning restore 612, 618
        }
    }
}
