// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StormyCommerce.Infraestructure.Data;

namespace SimplCommerce.WebHost.Migrations
{
    [DbContext(typeof(StormyDbContext))]
    [Migration("20191203194245_AddingCustomerToWishlistRelation")]
    partial class AddingCustomerToWishlistRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ChildrenId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInMenu");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("ParentId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ThumbnailImageUrl");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("LogoImage");

                    b.Property<string>("Name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeGroup");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AttributeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("ProductId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CategoryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("LinkType");

                    b.Property<long>("LinkedProductId");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("LinkedProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLink");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ProductOption");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionCombination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("OptionId");

                    b.Property<long>("ProductId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionCombination");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayType")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("OptionId");

                    b.Property<long>("ProductId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionValue");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.Property<long>("StormyProductId");

                    b.HasKey("Id");

                    b.HasIndex("StormyProductId");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplateProductAttribute", b =>
                {
                    b.Property<long>("ProductTemplateId");

                    b.Property<long>("ProductAttributeId");

                    b.HasKey("ProductTemplateId", "ProductAttributeId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductTemplateProductAttribute");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvailableSizes");

                    b.Property<long>("BrandId");

                    b.Property<long>("CategoryId");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<double?>("Diameter");

                    b.Property<decimal>("Discount");

                    b.Property<double>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<double>("Length");

                    b.Property<long?>("MediaId");

                    b.Property<string>("Note");

                    b.Property<decimal>("ProductCost");

                    b.Property<long?>("ProductLinksId");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<DateTime?>("PublishedOn");

                    b.Property<int>("QuantityPerUnity");

                    b.Property<int>("RatingAverage");

                    b.Property<string>("SKU")
                        .IsRequired();

                    b.Property<string>("ShortDescription");

                    b.Property<string>("Slug");

                    b.Property<long?>("StockId");

                    b.Property<string>("ThumbnailImage");

                    b.Property<decimal>("UnitPrice");

                    b.Property<double>("UnitWeight");

                    b.Property<int>("UnitsInStock");

                    b.Property<int>("UnitsOnOrder");

                    b.Property<long>("VendorId");

                    b.Property<double>("Width");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("StockId");

                    b.HasIndex("VendorId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("ProductId");

                    b.Property<string>("StormyCustomerId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StormyCustomerId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.CustomerAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Complement");

                    b.Property<string>("Country");

                    b.Property<string>("District");

                    b.Property<string>("FirstAddress");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Number");

                    b.Property<string>("PostalCode");

                    b.Property<string>("SecondAddress");

                    b.Property<string>("State");

                    b.Property<string>("StormyCustomerId");

                    b.Property<string>("StormyCustomerId1");

                    b.Property<string>("Street");

                    b.Property<int>("Type");

                    b.Property<string>("WhoReceives");

                    b.HasKey("Id");

                    b.HasIndex("StormyCustomerId");

                    b.HasIndex("StormyCustomerId1");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.StormyCustomer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CPF")
                        .HasMaxLength(11);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long?>("CustomerReviewsId");

                    b.Property<DateTimeOffset?>("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(450);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RefreshTokenHash");

                    b.Property<string>("RoleId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.Wishlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("StormyCustomerId");

                    b.HasKey("Id");

                    b.HasIndex("StormyCustomerId")
                        .IsUnique();

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.WishlistItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("ProductId");

                    b.Property<long>("WishlistId");

                    b.Property<long?>("WishlistId1");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishlistId");

                    b.HasIndex("WishlistId1");

                    b.ToTable("WishlistItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.EntityType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("AreaName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMenuable");

                    b.Property<string>("RoutingAction")
                        .HasMaxLength(450);

                    b.Property<string>("RoutingController")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<string>("FileName");

                    b.Property<long>("FileSize");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("MediaType");

                    b.Property<string>("SeoFileName");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.ProductMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("MediaId");

                    b.Property<long?>("StormyProductId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Order.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<decimal>("Price");

                    b.Property<int>("Quantity");

                    b.Property<long?>("ShipmentId");

                    b.Property<long>("StormyOrderId");

                    b.Property<long>("StormyProductId");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("StormyOrderId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Payments.StormyPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("BoletoBarcode");

                    b.Property<string>("BoletoUrl");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("FailureMessage");

                    b.Property<string>("GatewayTransactionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<DateTimeOffset?>("PaidOutAt");

                    b.Property<decimal>("PaymentFee");

                    b.Property<int>("PaymentMethod");

                    b.Property<int>("PaymentStatus");

                    b.Property<long>("StormyOrderId");

                    b.HasKey("Id");

                    b.HasIndex("StormyOrderId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("RatingLevel");

                    b.Property<string>("ReviewerName");

                    b.Property<int>("Status");

                    b.Property<string>("StormyCustomerId")
                        .IsRequired();

                    b.Property<long>("StormyProductId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("StormyCustomerId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Settings.AppSettings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsVisibleInCommonSettingPage");

                    b.Property<string>("Module");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("config_appsettings");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipping.StormyShipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<double>("CubeRoot");

                    b.Property<decimal>("DeliveryCost");

                    b.Property<DateTimeOffset?>("DeliveryDate");

                    b.Property<long>("DestinationAddressId");

                    b.Property<DateTimeOffset?>("ExpectedDeliveryDate");

                    b.Property<DateTimeOffset?>("ExpectedHourOfDay");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<decimal>("SafeAmount");

                    b.Property<int>("ShipmentMethod");

                    b.Property<string>("ShipmentProvider");

                    b.Property<DateTimeOffset?>("ShippedDate");

                    b.Property<int>("Status");

                    b.Property<long>("StormyOrderId");

                    b.Property<double>("TotalArea");

                    b.Property<double>("TotalHeight");

                    b.Property<double>("TotalLength");

                    b.Property<double>("TotalWeight");

                    b.Property<double>("TotalWidth");

                    b.Property<string>("TrackNumber")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("DestinationAddressId")
                        .IsUnique();

                    b.HasIndex("StormyOrderId")
                        .IsUnique();

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.StormyOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("OrderDate");

                    b.Property<Guid>("OrderUniqueKey");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<long>("PaymentId");

                    b.Property<bool>("PickUpInStore");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<long?>("ShipmentId");

                    b.Property<int>("Status");

                    b.Property<long?>("StockId");

                    b.Property<string>("StormyCustomerId");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.HasIndex("StormyCustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.StormyVendor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactTitle");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Logo");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.Property<long>("ProductId");

                    b.Property<string>("SizeUrl");

                    b.Property<string>("TypeGoods");

                    b.Property<long>("VendorAddressId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("VendorAddressId")
                        .IsUnique();

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.VendorAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("WhoReceives");

                    b.HasKey("Id");

                    b.ToTable("VendorAddress");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeGroup", "Group")
                        .WithMany("Attributes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeValue", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductCategory", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductLink", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "LinkedProduct")
                        .WithMany()
                        .HasForeignKey("LinkedProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("Links")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionCombination", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionValue", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("OptionValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("StormyProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplateProductAttribute", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", "ProductTemplate")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Stock")
                        .WithMany("Products")
                        .HasForeignKey("StockId");

                    b.HasOne("StormyCommerce.Core.Entities.Vendor.StormyVendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.Comment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("StormyCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.CustomerAddress", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Owner")
                        .WithMany()
                        .HasForeignKey("StormyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer")
                        .WithMany("Addresses")
                        .HasForeignKey("StormyCustomerId1");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.StormyCustomer", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.Wishlist", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Customer")
                        .WithOne("CustomerWishlist")
                        .HasForeignKey("StormyCommerce.Core.Entities.Customer.Wishlist", "StormyCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.WishlistItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Customer.Wishlist", "Wishlist")
                        .WithMany()
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Customer.Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId1");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Entity", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.ProductMedia", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Media.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("Medias")
                        .HasForeignKey("StormyProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Order.OrderItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Shipping.StormyShipment", "Shipment")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentId");

                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder", "Order")
                        .WithMany("Items")
                        .HasForeignKey("StormyOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("StormyProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Payments.StormyPayment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder")
                        .WithOne("Payment")
                        .HasForeignKey("StormyCommerce.Core.Entities.Payments.StormyPayment", "StormyOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Review", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Author")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("StormyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("StormyProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipping.StormyShipment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.CustomerAddress", "DestinationAddress")
                        .WithOne()
                        .HasForeignKey("StormyCommerce.Core.Entities.Shipping.StormyShipment", "DestinationAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("StormyCommerce.Core.Entities.Shipping.StormyShipment", "StormyOrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.StormyOrder", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Stock")
                        .WithMany("Orders")
                        .HasForeignKey("StockId");

                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("StormyCustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.StormyVendor", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Vendor.VendorAddress", "Address")
                        .WithOne("Owner")
                        .HasForeignKey("StormyCommerce.Core.Entities.Vendor.StormyVendor", "VendorAddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.VendorAddress", b =>
                {
                    b.OwnsOne("StormyCommerce.Core.Entities.Common.Address", "Address", b1 =>
                        {
                            b1.Property<long>("VendorAddressId");

                            b1.Property<string>("City");

                            b1.Property<string>("Complement");

                            b1.Property<string>("Country");

                            b1.Property<string>("District");

                            b1.Property<string>("FirstAddress");

                            b1.Property<string>("Number");

                            b1.Property<string>("PostalCode");

                            b1.Property<string>("SecondAddress");

                            b1.Property<string>("State");

                            b1.Property<string>("Street");

                            b1.HasKey("VendorAddressId");

                            b1.ToTable("VendorAddress");

                            b1.HasOne("StormyCommerce.Core.Entities.Vendor.VendorAddress")
                                .WithOne("Address")
                                .HasForeignKey("StormyCommerce.Core.Entities.Common.Address", "VendorAddressId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
