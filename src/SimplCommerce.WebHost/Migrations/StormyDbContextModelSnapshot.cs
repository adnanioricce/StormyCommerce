// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StormyCommerce.Infraestructure.Data;

namespace SimplCommerce.WebHost.Migrations
{
    [DbContext(typeof(StormyDbContext))]
    partial class StormyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInMenu");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("ParentId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ThumbnailImageUrl");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("LogoImage");

                    b.Property<string>("Name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.Property<long?>("StormyProductId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeGroup");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AttributeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("ProductId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductLink", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("LinkType");

                    b.Property<long>("LinkedProductId");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("LinkedProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLink");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 5, 8, 6, 46, 318, DateTimeKind.Unspecified).AddTicks(5035), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 49L,
                            ProductId = 43L
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 15, 14, 54, 9, 583, DateTimeKind.Unspecified).AddTicks(2114), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 10L,
                            ProductId = 48L
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 4, 49, 14, 663, DateTimeKind.Unspecified).AddTicks(1908), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 49L,
                            ProductId = 20L
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 5, 25, 59, 272, DateTimeKind.Unspecified).AddTicks(5212), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 29L,
                            ProductId = 26L
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 29, 22, 8, 42, 188, DateTimeKind.Unspecified).AddTicks(4306), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 26L,
                            ProductId = 49L
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 25, 19, 22, 7, 38, DateTimeKind.Unspecified).AddTicks(9822), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 9L,
                            ProductId = 12L
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 5, 8, 14, 37, 774, DateTimeKind.Unspecified).AddTicks(5222), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 9L,
                            ProductId = 21L
                        },
                        new
                        {
                            Id = 8L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 6, 9, 40, 43, 247, DateTimeKind.Unspecified).AddTicks(5360), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 37L,
                            ProductId = 28L
                        },
                        new
                        {
                            Id = 9L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 17, 21, 39, 22, 743, DateTimeKind.Unspecified).AddTicks(7110), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 11L,
                            ProductId = 44L
                        },
                        new
                        {
                            Id = 10L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 10, 13, 18, 751, DateTimeKind.Unspecified).AddTicks(783), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 46L,
                            ProductId = 41L
                        },
                        new
                        {
                            Id = 11L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 18, 23, 4, 11, 562, DateTimeKind.Unspecified).AddTicks(5467), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 5L,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 12L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 28, 14, 47, 45, 244, DateTimeKind.Unspecified).AddTicks(7180), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 18L,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 13L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 5, 21, 38, 41, 171, DateTimeKind.Unspecified).AddTicks(1062), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 44L,
                            ProductId = 8L
                        },
                        new
                        {
                            Id = 14L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 23, 12, 16, 57, 979, DateTimeKind.Unspecified).AddTicks(7714), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 20L,
                            ProductId = 19L
                        },
                        new
                        {
                            Id = 15L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 1, 23, 57, 1, 522, DateTimeKind.Unspecified).AddTicks(9162), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 50L,
                            ProductId = 44L
                        },
                        new
                        {
                            Id = 16L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 1, 11, 53, 57, 627, DateTimeKind.Unspecified).AddTicks(2560), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 40L,
                            ProductId = 5L
                        },
                        new
                        {
                            Id = 17L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 28, 22, 11, 20, 619, DateTimeKind.Unspecified).AddTicks(3928), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 31L,
                            ProductId = 47L
                        },
                        new
                        {
                            Id = 18L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 4, 4, 54, 34, 766, DateTimeKind.Unspecified).AddTicks(7123), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 17L,
                            ProductId = 13L
                        },
                        new
                        {
                            Id = 19L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 6, 11, 23, 11, 250, DateTimeKind.Unspecified).AddTicks(8377), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 3L,
                            ProductId = 13L
                        },
                        new
                        {
                            Id = 20L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 1, 10, 33, 44, 310, DateTimeKind.Unspecified).AddTicks(9877), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 5L,
                            ProductId = 50L
                        },
                        new
                        {
                            Id = 21L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 6, 9, 33, 8, 49, DateTimeKind.Unspecified).AddTicks(8835), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 1L,
                            ProductId = 3L
                        },
                        new
                        {
                            Id = 22L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 25, 9, 58, 56, 718, DateTimeKind.Unspecified).AddTicks(3731), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 20L,
                            ProductId = 24L
                        },
                        new
                        {
                            Id = 23L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 4, 2, 18, 7, 872, DateTimeKind.Unspecified).AddTicks(3553), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 48L,
                            ProductId = 8L
                        },
                        new
                        {
                            Id = 24L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 23, 2, 18, 47, 759, DateTimeKind.Unspecified).AddTicks(460), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 23L,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 25L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 6, 18, 37, 57, 433, DateTimeKind.Unspecified).AddTicks(588), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 25L,
                            ProductId = 40L
                        },
                        new
                        {
                            Id = 26L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 3, 7, 44, 78, DateTimeKind.Unspecified).AddTicks(8000), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 42L,
                            ProductId = 37L
                        },
                        new
                        {
                            Id = 27L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 23, 1, 40, 43, 824, DateTimeKind.Unspecified).AddTicks(5567), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 30L,
                            ProductId = 21L
                        },
                        new
                        {
                            Id = 28L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 20, 14, 26, 23, 891, DateTimeKind.Unspecified).AddTicks(8754), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 47L,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 29L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 17, 19, 44, 44, 458, DateTimeKind.Unspecified).AddTicks(8140), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 33L,
                            ProductId = 39L
                        },
                        new
                        {
                            Id = 30L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 5, 35, 29, 557, DateTimeKind.Unspecified).AddTicks(6658), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 18L,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 31L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 7, 1, 43, 371, DateTimeKind.Unspecified).AddTicks(8934), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 42L,
                            ProductId = 39L
                        },
                        new
                        {
                            Id = 32L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 4, 10, 27, 2, 471, DateTimeKind.Unspecified).AddTicks(8903), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 28L,
                            ProductId = 19L
                        },
                        new
                        {
                            Id = 33L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 31, 18, 44, 22, 710, DateTimeKind.Unspecified).AddTicks(8970), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 35L,
                            ProductId = 31L
                        },
                        new
                        {
                            Id = 34L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 29, 8, 57, 44, 667, DateTimeKind.Unspecified).AddTicks(8026), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 6L,
                            ProductId = 43L
                        },
                        new
                        {
                            Id = 35L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 16, 3, 17, 35, 677, DateTimeKind.Unspecified).AddTicks(1477), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 39L,
                            ProductId = 9L
                        },
                        new
                        {
                            Id = 36L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 24, 2, 10, 45, 21, DateTimeKind.Unspecified).AddTicks(9364), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 6L,
                            ProductId = 42L
                        },
                        new
                        {
                            Id = 37L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 28, 5, 10, 54, 842, DateTimeKind.Unspecified).AddTicks(883), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 4L,
                            ProductId = 11L
                        },
                        new
                        {
                            Id = 38L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 27, 2, 8, 57, 152, DateTimeKind.Unspecified).AddTicks(2398), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 32L,
                            ProductId = 26L
                        },
                        new
                        {
                            Id = 39L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 25, 10, 32, 24, 515, DateTimeKind.Unspecified).AddTicks(8297), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 17L,
                            ProductId = 4L
                        },
                        new
                        {
                            Id = 40L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 21, 4, 7, 33, 152, DateTimeKind.Unspecified).AddTicks(9596), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 35L,
                            ProductId = 37L
                        },
                        new
                        {
                            Id = 41L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 22, 14, 13, 59, 948, DateTimeKind.Unspecified).AddTicks(2932), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 7L,
                            ProductId = 30L
                        },
                        new
                        {
                            Id = 42L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 18, 21, 37, 17, 280, DateTimeKind.Unspecified).AddTicks(9292), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 31L,
                            ProductId = 32L
                        },
                        new
                        {
                            Id = 43L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 26, 12, 53, 10, 942, DateTimeKind.Unspecified).AddTicks(6932), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 46L,
                            ProductId = 47L
                        },
                        new
                        {
                            Id = 44L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 29, 11, 22, 46, 110, DateTimeKind.Unspecified).AddTicks(2796), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 36L,
                            ProductId = 7L
                        },
                        new
                        {
                            Id = 45L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 5, 10, 33, 30, 682, DateTimeKind.Unspecified).AddTicks(5779), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 13L,
                            ProductId = 24L
                        },
                        new
                        {
                            Id = 46L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 25, 14, 16, 17, 655, DateTimeKind.Unspecified).AddTicks(6282), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 42L,
                            ProductId = 9L
                        },
                        new
                        {
                            Id = 47L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 5, 3, 31, 59, 497, DateTimeKind.Unspecified).AddTicks(814), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 13L,
                            ProductId = 28L
                        },
                        new
                        {
                            Id = 48L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 16, 8, 24, 58, 707, DateTimeKind.Unspecified).AddTicks(3143), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 30L,
                            ProductId = 15L
                        },
                        new
                        {
                            Id = 49L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 6, 9, 44, 47, 379, DateTimeKind.Unspecified).AddTicks(3139), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 28L,
                            ProductId = 10L
                        },
                        new
                        {
                            Id = 50L,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 2, 0, 22, 23, 905, DateTimeKind.Unspecified).AddTicks(6387), new TimeSpan(0, -3, 0, 0, 0)),
                            LinkType = 2,
                            LinkedProductId = 31L,
                            ProductId = 12L
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ProductOption");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayType")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("OptionId");

                    b.Property<long>("ProductId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionValue");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplateProductAttribute", b =>
                {
                    b.Property<long>("ProductTemplateId");

                    b.Property<long>("ProductAttributeId");

                    b.HasKey("ProductTemplateId", "ProductAttributeId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductTemplateProductAttribute");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCustomerReview");

                    b.Property<int>("ApprovedRatingSum");

                    b.Property<int>("ApprovedTotalReviews");

                    b.Property<bool>("AvailableForPreorder");

                    b.Property<long>("BrandId");

                    b.Property<long>("CategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("DiscountAvailable");

                    b.Property<bool>("HasDiscountApplied");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("MediaId");

                    b.Property<int>("NotApprovedRatingSum");

                    b.Property<int>("NotApprovedTotalReviews");

                    b.Property<bool>("NotReturnable");

                    b.Property<string>("Note");

                    b.Property<string>("OldPrice");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDate");

                    b.Property<string>("Price");

                    b.Property<bool>("ProductAvailable");

                    b.Property<decimal>("ProductCost");

                    b.Property<long>("ProductLinksId");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<int>("QuantityPerUnity");

                    b.Property<int>("Ranking");

                    b.Property<string>("SKU")
                        .IsRequired();

                    b.Property<string>("Slug");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<bool>("StockTrackingIsEnabled");

                    b.Property<string>("ThumbnailImage");

                    b.Property<string>("TypeName")
                        .IsRequired();

                    b.Property<decimal>("UnitPrice");

                    b.Property<decimal>("UnitSize");

                    b.Property<double>("UnitWeight");

                    b.Property<int>("UnitsInStock");

                    b.Property<int>("UnitsOnOrder");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<long>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("VendorId");

                    b.ToTable("StormyProduct");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Common.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(500);

                    b.Property<string>("Complement")
                        .HasMaxLength(250);

                    b.Property<string>("Country");

                    b.Property<string>("District");

                    b.Property<string>("FirstAddress")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Number");

                    b.Property<long>("OwnerId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(9);

                    b.Property<string>("SecondAddress")
                        .HasMaxLength(250);

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("WhoReceives");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.StormyCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPF")
                        .HasMaxLength(9);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("CustomerReviewsId");

                    b.Property<long>("CustomerWishlistId");

                    b.Property<long?>("DefaultBillingAddressId");

                    b.Property<long?>("DefaultShippingAddressId");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CustomerWishlistId")
                        .IsUnique();

                    b.HasIndex("DefaultBillingAddressId");

                    b.HasIndex("DefaultShippingAddressId");

                    b.ToTable("StormyCustomer");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.Wishlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.WishlistItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedAt");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("ProductId");

                    b.Property<long?>("ProductId1");

                    b.Property<long>("WishlistId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId1");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.EntityType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("AreaName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMenuable");

                    b.Property<string>("RoutingAction")
                        .HasMaxLength(450);

                    b.Property<string>("RoutingController")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.Media", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Caption");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("MediaType");

                    b.Property<string>("SeoFileName");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Order.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Price");

                    b.Property<string>("ProductName");

                    b.Property<int>("Quantity");

                    b.Property<long>("ShipmentId");

                    b.Property<long>("StormyOrderId");

                    b.Property<long>("StormyProductId");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("StormyOrderId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Payments.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("FailureMessage");

                    b.Property<string>("GatewayTransactionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<decimal>("PaymentFee");

                    b.Property<string>("PaymentMethod");

                    b.Property<int>("PaymentStatus");

                    b.Property<long>("StormyOrderId");

                    b.HasKey("Id");

                    b.HasIndex("StormyOrderId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("RatingLevel");

                    b.Property<string>("ReviewerName");

                    b.Property<long>("StormyCustomerId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("StormyCustomerId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Settings.AppSettings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsVisibleInCommonSettingPage");

                    b.Property<string>("Module")
                        .HasMaxLength(450);

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BillingAddressId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal>("DeliveryCost");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<long>("DestinationAddressId");

                    b.Property<decimal>("Diameter");

                    b.Property<decimal>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<decimal>("Price");

                    b.Property<string>("ShipmentMethod");

                    b.Property<string>("ShipmentProviderName");

                    b.Property<DateTime>("ShippedDate");

                    b.Property<long>("StormyCustomerId");

                    b.Property<decimal>("TotalWeight");

                    b.Property<string>("TrackNumber")
                        .HasMaxLength(250);

                    b.Property<string>("UserId");

                    b.Property<string>("WhoReceives");

                    b.Property<decimal>("Width");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("StormyCustomerId");

                    b.ToTable("Shipment");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            BillingAddressId = 0L,
                            Comment = "a single comment",
                            CreatedOn = new DateTime(2019, 9, 8, 21, 58, 21, 851, DateTimeKind.Utc).AddTicks(9557),
                            DeliveryCost = 22.29m,
                            DeliveryDate = new DateTime(2019, 9, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            DestinationAddressId = 0L,
                            Diameter = 0m,
                            Height = 0m,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 21, 58, 21, 851, DateTimeKind.Unspecified).AddTicks(9166), new TimeSpan(0, 0, 0, 0, 0)),
                            Price = 20.99m,
                            ShippedDate = new DateTime(2019, 9, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            StormyCustomerId = 0L,
                            TotalWeight = 0.400m,
                            TrackNumber = "8e825c7f-faba-47fd-a31f-8489e300141d",
                            Width = 0m
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipping.ShipmentItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("OrderItemId");

                    b.Property<int>("Quantity");

                    b.Property<int>("ShipmentId");

                    b.Property<long?>("ShipmentId1");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId1");

                    b.ToTable("ShipmentItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.StormyOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<long>("CustomerId");

                    b.Property<decimal>("DeliveryCost");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("OrderDate");

                    b.Property<Guid>("OrderUniqueKey");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<long>("PaymentId");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("PickUpInStore");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<long>("ShipmentId");

                    b.Property<DateTime>("ShippedDate");

                    b.Property<long?>("ShippingAddressId");

                    b.Property<string>("ShippingMethod");

                    b.Property<int>("ShippingStatus");

                    b.Property<int>("Status");

                    b.Property<decimal>("Tax");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("TotalWeight");

                    b.Property<string>("TrackNumber");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("StormyOrder");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.StormyVendor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<long?>("AddressId1");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactTitle");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Logo");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.Property<string>("SizeUrl");

                    b.Property<string>("TypeGoods");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("AddressId1");

                    b.ToTable("StormyVendor");
                });

            modelBuilder.Entity("StormyCommerce.Infraestructure.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Category", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Category", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeGroup", "Group")
                        .WithMany("Attributes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("StormyProductId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeValue", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductLink", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("Links")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "LinkedProduct")
                        .WithMany("LinkedProductLinks")
                        .HasForeignKey("LinkedProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionValue", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("OptionValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplateProductAttribute", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", "ProductTemplate")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Category", "Category")
                        .WithOne()
                        .HasForeignKey("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Vendor.StormyVendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.StormyCustomer", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.Wishlist", "CustomerWishlist")
                        .WithOne("Customer")
                        .HasForeignKey("StormyCommerce.Core.Entities.Customer.StormyCustomer", "CustomerWishlistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "DefaultBillingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultBillingAddressId");

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "DefaultShippingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultShippingAddressId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.WishlistItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId1");

                    b.HasOne("StormyCommerce.Core.Entities.Customer.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Entity", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.Media", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("Medias")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Order.OrderItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder", "Order")
                        .WithMany("Items")
                        .HasForeignKey("StormyOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("StormyProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Payments.Payment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("StormyCommerce.Core.Entities.Payments.Payment", "StormyOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Review", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Author")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("StormyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "DestinationAddress")
                        .WithMany()
                        .HasForeignKey("DestinationAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("StormyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipping.ShipmentItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Shipment", "Shipment")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentId1");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.StormyOrder", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.StormyVendor", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId1");
                });
#pragma warning restore 612, 618
        }
    }
}
