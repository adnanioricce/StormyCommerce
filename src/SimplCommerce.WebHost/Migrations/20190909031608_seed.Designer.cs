// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StormyCommerce.Infraestructure.Data;

namespace SimplCommerce.WebHost.Migrations
{
    [DbContext(typeof(StormyDbContext))]
    [Migration("20190909031608_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInMenu");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("ParentId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ThumbnailImageUrl");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = @"Et repudiandae quam debitis praesentium.
Veritatis odio iure ut et quisquam accusantium.",
                            DisplayOrder = 0,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 26, 2, 4, 39, 408, DateTimeKind.Unspecified).AddTicks(2498), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = "Blanditiis enim consectetur et et reprehenderit est et recusandae alias.",
                            Name = "Baby",
                            Slug = "beatae-animi-cumque",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "occaecati",
                            DisplayOrder = 1,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 23, 9, 40, 741, DateTimeKind.Unspecified).AddTicks(2531), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = @"Quasi qui expedita esse sint inventore ad nihil quasi.
Qui et ex voluptatem nobis in qui sed.
Non molestiae doloribus corrupti.
Vel reiciendis commodi temporibus laboriosam illo aut ipsum consequuntur occaecati.
Inventore et est repudiandae pariatur sed ut at voluptatem id.
Dolore eum delectus est.",
                            Name = "Industrial",
                            Slug = "illum-in-quam",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "voluptates",
                            DisplayOrder = 2,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 18, 7, 1, 37, 906, DateTimeKind.Unspecified).AddTicks(4176), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = "Eligendi atque dicta perferendis natus modi autem. Et fuga maxime dolorum sed veniam consequatur expedita eos. Ad modi minus voluptatibus.",
                            Name = "Clothing",
                            Slug = "dolorem-est-labore",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "est",
                            DisplayOrder = 3,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 22, 1, 31, 33, 589, DateTimeKind.Unspecified).AddTicks(7690), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = "Id autem sequi quidem dolor quo cumque vel commodi. Hic laboriosam et adipisci velit dolores. Magnam earum nobis molestias.",
                            Name = "Baby",
                            Slug = "vel-aut-impedit",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Quidem modi et rem officiis rerum. Consequuntur quia voluptatum ullam cupiditate saepe vero voluptatem aperiam. Repellendus quae molestias et asperiores ea. Laudantium consequatur molestiae similique dignissimos reiciendis dolor veritatis nulla. Qui amet voluptatem et doloremque enim quis consequatur maiores est. Nesciunt laborum tenetur atque cum ipsum laborum qui.",
                            DisplayOrder = 4,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 14, 5, 26, 598, DateTimeKind.Unspecified).AddTicks(4780), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = "Rerum et omnis aut molestias a quaerat nobis adipisci.",
                            Name = "Industrial",
                            Slug = "optio-ut-cum",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "quo",
                            DisplayOrder = 5,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 6, 0, 11, 6, 551, DateTimeKind.Unspecified).AddTicks(8378), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = @"Eos est aut qui modi corporis facere aut.
Assumenda consequatur dolorem.
Quas inventore dicta quia natus.
Cupiditate aliquid fugit quia temporibus beatae voluptate atque harum.
Aliquid sapiente omnis eos asperiores sed et harum minima.",
                            Name = "Industrial",
                            Slug = "ut-nihil-facere",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Ut quia molestiae ipsa consequatur sequi omnis. Eum voluptatem veniam modi. Vel qui quia voluptatem minus aut quaerat. Laboriosam ullam vel blanditiis ipsa.",
                            DisplayOrder = 6,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 4, 23, 22, 24, 386, DateTimeKind.Unspecified).AddTicks(7198), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = "voluptatem",
                            Name = "Grocery",
                            Slug = "assumenda-consequatur-earum",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 8L,
                            Description = @"Nihil dolor perspiciatis consequatur temporibus.
Est sit a velit omnis est aut harum.
Dignissimos aut consequuntur modi natus officiis fugit officia voluptas.
Est blanditiis sit vitae.",
                            DisplayOrder = 7,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 11, 5, 45, 87, DateTimeKind.Unspecified).AddTicks(5289), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = "Enim sint esse quis amet repellat rem tempore minus sed. Quae ut nostrum ut eos provident et corporis ad. Rerum et deserunt adipisci omnis. Dolor quia deserunt aspernatur dicta deserunt qui esse. Eius laudantium aliquam fugit expedita. Eum possimus quaerat ut et nulla laboriosam.",
                            Name = "Toys",
                            Slug = "voluptatem-atque-qui",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 9L,
                            Description = @"Qui dolor velit.
Nostrum dolores qui sit assumenda.
Ducimus officiis ut et et et.",
                            DisplayOrder = 8,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 27, 3, 26, 16, 978, DateTimeKind.Unspecified).AddTicks(2132), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = "dolorum",
                            Name = "Garden",
                            Slug = "dolor-fugit-cum",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "Quo vero odit sint excepturi ab adipisci ab quis.",
                            DisplayOrder = 9,
                            IncludeInMenu = true,
                            IsDeleted = false,
                            IsPublished = true,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 24, 11, 19, 36, 250, DateTimeKind.Unspecified).AddTicks(5298), new TimeSpan(0, 0, 0, 0, 0)),
                            MetaDescription = "Voluptas temporibus commodi illo nobis.",
                            Name = "Movies",
                            Slug = "id-corrupti-dicta",
                            ThumbnailImageUrl = "http://lorempixel.com/640/480/fashion"
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("LogoImage");

                    b.Property<string>("Name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = @"Iure sit expedita suscipit ipsa.
Ut error ex dolorem esse et nihil minima quia quaerat.
Maxime similique esse ut iusto dolor et esse et maxime.
Eum quia itaque corporis veritatis aliquid.
Non consequatur sint quam omnis.
Suscipit minus hic perspiciatis aut magnam.",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 29, 8, 56, 19, 963, DateTimeKind.Unspecified).AddTicks(252), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=967",
                            Name = "Xavier S.A.",
                            Slug = "quisquam-et-suscipit",
                            Website = "tertuliano.com"
                        },
                        new
                        {
                            Id = 2L,
                            Description = @"Mollitia cumque eum qui saepe temporibus magni deserunt perferendis.
Delectus sint sed.
Maxime sed fugit necessitatibus omnis quis accusantium eos.
Perspiciatis illo sint consequuntur asperiores quia nam facere corrupti.",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 31, 23, 30, 23, 57, DateTimeKind.Unspecified).AddTicks(325), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=1",
                            Name = "Xavier, Carvalho and Souza",
                            Slug = "atque-consequuntur-hic",
                            Website = "fabrício.br"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "eligendi",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 22, 40, 34, 830, DateTimeKind.Unspecified).AddTicks(3202), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=864",
                            Name = "Batista, Carvalho and Braga",
                            Slug = "sed-at-assumenda",
                            Website = "mércia.name"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Voluptatem facilis enim enim doloremque qui pariatur ut eos quos.",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 22, 4, 5, 57, 360, DateTimeKind.Unspecified).AddTicks(6196), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=206",
                            Name = "Nogueira, Reis and Oliveira",
                            Slug = "dolorum-cupiditate-totam",
                            Website = "carla.net"
                        },
                        new
                        {
                            Id = 5L,
                            Description = @"Ipsa laboriosam eligendi illo ullam quasi.
Sint non ea nesciunt.
Dolor deserunt sint fugiat ratione eos.
Quasi est est quia dolore deserunt beatae sit eos.",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 21, 21, 38, 56, 705, DateTimeKind.Unspecified).AddTicks(5740), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=191",
                            Name = "Macedo - Nogueira",
                            Slug = "rerum-perferendis-veritatis",
                            Website = "rafael.org"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Voluptatem sint itaque id et mollitia sint.",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 6, 14, 42, 38, 894, DateTimeKind.Unspecified).AddTicks(2135), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=406",
                            Name = "Carvalho S.A.",
                            Slug = "et-suscipit-id",
                            Website = "antônio.net"
                        },
                        new
                        {
                            Id = 7L,
                            Description = @"Deleniti et deserunt aut repudiandae quisquam quam.
Voluptate perspiciatis fuga omnis beatae quia dolorum ea veniam facilis.
Enim magni cum aliquam adipisci asperiores et enim.",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 23, 6, 47, 45, 787, DateTimeKind.Unspecified).AddTicks(6498), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=362",
                            Name = "Martins S.A.",
                            Slug = "itaque-qui-earum",
                            Website = "mércia.biz"
                        },
                        new
                        {
                            Id = 8L,
                            Description = @"Commodi sit unde et sunt beatae magni.
Recusandae iusto et quasi.
Consequatur et qui iste est consequatur.
Ducimus iure aut rem consequatur voluptate cumque est quo.
Qui vero doloribus.
Quasi explicabo blanditiis atque amet natus in.",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 12, 27, 4, 167, DateTimeKind.Unspecified).AddTicks(6952), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=525",
                            Name = "Souza - Albuquerque",
                            Slug = "in-culpa-et",
                            Website = "sílvia.com"
                        },
                        new
                        {
                            Id = 9L,
                            Description = "Est rerum error sequi.",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 19, 4, 7, 50, 434, DateTimeKind.Unspecified).AddTicks(8475), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=608",
                            Name = "Moreira LTDA",
                            Slug = "cumque-atque-ut",
                            Website = "breno.name"
                        },
                        new
                        {
                            Id = 10L,
                            Description = "impedit",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 28, 22, 11, 37, 629, DateTimeKind.Unspecified).AddTicks(4903), new TimeSpan(0, 0, 0, 0, 0)),
                            LogoImage = "https://picsum.photos/640/480/?image=579",
                            Name = "Albuquerque - Santos",
                            Slug = "itaque-a-qui",
                            Website = "carlos.br"
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("GroupId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.Property<long?>("StormyProductId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("ProductAttribute");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ProductAttributeGroup");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AttributeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("ProductId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValue");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductLink", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("LinkType");

                    b.Property<long>("LinkedProductId");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("LinkedProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLink");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ProductOption");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DisplayType")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("OptionId");

                    b.Property<long>("ProductId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionValue");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductTemplate");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplateProductAttribute", b =>
                {
                    b.Property<long>("ProductTemplateId");

                    b.Property<long>("ProductAttributeId");

                    b.HasKey("ProductTemplateId", "ProductAttributeId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductTemplateProductAttribute");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCustomerReview");

                    b.Property<int>("ApprovedRatingSum");

                    b.Property<int>("ApprovedTotalReviews");

                    b.Property<bool>("AvailableForPreorder");

                    b.Property<long>("BrandId");

                    b.Property<long>("CategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("DiscountAvailable");

                    b.Property<bool>("HasDiscountApplied");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<long>("MediaId");

                    b.Property<int>("NotApprovedRatingSum");

                    b.Property<int>("NotApprovedTotalReviews");

                    b.Property<bool>("NotReturnable");

                    b.Property<string>("Note");

                    b.Property<string>("OldPrice");

                    b.Property<DateTime?>("PreOrderAvailabilityStartDate");

                    b.Property<string>("Price");

                    b.Property<bool>("ProductAvailable");

                    b.Property<decimal>("ProductCost");

                    b.Property<long>("ProductLinksId");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("Published");

                    b.Property<int>("QuantityPerUnity");

                    b.Property<int>("Ranking");

                    b.Property<string>("SKU")
                        .IsRequired();

                    b.Property<string>("Slug");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<bool>("StockTrackingIsEnabled");

                    b.Property<string>("ThumbnailImage");

                    b.Property<string>("TypeName")
                        .IsRequired();

                    b.Property<decimal>("UnitPrice");

                    b.Property<decimal>("UnitSize");

                    b.Property<double>("UnitWeight");

                    b.Property<int>("UnitsInStock");

                    b.Property<int>("UnitsOnOrder");

                    b.Property<DateTime>("UpdatedOnUtc");

                    b.Property<long>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("VendorId");

                    b.ToTable("StormyProduct");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 1L,
                            CategoryId = 1L,
                            CreatedAt = new DateTime(2019, 8, 26, 8, 41, 11, 498, DateTimeKind.Local).AddTicks(367),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 599, DateTimeKind.Unspecified).AddTicks(5953), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 1L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = @"Labore ratione totam.
Voluptatibus velit quaerat aut.
Expedita vero incidunt corporis ut aut voluptate et sed.
Magnam dolorum et.",
                            OldPrice = "R$65.18",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 3, 4, 9, 6, 58, 141, DateTimeKind.Local).AddTicks(9848),
                            Price = "R$87.63",
                            ProductAvailable = true,
                            ProductCost = 0.7994309672151840m,
                            ProductLinksId = 0L,
                            ProductName = "Tasty Metal Computer",
                            Published = true,
                            QuantityPerUnity = 78,
                            Ranking = 1,
                            SKU = "tgnywm16cb49w0qm",
                            Slug = "sit-eligendi-odit",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Garden",
                            UnitPrice = 61.2244497804085000m,
                            UnitSize = 7.0566492839980200m,
                            UnitWeight = 0.88669603126435359,
                            UnitsInStock = 4,
                            UnitsOnOrder = 7,
                            UpdatedOnUtc = new DateTime(2019, 9, 8, 10, 18, 43, 826, DateTimeKind.Local).AddTicks(496),
                            VendorId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 2L,
                            CategoryId = 2L,
                            CreatedAt = new DateTime(2019, 1, 20, 5, 52, 50, 528, DateTimeKind.Local).AddTicks(8941),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(2308), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 2L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "id",
                            OldPrice = "R$146.96",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 4, 14, 21, 54, 39, 572, DateTimeKind.Local).AddTicks(8250),
                            Price = "R$32.38",
                            ProductAvailable = true,
                            ProductCost = 0.3763653325738220m,
                            ProductLinksId = 0L,
                            ProductName = "Unbranded Granite Soap",
                            Published = true,
                            QuantityPerUnity = 100,
                            Ranking = 2,
                            SKU = "a3ztn1bd7wgh2hsi",
                            Slug = "deleniti-occaecati-mollitia",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Health",
                            UnitPrice = 14.7327064605116000m,
                            UnitSize = 2.7043094638289500m,
                            UnitWeight = 0.43973919164377229,
                            UnitsInStock = 10,
                            UnitsOnOrder = 6,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 5, 25, 54, 30, DateTimeKind.Local).AddTicks(8396),
                            VendorId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 3L,
                            CategoryId = 3L,
                            CreatedAt = new DateTime(2019, 5, 3, 15, 47, 8, 190, DateTimeKind.Local).AddTicks(2905),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(3864), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 3L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "Enim sint optio odio voluptatem rerum pariatur ipsam quisquam iure.",
                            OldPrice = "R$140.81",
                            PreOrderAvailabilityStartDate = new DateTime(2019, 10, 31, 9, 24, 8, 833, DateTimeKind.Local).AddTicks(8137),
                            Price = "R$69.33",
                            ProductAvailable = true,
                            ProductCost = 0.1468776581561550m,
                            ProductLinksId = 0L,
                            ProductName = "Gorgeous Steel Cheese",
                            Published = true,
                            QuantityPerUnity = 58,
                            Ranking = 3,
                            SKU = "wecfupkyilyb09v3",
                            Slug = "quo-distinctio-eius",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Music",
                            UnitPrice = 10.9147093775285000m,
                            UnitSize = 7.2023298531781600m,
                            UnitWeight = 0.44666411049974342,
                            UnitsInStock = 5,
                            UnitsOnOrder = 9,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 0, 25, 26, 48, DateTimeKind.Local).AddTicks(5472),
                            VendorId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 4L,
                            CategoryId = 4L,
                            CreatedAt = new DateTime(2019, 7, 18, 2, 48, 50, 839, DateTimeKind.Local).AddTicks(6187),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(4401), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 4L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "Beatae sit enim doloribus rerum et ut officia.",
                            OldPrice = "R$18.49",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 5, 29, 9, 33, 31, 283, DateTimeKind.Local).AddTicks(3919),
                            Price = "R$69.29",
                            ProductAvailable = true,
                            ProductCost = 0.8629512902642370m,
                            ProductLinksId = 0L,
                            ProductName = "Handmade Cotton Sausages",
                            Published = true,
                            QuantityPerUnity = 50,
                            Ranking = 4,
                            SKU = "1z3rxspq93y4potb",
                            Slug = "dolorem-voluptas-blanditiis",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Outdoors",
                            UnitPrice = 97.8263495014172000m,
                            UnitSize = 7.142680681842700m,
                            UnitWeight = 0.43717079723122099,
                            UnitsInStock = 3,
                            UnitsOnOrder = 2,
                            UpdatedOnUtc = new DateTime(2019, 9, 8, 20, 39, 29, 701, DateTimeKind.Local).AddTicks(4226),
                            VendorId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 5L,
                            CategoryId = 5L,
                            CreatedAt = new DateTime(2019, 2, 15, 19, 0, 3, 991, DateTimeKind.Local).AddTicks(5613),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(4832), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 5L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "velit",
                            OldPrice = "R$173.68",
                            PreOrderAvailabilityStartDate = new DateTime(2019, 9, 20, 10, 28, 17, 975, DateTimeKind.Local).AddTicks(5619),
                            Price = "R$26.64",
                            ProductAvailable = true,
                            ProductCost = 0.8861345936945340m,
                            ProductLinksId = 0L,
                            ProductName = "Awesome Cotton Tuna",
                            Published = true,
                            QuantityPerUnity = 72,
                            Ranking = 5,
                            SKU = "l2ja9jlj94blkdz6",
                            Slug = "facere-cumque-qui",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Shoes",
                            UnitPrice = 75.9517959207072000m,
                            UnitSize = 1.3506824436367900m,
                            UnitWeight = 0.5915006481071472,
                            UnitsInStock = 7,
                            UnitsOnOrder = 7,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 3, 54, 11, 946, DateTimeKind.Local).AddTicks(7235),
                            VendorId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 6L,
                            CategoryId = 6L,
                            CreatedAt = new DateTime(2019, 1, 15, 2, 10, 11, 252, DateTimeKind.Local).AddTicks(1432),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(5214), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 6L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "Distinctio quisquam est eligendi ea. Doloribus voluptatem omnis quis veniam sapiente voluptatem repellendus. Labore odio quia aliquid in ut quia quos laboriosam. Cupiditate modi et qui non placeat ipsam aspernatur. Animi dolorem sit id ad.",
                            OldPrice = "R$68.03",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 5, 14, 19, 49, 9, 309, DateTimeKind.Local).AddTicks(2318),
                            Price = "R$48.25",
                            ProductAvailable = true,
                            ProductCost = 0.07070434655561310m,
                            ProductLinksId = 0L,
                            ProductName = "Small Cotton Pants",
                            Published = true,
                            QuantityPerUnity = 84,
                            Ranking = 6,
                            SKU = "pagdhbrl9j0fo7bc",
                            Slug = "voluptate-ut-tempore",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Jewelery",
                            UnitPrice = 84.9459445499563000m,
                            UnitSize = 4.877332511766500m,
                            UnitWeight = 0.87161928316188009,
                            UnitsInStock = 4,
                            UnitsOnOrder = 7,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 10, 20, 30, 826, DateTimeKind.Local).AddTicks(4493),
                            VendorId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 7L,
                            CategoryId = 7L,
                            CreatedAt = new DateTime(2019, 3, 1, 20, 12, 51, 298, DateTimeKind.Local).AddTicks(67),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(5888), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 7L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "Dignissimos tenetur et tempora libero quo aliquid. Deserunt reiciendis cum. Delectus est reprehenderit illum quo esse. Fugiat excepturi rerum est corporis officia assumenda consectetur cum veritatis. In veniam aperiam maiores fugit est voluptates enim ullam voluptatem. Quia dignissimos molestiae accusantium provident et.",
                            OldPrice = "R$177.20",
                            PreOrderAvailabilityStartDate = new DateTime(2019, 9, 12, 10, 43, 10, 938, DateTimeKind.Local).AddTicks(2280),
                            Price = "R$30.11",
                            ProductAvailable = true,
                            ProductCost = 0.6570739693274140m,
                            ProductLinksId = 0L,
                            ProductName = "Handcrafted Frozen Tuna",
                            Published = true,
                            QuantityPerUnity = 88,
                            Ranking = 7,
                            SKU = "0in9yj8c2vikotjy",
                            Slug = "eos-nulla-amet",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Books",
                            UnitPrice = 27.7190129867378000m,
                            UnitSize = 0.67625676313240900m,
                            UnitWeight = 0.47490057697282201,
                            UnitsInStock = 2,
                            UnitsOnOrder = 9,
                            UpdatedOnUtc = new DateTime(2019, 9, 8, 14, 48, 23, 554, DateTimeKind.Local).AddTicks(9756),
                            VendorId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 8L,
                            CategoryId = 8L,
                            CreatedAt = new DateTime(2019, 1, 7, 6, 6, 2, 157, DateTimeKind.Local).AddTicks(6389),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(6599), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 8L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "reiciendis",
                            OldPrice = "R$100.59",
                            PreOrderAvailabilityStartDate = new DateTime(2019, 10, 23, 15, 14, 9, 673, DateTimeKind.Local).AddTicks(572),
                            Price = "R$62.03",
                            ProductAvailable = true,
                            ProductCost = 0.2957889713793010m,
                            ProductLinksId = 0L,
                            ProductName = "Sleek Concrete Soap",
                            Published = true,
                            QuantityPerUnity = 90,
                            Ranking = 8,
                            SKU = "nwno0lkedznowe4y",
                            Slug = "laboriosam-reprehenderit-et",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Jewelery",
                            UnitPrice = 40.3411970196018000m,
                            UnitSize = 7.9057711027123800m,
                            UnitWeight = 0.47062867482687748,
                            UnitsInStock = 9,
                            UnitsOnOrder = 5,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 8, 55, 45, 140, DateTimeKind.Local).AddTicks(2784),
                            VendorId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 9L,
                            CategoryId = 9L,
                            CreatedAt = new DateTime(2018, 9, 17, 1, 42, 51, 14, DateTimeKind.Local).AddTicks(3769),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(6963), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 9L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = @"Occaecati ut expedita qui facilis aut itaque.
Sunt et ut odio est.
Ea dolorum quasi a dicta.
Et non cupiditate porro et.
Eum molestiae deserunt ab eos reprehenderit impedit eius.",
                            OldPrice = "R$71.53",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 3, 4, 11, 50, 52, 528, DateTimeKind.Local).AddTicks(6093),
                            Price = "R$16.40",
                            ProductAvailable = true,
                            ProductCost = 0.3406264289937110m,
                            ProductLinksId = 0L,
                            ProductName = "Refined Plastic Tuna",
                            Published = true,
                            QuantityPerUnity = 90,
                            Ranking = 9,
                            SKU = "6xm7r4ftomzfcl1q",
                            Slug = "rerum-animi-magni",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Clothing",
                            UnitPrice = 0.13040392665677000m,
                            UnitSize = 3.4123816263919600m,
                            UnitWeight = 0.042251400669222422,
                            UnitsInStock = 1,
                            UnitsOnOrder = 6,
                            UpdatedOnUtc = new DateTime(2019, 9, 8, 13, 52, 24, 728, DateTimeKind.Local).AddTicks(5753),
                            VendorId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 10L,
                            CategoryId = 10L,
                            CreatedAt = new DateTime(2019, 1, 26, 17, 33, 32, 720, DateTimeKind.Local).AddTicks(2535),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(7581), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 10L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "voluptatem",
                            OldPrice = "R$54.96",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 3, 22, 9, 56, 35, 623, DateTimeKind.Local).AddTicks(1697),
                            Price = "R$38.78",
                            ProductAvailable = true,
                            ProductCost = 0.1456231773577740m,
                            ProductLinksId = 0L,
                            ProductName = "Incredible Frozen Cheese",
                            Published = true,
                            QuantityPerUnity = 96,
                            Ranking = 10,
                            SKU = "97znf3nncylqxtw1",
                            Slug = "perferendis-libero-cupiditate",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Beauty",
                            UnitPrice = 46.7287603052001000m,
                            UnitSize = 7.325215301162200m,
                            UnitWeight = 0.19026455012628088,
                            UnitsInStock = 0,
                            UnitsOnOrder = 2,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 2, 18, 28, 301, DateTimeKind.Local).AddTicks(610),
                            VendorId = 10L
                        },
                        new
                        {
                            Id = 11L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 11L,
                            CategoryId = 11L,
                            CreatedAt = new DateTime(2018, 10, 1, 15, 24, 18, 12, DateTimeKind.Local).AddTicks(5768),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(7969), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 11L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "Totam quis eius. Et in accusantium non quis non fuga ea. Recusandae rem minus sit sit eum qui fugit consequatur autem.",
                            OldPrice = "R$130.36",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 2, 17, 22, 13, 56, 991, DateTimeKind.Local).AddTicks(8864),
                            Price = "R$3.93",
                            ProductAvailable = true,
                            ProductCost = 0.0268870410634610m,
                            ProductLinksId = 0L,
                            ProductName = "Refined Plastic Mouse",
                            Published = true,
                            QuantityPerUnity = 14,
                            Ranking = 11,
                            SKU = "yhqc9kle5sn3tsft",
                            Slug = "perspiciatis-id-aut",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Kids",
                            UnitPrice = 39.158990112673000m,
                            UnitSize = 0.099832620518204100m,
                            UnitWeight = 0.26445568411818504,
                            UnitsInStock = 0,
                            UnitsOnOrder = 8,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 4, 51, 45, 218, DateTimeKind.Local).AddTicks(3737),
                            VendorId = 11L
                        },
                        new
                        {
                            Id = 12L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 12L,
                            CategoryId = 12L,
                            CreatedAt = new DateTime(2019, 8, 13, 17, 25, 56, 346, DateTimeKind.Local).AddTicks(1386),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(8507), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 12L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "Voluptas accusantium delectus. Et ab ullam dolorem perferendis laborum. Quas rerum voluptatem pariatur esse omnis eos quia. Eum a qui ea excepturi aperiam nulla et ad voluptas. Deleniti aut vitae voluptas sequi voluptatem temporibus.",
                            OldPrice = "R$174.49",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 1, 28, 9, 46, 15, 665, DateTimeKind.Local).AddTicks(7539),
                            Price = "R$83.56",
                            ProductAvailable = true,
                            ProductCost = 0.2348219865163890m,
                            ProductLinksId = 0L,
                            ProductName = "Generic Cotton Shirt",
                            Published = true,
                            QuantityPerUnity = 66,
                            Ranking = 12,
                            SKU = "offcb7em6j6892xj",
                            Slug = "eveniet-atque-qui",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Books",
                            UnitPrice = 18.8268704893193000m,
                            UnitSize = 5.7567849176734600m,
                            UnitWeight = 0.081294152457869681,
                            UnitsInStock = 5,
                            UnitsOnOrder = 6,
                            UpdatedOnUtc = new DateTime(2019, 9, 8, 23, 7, 59, 496, DateTimeKind.Local).AddTicks(1654),
                            VendorId = 12L
                        },
                        new
                        {
                            Id = 13L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 13L,
                            CategoryId = 13L,
                            CreatedAt = new DateTime(2018, 12, 19, 2, 17, 13, 738, DateTimeKind.Local).AddTicks(4086),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(9120), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 13L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "Et odit consequuntur sit sed et.",
                            OldPrice = "R$27.85",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 4, 8, 8, 37, 2, 596, DateTimeKind.Local).AddTicks(9909),
                            Price = "R$61.35",
                            ProductAvailable = true,
                            ProductCost = 0.8008415563035950m,
                            ProductLinksId = 0L,
                            ProductName = "Small Plastic Pants",
                            Published = true,
                            QuantityPerUnity = 70,
                            Ranking = 13,
                            SKU = "nprrsptkky771j61",
                            Slug = "magnam-dolorum-iste",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Beauty",
                            UnitPrice = 97.2983707195606000m,
                            UnitSize = 1.5189050377900300m,
                            UnitWeight = 0.027542139416347321,
                            UnitsInStock = 3,
                            UnitsOnOrder = 7,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 11, 41, 0, 915, DateTimeKind.Local).AddTicks(5825),
                            VendorId = 13L
                        },
                        new
                        {
                            Id = 14L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 14L,
                            CategoryId = 14L,
                            CreatedAt = new DateTime(2019, 2, 26, 23, 18, 56, 779, DateTimeKind.Local).AddTicks(7627),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(9540), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 14L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "ducimus",
                            OldPrice = "R$81.66",
                            PreOrderAvailabilityStartDate = new DateTime(2019, 10, 2, 10, 18, 39, 890, DateTimeKind.Local).AddTicks(5707),
                            Price = "R$16.11",
                            ProductAvailable = true,
                            ProductCost = 0.6367256704888890m,
                            ProductLinksId = 0L,
                            ProductName = "Handcrafted Fresh Tuna",
                            Published = true,
                            QuantityPerUnity = 4,
                            Ranking = 14,
                            SKU = "n6iah1rgtniqqg2e",
                            Slug = "quia-et-blanditiis",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Sports",
                            UnitPrice = 52.9438836746588000m,
                            UnitSize = 2.3633508348666800m,
                            UnitWeight = 0.52549653338524349,
                            UnitsInStock = 2,
                            UnitsOnOrder = 5,
                            UpdatedOnUtc = new DateTime(2019, 9, 8, 18, 28, 57, 905, DateTimeKind.Local).AddTicks(2603),
                            VendorId = 14L
                        },
                        new
                        {
                            Id = 15L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 15L,
                            CategoryId = 15L,
                            CreatedAt = new DateTime(2019, 2, 1, 15, 20, 37, 289, DateTimeKind.Local).AddTicks(1282),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 618, DateTimeKind.Unspecified).AddTicks(9883), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 15L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = @"Eius reprehenderit deleniti quidem.
Saepe nulla et sit quaerat et non sint amet sed.
Ut rerum et non.
Quia unde quia veniam laudantium quisquam aperiam aut nihil blanditiis.
Commodi et impedit vero dolores quibusdam.",
                            OldPrice = "R$29.06",
                            PreOrderAvailabilityStartDate = new DateTime(2019, 10, 2, 13, 53, 59, 951, DateTimeKind.Local).AddTicks(8797),
                            Price = "R$6.03",
                            ProductAvailable = true,
                            ProductCost = 0.7340838358430580m,
                            ProductLinksId = 0L,
                            ProductName = "Fantastic Rubber Fish",
                            Published = true,
                            QuantityPerUnity = 26,
                            Ranking = 15,
                            SKU = "93e190zmx8zfz1k9",
                            Slug = "aliquam-sint-labore",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Home",
                            UnitPrice = 6.35664430742927000m,
                            UnitSize = 5.3380198149653200m,
                            UnitWeight = 0.5862680126848947,
                            UnitsInStock = 3,
                            UnitsOnOrder = 8,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 7, 21, 52, 428, DateTimeKind.Local).AddTicks(4927),
                            VendorId = 15L
                        },
                        new
                        {
                            Id = 16L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 16L,
                            CategoryId = 16L,
                            CreatedAt = new DateTime(2019, 4, 18, 8, 11, 11, 660, DateTimeKind.Local).AddTicks(7767),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 619, DateTimeKind.Unspecified).AddTicks(491), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 16L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "Nostrum eum eius.",
                            OldPrice = "R$76.02",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 8, 27, 11, 25, 57, 747, DateTimeKind.Local).AddTicks(8315),
                            Price = "R$13.15",
                            ProductAvailable = true,
                            ProductCost = 0.170460579530550m,
                            ProductLinksId = 0L,
                            ProductName = "Incredible Plastic Pizza",
                            Published = true,
                            QuantityPerUnity = 34,
                            Ranking = 16,
                            SKU = "ed61e61ucch6tuhs",
                            Slug = "perferendis-nulla-quam",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Health",
                            UnitPrice = 17.119715650156000m,
                            UnitSize = 6.785222825959900m,
                            UnitWeight = 0.58983929855275863,
                            UnitsInStock = 4,
                            UnitsOnOrder = 4,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 1, 55, 50, 674, DateTimeKind.Local).AddTicks(7501),
                            VendorId = 16L
                        },
                        new
                        {
                            Id = 17L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 17L,
                            CategoryId = 17L,
                            CreatedAt = new DateTime(2018, 11, 16, 15, 24, 22, 511, DateTimeKind.Local).AddTicks(362),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 619, DateTimeKind.Unspecified).AddTicks(904), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 17L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "cupiditate",
                            OldPrice = "R$176.29",
                            PreOrderAvailabilityStartDate = new DateTime(2019, 9, 16, 7, 44, 0, 497, DateTimeKind.Local).AddTicks(8639),
                            Price = "R$56.80",
                            ProductAvailable = true,
                            ProductCost = 0.1110484740282630m,
                            ProductLinksId = 0L,
                            ProductName = "Incredible Metal Chair",
                            Published = true,
                            QuantityPerUnity = 98,
                            Ranking = 17,
                            SKU = "4gkyxrlgq7xviq7l",
                            Slug = "tempore-molestiae-at",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Automotive",
                            UnitPrice = 35.7891173268618000m,
                            UnitSize = 1.3479102735165100m,
                            UnitWeight = 0.79704528199371194,
                            UnitsInStock = 7,
                            UnitsOnOrder = 4,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 10, 33, 16, 519, DateTimeKind.Local).AddTicks(4761),
                            VendorId = 17L
                        },
                        new
                        {
                            Id = 18L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 18L,
                            CategoryId = 18L,
                            CreatedAt = new DateTime(2019, 6, 1, 8, 51, 53, 747, DateTimeKind.Local).AddTicks(8637),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 619, DateTimeKind.Unspecified).AddTicks(1244), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 18L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = "adipisci",
                            OldPrice = "R$96.93",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 5, 26, 9, 21, 13, 809, DateTimeKind.Local).AddTicks(8554),
                            Price = "R$20.00",
                            ProductAvailable = true,
                            ProductCost = 0.5656399478044550m,
                            ProductLinksId = 0L,
                            ProductName = "Fantastic Rubber Towels",
                            Published = true,
                            QuantityPerUnity = 30,
                            Ranking = 18,
                            SKU = "iunz7inn4pr1gqg5",
                            Slug = "enim-non-ipsum",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Home",
                            UnitPrice = 92.9980464247046000m,
                            UnitSize = 4.4747426288550400m,
                            UnitWeight = 0.16194738036112272,
                            UnitsInStock = 3,
                            UnitsOnOrder = 8,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 1, 3, 10, 236, DateTimeKind.Local).AddTicks(6807),
                            VendorId = 18L
                        },
                        new
                        {
                            Id = 19L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 19L,
                            CategoryId = 19L,
                            CreatedAt = new DateTime(2018, 11, 16, 4, 2, 41, 733, DateTimeKind.Local).AddTicks(1462),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 619, DateTimeKind.Unspecified).AddTicks(1608), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 19L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = @"Possimus nulla quia illo officiis.
Excepturi nihil aut autem et.",
                            OldPrice = "R$194.20",
                            PreOrderAvailabilityStartDate = new DateTime(2019, 10, 14, 9, 3, 49, 919, DateTimeKind.Local).AddTicks(9),
                            Price = "R$16.34",
                            ProductAvailable = true,
                            ProductCost = 0.3338875944418310m,
                            ProductLinksId = 0L,
                            ProductName = "Incredible Wooden Keyboard",
                            Published = true,
                            QuantityPerUnity = 44,
                            Ranking = 19,
                            SKU = "azs0tsun3udet89a",
                            Slug = "veritatis-voluptates-dolores",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Baby",
                            UnitPrice = 46.9098170972009000m,
                            UnitSize = 4.5746763444387700m,
                            UnitWeight = 0.6447473474055283,
                            UnitsInStock = 1,
                            UnitsOnOrder = 5,
                            UpdatedOnUtc = new DateTime(2019, 9, 9, 2, 35, 30, 882, DateTimeKind.Local).AddTicks(856),
                            VendorId = 19L
                        },
                        new
                        {
                            Id = 20L,
                            AllowCustomerReview = false,
                            ApprovedRatingSum = 0,
                            ApprovedTotalReviews = 0,
                            AvailableForPreorder = false,
                            BrandId = 20L,
                            CategoryId = 20L,
                            CreatedAt = new DateTime(2019, 9, 7, 7, 29, 12, 455, DateTimeKind.Local).AddTicks(9750),
                            Discount = 0m,
                            DiscountAvailable = false,
                            HasDiscountApplied = false,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 619, DateTimeKind.Unspecified).AddTicks(2046), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaId = 20L,
                            NotApprovedRatingSum = 0,
                            NotApprovedTotalReviews = 0,
                            NotReturnable = false,
                            Note = @"In consectetur sint tenetur accusantium cumque.
Sit possimus consectetur quae ea.
Sit soluta ipsum.",
                            OldPrice = "R$57.87",
                            PreOrderAvailabilityStartDate = new DateTime(2020, 6, 4, 4, 42, 20, 920, DateTimeKind.Local).AddTicks(7368),
                            Price = "R$23.79",
                            ProductAvailable = true,
                            ProductCost = 0.8227091333003290m,
                            ProductLinksId = 0L,
                            ProductName = "Tasty Cotton Bacon",
                            Published = true,
                            QuantityPerUnity = 12,
                            Ranking = 20,
                            SKU = "thrujbdpa6hs3j8r",
                            Slug = "ea-maiores-voluptas",
                            Status = "Good",
                            StockTrackingIsEnabled = true,
                            TypeName = "Baby",
                            UnitPrice = 23.25793217088000m,
                            UnitSize = 1.621998046348800m,
                            UnitWeight = 0.47000640419777778,
                            UnitsInStock = 1,
                            UnitsOnOrder = 6,
                            UpdatedOnUtc = new DateTime(2019, 9, 8, 15, 9, 51, 849, DateTimeKind.Local).AddTicks(6146),
                            VendorId = 20L
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Common.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(500);

                    b.Property<string>("Complement")
                        .HasMaxLength(250);

                    b.Property<string>("Country");

                    b.Property<string>("District");

                    b.Property<string>("FirstAddress")
                        .HasMaxLength(250);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Number");

                    b.Property<long>("OwnerId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(9);

                    b.Property<string>("SecondAddress")
                        .HasMaxLength(250);

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("WhoReceives");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Grande Cecíliado Descoberto",
                            FirstAddress = "Marcelo Rua",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 141, DateTimeKind.Unspecified).AddTicks(5456), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "940",
                            OwnerId = 0L,
                            PhoneNumber = "(81) 8480-7756",
                            PostalCode = "67169-238",
                            SecondAddress = "Apto. 622",
                            State = "Amazonas",
                            Street = "4466 Júlia Rua"
                        },
                        new
                        {
                            Id = 2L,
                            City = "Reisdo Descoberto",
                            FirstAddress = "Carvalho Marginal",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(1460), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "509",
                            OwnerId = 0L,
                            PhoneNumber = "+55 (23) 0650-6201",
                            PostalCode = "06264",
                            SecondAddress = "Casa 5",
                            State = "Mato Grosso",
                            Street = "9682 Saraiva Avenida"
                        },
                        new
                        {
                            Id = 3L,
                            City = "Nogueirade Nossa Senhora",
                            FirstAddress = "Braga Ponte",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(2728), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "996",
                            OwnerId = 0L,
                            PhoneNumber = "(88) 1410-7711",
                            PostalCode = "85884",
                            SecondAddress = "Sobrado 72",
                            State = "Maranhão",
                            Street = "7316 Alexandre Alameda"
                        },
                        new
                        {
                            Id = 4L,
                            City = "Grande Félix",
                            FirstAddress = "Martins Marginal",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(3302), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "1294",
                            OwnerId = 0L,
                            PhoneNumber = "(38) 2251-2720",
                            PostalCode = "04589-435",
                            SecondAddress = "Apto. 840",
                            State = "Roraima",
                            Street = "372 Batista Alameda"
                        },
                        new
                        {
                            Id = 5L,
                            City = "Nova Joanado Sul",
                            FirstAddress = "Franco Marginal",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(3846), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "4183",
                            OwnerId = 0L,
                            PhoneNumber = "+55 (37) 7100-4115",
                            PostalCode = "31509-742",
                            SecondAddress = "Quadra 44",
                            State = "Pará",
                            Street = "708 Sara Viela"
                        },
                        new
                        {
                            Id = 6L,
                            City = "Nova Natanieldo Norte",
                            FirstAddress = "Braga Rua",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(4432), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "2051",
                            OwnerId = 0L,
                            PhoneNumber = "(37) 12628-8071",
                            PostalCode = "67426-858",
                            SecondAddress = "Quadra 96",
                            State = "Rio Grande do Sul",
                            Street = "664 Tertuliano Viela"
                        },
                        new
                        {
                            Id = 7L,
                            City = "Município de Kléber",
                            FirstAddress = "Pereira Rodovia",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(4998), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "12803",
                            OwnerId = 0L,
                            PhoneNumber = "(91) 4473-4302",
                            PostalCode = "91145",
                            SecondAddress = "Sobrado 80",
                            State = "Ceará",
                            Street = "60411 Carvalho Marginal"
                        },
                        new
                        {
                            Id = 8L,
                            City = "Nova Yango",
                            FirstAddress = "Carlos Travessa",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(5543), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "87530",
                            OwnerId = 0L,
                            PhoneNumber = "(97) 3072-3070",
                            PostalCode = "47127-472",
                            SecondAddress = "Apto. 290",
                            State = "Rondônia",
                            Street = "5570 Albuquerque Rua"
                        },
                        new
                        {
                            Id = 9L,
                            City = "Nova Elísio",
                            FirstAddress = "Paula Ponte",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(6114), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "986",
                            OwnerId = 0L,
                            PhoneNumber = "(18) 71716-7491",
                            PostalCode = "43789-159",
                            SecondAddress = "Lote 73",
                            State = "Goiás",
                            Street = "302 Melo Viela"
                        },
                        new
                        {
                            Id = 10L,
                            City = "Vila Lucasdo Descoberto",
                            FirstAddress = "Santos Rodovia",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 161, DateTimeKind.Unspecified).AddTicks(7406), new TimeSpan(0, 0, 0, 0, 0)),
                            Number = "5882",
                            OwnerId = 0L,
                            PhoneNumber = "(72) 7256-6005",
                            PostalCode = "16812",
                            SecondAddress = "Apto. 286",
                            State = "Rio de Janeiro",
                            Street = "91679 Santos Avenida"
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.StormyCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPF")
                        .HasMaxLength(9);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("CustomerReviewsId");

                    b.Property<long>("CustomerWishlistId");

                    b.Property<long?>("DefaultBillingAddressId");

                    b.Property<long?>("DefaultShippingAddressId");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CustomerWishlistId")
                        .IsUnique();

                    b.HasIndex("DefaultBillingAddressId");

                    b.HasIndex("DefaultShippingAddressId");

                    b.ToTable("StormyCustomer");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.Wishlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.HasKey("Id");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.WishlistItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedAt");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("ProductId");

                    b.Property<long?>("ProductId1");

                    b.Property<long>("WishlistId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId1");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Entity");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 12, 17, 49, 560, DateTimeKind.Unspecified).AddTicks(2976), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ergonomic Frozen Tuna",
                            Slug = "et-quidem-nisi"
                        },
                        new
                        {
                            Id = 2L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 14, 9, 30, 304, DateTimeKind.Unspecified).AddTicks(1407), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Unbranded Fresh Sausages",
                            Slug = "ut-iure-ratione"
                        },
                        new
                        {
                            Id = 3L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 12, 9, 2, 431, DateTimeKind.Unspecified).AddTicks(3501), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Small Soft Car",
                            Slug = "facilis-et-animi"
                        },
                        new
                        {
                            Id = 4L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 17, 30, 28, 800, DateTimeKind.Unspecified).AddTicks(1127), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sleek Fresh Car",
                            Slug = "rem-delectus-saepe"
                        },
                        new
                        {
                            Id = 5L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 4, 26, 15, 881, DateTimeKind.Unspecified).AddTicks(721), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ergonomic Metal Bike",
                            Slug = "et-repellat-vero"
                        },
                        new
                        {
                            Id = 6L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 9, 39, 20, 630, DateTimeKind.Unspecified).AddTicks(3012), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Unbranded Concrete Tuna",
                            Slug = "placeat-iure-voluptatem"
                        },
                        new
                        {
                            Id = 7L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 16, 13, 13, 448, DateTimeKind.Unspecified).AddTicks(1108), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Fantastic Plastic Hat",
                            Slug = "expedita-nam-ad"
                        },
                        new
                        {
                            Id = 8L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 15, 40, 24, 192, DateTimeKind.Unspecified).AddTicks(8222), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Licensed Cotton Cheese",
                            Slug = "voluptas-nihil-aut"
                        },
                        new
                        {
                            Id = 9L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 21, 33, 53, 570, DateTimeKind.Unspecified).AddTicks(6633), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ergonomic Rubber Shirt",
                            Slug = "tempore-qui-quibusdam"
                        },
                        new
                        {
                            Id = 10L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 11, 56, 20, 647, DateTimeKind.Unspecified).AddTicks(2133), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Intelligent Metal Shirt",
                            Slug = "iure-nostrum-ducimus"
                        },
                        new
                        {
                            Id = 11L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 22, 14, 45, 295, DateTimeKind.Unspecified).AddTicks(4325), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sleek Cotton Salad",
                            Slug = "labore-in-aut"
                        },
                        new
                        {
                            Id = 12L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 22, 27, 35, 472, DateTimeKind.Unspecified).AddTicks(2396), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Awesome Granite Bacon",
                            Slug = "corporis-et-ut"
                        },
                        new
                        {
                            Id = 13L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 11, 27, 56, 452, DateTimeKind.Unspecified).AddTicks(9560), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Gorgeous Cotton Mouse",
                            Slug = "exercitationem-placeat-placeat"
                        },
                        new
                        {
                            Id = 14L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 11, 26, 52, 865, DateTimeKind.Unspecified).AddTicks(4242), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Handcrafted Concrete Car",
                            Slug = "itaque-modi-velit"
                        },
                        new
                        {
                            Id = 15L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 17, 56, 52, 900, DateTimeKind.Unspecified).AddTicks(2233), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Handcrafted Wooden Ball",
                            Slug = "autem-dolorem-eos"
                        },
                        new
                        {
                            Id = 16L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 8, 15, 30, 19, 414, DateTimeKind.Unspecified).AddTicks(8765), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tasty Fresh Computer",
                            Slug = "consequuntur-dolores-occaecati"
                        },
                        new
                        {
                            Id = 17L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 23, 59, 13, 505, DateTimeKind.Unspecified).AddTicks(6153), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Small Rubber Pants",
                            Slug = "fugiat-error-quos"
                        },
                        new
                        {
                            Id = 18L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 6, 27, 13, 104, DateTimeKind.Unspecified).AddTicks(527), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Gorgeous Concrete Computer",
                            Slug = "ut-cumque-ad"
                        },
                        new
                        {
                            Id = 19L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 11, 3, 25, 75, DateTimeKind.Unspecified).AddTicks(9840), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Rustic Fresh Gloves",
                            Slug = "ex-error-et"
                        },
                        new
                        {
                            Id = 20L,
                            EntityId = 1L,
                            EntityTypeId = "Product",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 7, 9, 11, 57, 646, DateTimeKind.Unspecified).AddTicks(820), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Fantastic Rubber Sausages",
                            Slug = "autem-aspernatur-vitae"
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.EntityType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<string>("AreaName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMenuable");

                    b.Property<string>("RoutingAction")
                        .HasMaxLength(450);

                    b.Property<string>("RoutingController")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.Media", b =>
                {
                    b.Property<long>("Id");

                    b.Property<string>("Caption");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("MediaType");

                    b.Property<string>("SeoFileName");

                    b.HasKey("Id");

                    b.ToTable("Media");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 2081655719,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 13, 2, 3, 948, DateTimeKind.Unspecified).AddTicks(309), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 2L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -895221300,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 18, 27, 13, 477, DateTimeKind.Unspecified).AddTicks(4639), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 3L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -1976330345,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 5, 15, 18, 24, 794, DateTimeKind.Unspecified).AddTicks(6096), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 4L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -872456354,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 1, 19, 6, 28, 451, DateTimeKind.Unspecified).AddTicks(8031), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 5L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 286799546,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 2, 19, 23, 1, 793, DateTimeKind.Unspecified).AddTicks(5540), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 6L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 1371729843,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 2, 1, 37, 27, 140, DateTimeKind.Unspecified).AddTicks(8371), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 7L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 553967003,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 5, 15, 5, 11, 388, DateTimeKind.Unspecified).AddTicks(9957), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 8L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -1771742410,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 1, 18, 37, 27, 298, DateTimeKind.Unspecified).AddTicks(3613), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 9L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -1674924810,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 12, 41, 2, 537, DateTimeKind.Unspecified).AddTicks(9048), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 10L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -551349145,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 2, 35, 56, 283, DateTimeKind.Unspecified).AddTicks(8843), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 11L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 2014682459,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 1, 4, 38, 15, 697, DateTimeKind.Unspecified).AddTicks(5533), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 12L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -484212623,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 3, 13, 18, 39, 756, DateTimeKind.Unspecified).AddTicks(5763), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 13L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -982567320,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 6, 16, 12, 22, 423, DateTimeKind.Unspecified).AddTicks(865), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 14L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 275599984,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 4, 4, 32, 27, 854, DateTimeKind.Unspecified).AddTicks(9563), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 15L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 1719033700,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 27, 11, 20, 51, 623, DateTimeKind.Unspecified).AddTicks(5717), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 16L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 1639770015,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 5, 0, 53, 18, 410, DateTimeKind.Unspecified).AddTicks(8939), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 17L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -1959132500,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 31, 1, 12, 40, 289, DateTimeKind.Unspecified).AddTicks(3287), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 18L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -499278568,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 14, 34, 3, 217, DateTimeKind.Unspecified).AddTicks(46), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 19L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = -1721592484,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 28, 13, 5, 38, 590, DateTimeKind.Unspecified).AddTicks(3782), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        },
                        new
                        {
                            Id = 20L,
                            FileName = "http://lorempixel.com/640/480/fashion",
                            FileSize = 1876426592,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 27, 0, 26, 10, 975, DateTimeKind.Unspecified).AddTicks(1613), new TimeSpan(0, 0, 0, 0, 0)),
                            MediaType = 1
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Order.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Price");

                    b.Property<string>("ProductName");

                    b.Property<int>("Quantity");

                    b.Property<long>("ShipmentId");

                    b.Property<long>("StormyOrderId");

                    b.Property<long>("StormyProductId");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("StormyOrderId");

                    b.HasIndex("StormyProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Payments.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("FailureMessage");

                    b.Property<string>("GatewayTransactionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<decimal>("PaymentFee");

                    b.Property<string>("PaymentMethod");

                    b.Property<int>("PaymentStatus");

                    b.Property<long>("StormyOrderId");

                    b.HasKey("Id");

                    b.HasIndex("StormyOrderId")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("RatingLevel");

                    b.Property<string>("ReviewerName");

                    b.Property<long>("StormyCustomerId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("StormyCustomerId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Settings.AppSettings", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsVisibleInCommonSettingPage");

                    b.Property<string>("Module")
                        .HasMaxLength(450);

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BillingAddressId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal>("DeliveryCost");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<long>("DestinationAddressId");

                    b.Property<decimal>("Diameter");

                    b.Property<decimal>("Height");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<decimal>("Price");

                    b.Property<string>("ShipmentMethod");

                    b.Property<string>("ShipmentProviderName");

                    b.Property<DateTime>("ShippedDate");

                    b.Property<long>("StormyCustomerId");

                    b.Property<decimal>("TotalWeight");

                    b.Property<string>("TrackNumber")
                        .HasMaxLength(250);

                    b.Property<string>("UserId");

                    b.Property<string>("WhoReceives");

                    b.Property<decimal>("Width");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("DestinationAddressId");

                    b.HasIndex("StormyCustomerId");

                    b.ToTable("Shipment");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            BillingAddressId = 0L,
                            Comment = "a single comment",
                            CreatedOn = new DateTime(2019, 9, 9, 3, 16, 6, 727, DateTimeKind.Utc).AddTicks(7409),
                            DeliveryCost = 22.29m,
                            DeliveryDate = new DateTime(2019, 9, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            DestinationAddressId = 0L,
                            Diameter = 0m,
                            Height = 0m,
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 9, 3, 16, 6, 727, DateTimeKind.Unspecified).AddTicks(7402), new TimeSpan(0, 0, 0, 0, 0)),
                            Price = 20.99m,
                            ShippedDate = new DateTime(2019, 9, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            StormyCustomerId = 0L,
                            TotalWeight = 0.400m,
                            TrackNumber = "4d4d8791-620b-47c2-a0a8-f2c071cae2d3",
                            Width = 0m
                        });
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipping.ShipmentItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<int>("OrderItemId");

                    b.Property<int>("Quantity");

                    b.Property<int>("ShipmentId");

                    b.Property<long?>("ShipmentId1");

                    b.HasKey("Id");

                    b.HasIndex("ShipmentId1");

                    b.ToTable("ShipmentItem");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.StormyOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<long>("CustomerId");

                    b.Property<decimal>("DeliveryCost");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<decimal>("Discount");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("OrderDate");

                    b.Property<Guid>("OrderUniqueKey");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<long>("PaymentId");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("PickUpInStore");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<long>("ShipmentId");

                    b.Property<DateTime>("ShippedDate");

                    b.Property<long?>("ShippingAddressId");

                    b.Property<string>("ShippingMethod");

                    b.Property<int>("ShippingStatus");

                    b.Property<int>("Status");

                    b.Property<decimal>("Tax");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("TotalWeight");

                    b.Property<string>("TrackNumber");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipmentId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("StormyOrder");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.StormyVendor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<long?>("AddressId1");

                    b.Property<string>("CompanyName");

                    b.Property<string>("ContactTitle");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LastModified");

                    b.Property<string>("Logo");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.Property<string>("SizeUrl");

                    b.Property<string>("TypeGoods");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("AddressId1");

                    b.ToTable("StormyVendor");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressId = 0,
                            CompanyName = "Franco, Moraes and Macedo",
                            ContactTitle = "Carlton82",
                            Email = "Carlton88@hotmail.com",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 13, 6, 23, 47, 463, DateTimeKind.Unspecified).AddTicks(5408), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=101515574",
                            Note = "quia",
                            Phone = "(11) 17780-3370",
                            SizeUrl = "0",
                            TypeGoods = "Jewelery",
                            WebSite = "dalila.info"
                        },
                        new
                        {
                            Id = 2L,
                            AddressId = 0,
                            CompanyName = "Oliveira - Batista",
                            ContactTitle = "Gail_Silva",
                            Email = "Gail_Silva82@bol.com.br",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 24, 1, 38, 9, 535, DateTimeKind.Unspecified).AddTicks(5661), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=2001850641",
                            Note = "Provident facilis reiciendis id.",
                            Phone = "(09) 0088-4976",
                            SizeUrl = "0",
                            TypeGoods = "Automotive & Shoes",
                            WebSite = "fabrícia.com"
                        },
                        new
                        {
                            Id = 3L,
                            AddressId = 0,
                            CompanyName = "Melo, Reis and Carvalho",
                            ContactTitle = "Marta_Franco",
                            Email = "Marta.Franco69@live.com",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 22, 10, 39, 12, 242, DateTimeKind.Unspecified).AddTicks(6205), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=1804800036",
                            Note = "Veritatis quis sequi voluptatem veniam maiores. Similique ut consequatur non fuga molestiae eum. Earum fugit corrupti et iusto. Rerum itaque ut. Consequatur est nihil tenetur et ut repudiandae iusto ipsa.",
                            Phone = "(42) 1414-2559",
                            SizeUrl = "0",
                            TypeGoods = "Grocery & Industrial",
                            WebSite = "víctor.com"
                        },
                        new
                        {
                            Id = 4L,
                            AddressId = 0,
                            CompanyName = "Santos LTDA",
                            ContactTitle = "Brad_Martins",
                            Email = "Brad_Martins20@yahoo.com",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 30, 13, 54, 5, 250, DateTimeKind.Unspecified).AddTicks(1662), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=340707234",
                            Note = "Magni dolor non.",
                            Phone = "(75) 82356-4182",
                            SizeUrl = "0",
                            TypeGoods = "Automotive",
                            WebSite = "joão.name"
                        },
                        new
                        {
                            Id = 5L,
                            AddressId = 0,
                            CompanyName = "Macedo, Moreira and Nogueira",
                            ContactTitle = "David51",
                            Email = "David.Melo@gmail.com",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 4, 4, 49, 45, 252, DateTimeKind.Unspecified).AddTicks(3166), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=343702332",
                            Note = "molestiae",
                            Phone = "+55 (89) 4705-2138",
                            SizeUrl = "0",
                            TypeGoods = "Automotive",
                            WebSite = "márcia.net"
                        },
                        new
                        {
                            Id = 6L,
                            AddressId = 0,
                            CompanyName = "Moraes, Carvalho and Oliveira",
                            ContactTitle = "Jacqueline.Reis",
                            Email = "Jacqueline_Reis@bol.com.br",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 24, 2, 13, 26, 744, DateTimeKind.Unspecified).AddTicks(1812), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=865558548",
                            Note = @"Et praesentium voluptatem voluptas voluptas aliquid provident rerum deserunt.
Delectus commodi non nihil quaerat temporibus.
Omnis voluptate minima distinctio saepe veritatis dicta iste facere.
Qui veritatis voluptatibus voluptatem magni deserunt repudiandae similique.",
                            Phone = "(93) 35934-5115",
                            SizeUrl = "0",
                            TypeGoods = "Tools & Industrial",
                            WebSite = "eduarda.info"
                        },
                        new
                        {
                            Id = 7L,
                            AddressId = 0,
                            CompanyName = "Santos S.A.",
                            ContactTitle = "Tyler1",
                            Email = "Tyler_Xavier61@live.com",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 23, 4, 50, 36, 873, DateTimeKind.Unspecified).AddTicks(2012), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=725377757",
                            Note = "Reprehenderit saepe harum et aut. Aliquam culpa eos vitae cupiditate. Aut explicabo omnis. Ratione perspiciatis quasi qui consectetur consectetur consequuntur. Qui quidem harum recusandae ut est in. Non culpa nulla accusamus.",
                            Phone = "(94) 0352-4923",
                            SizeUrl = "0",
                            TypeGoods = "Clothing",
                            WebSite = "césar.net"
                        },
                        new
                        {
                            Id = 8L,
                            AddressId = 0,
                            CompanyName = "Xavier, Carvalho and Reis",
                            ContactTitle = "Diane69",
                            Email = "Diane.Albuquerque@yahoo.com",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 18, 15, 50, 10, 16, DateTimeKind.Unspecified).AddTicks(1795), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=1431259465",
                            Note = "Aut modi et.",
                            Phone = "+55 (52) 1862-6880",
                            SizeUrl = "0",
                            TypeGoods = "Grocery & Movies",
                            WebSite = "núbia.biz"
                        },
                        new
                        {
                            Id = 9L,
                            AddressId = 0,
                            CompanyName = "Martins - Pereira",
                            ContactTitle = "Winston_Macedo21",
                            Email = "Winston.Macedo@yahoo.com",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 9, 1, 20, 56, 21, 869, DateTimeKind.Unspecified).AddTicks(3052), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=1582359997",
                            Note = "saepe",
                            Phone = "(27) 99525-0648",
                            SizeUrl = "0",
                            TypeGoods = "Automotive",
                            WebSite = "guilherme.net"
                        },
                        new
                        {
                            Id = 10L,
                            AddressId = 0,
                            CompanyName = "Macedo - Carvalho",
                            ContactTitle = "Angel_Franco58",
                            Email = "Angel77@live.com",
                            IsDeleted = false,
                            LastModified = new DateTimeOffset(new DateTime(2019, 8, 17, 16, 4, 4, 821, DateTimeKind.Unspecified).AddTicks(7252), new TimeSpan(0, 0, 0, 0, 0)),
                            Logo = "https://loremflickr.com/320/240?lock=44839909",
                            Note = "Reiciendis cupiditate consequuntur vel iusto id modi incidunt. Quos occaecati aut illo necessitatibus voluptatem optio. Aspernatur qui illo ducimus occaecati. Et perferendis dolore ullam. Laboriosam quam autem provident. Libero ut temporibus ea.",
                            Phone = "(75) 3269-4613",
                            SizeUrl = "0",
                            TypeGoods = "Jewelery",
                            WebSite = "kléber.org"
                        });
                });

            modelBuilder.Entity("StormyCommerce.Infraestructure.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Category", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Category", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeGroup", "Group")
                        .WithMany("Attributes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("StormyProductId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductAttributeValue", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductLink", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("Links")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "LinkedProduct")
                        .WithMany("LinkedProductLinks")
                        .HasForeignKey("LinkedProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductOptionValue", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany("OptionValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplateProductAttribute", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.ProductTemplate", "ProductTemplate")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Category", "Category")
                        .WithOne()
                        .HasForeignKey("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Vendor.StormyVendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.StormyCustomer", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.Wishlist", "CustomerWishlist")
                        .WithOne("Customer")
                        .HasForeignKey("StormyCommerce.Core.Entities.Customer.StormyCustomer", "CustomerWishlistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "DefaultBillingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultBillingAddressId");

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "DefaultShippingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultShippingAddressId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Customer.WishlistItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId1");

                    b.HasOne("StormyCommerce.Core.Entities.Customer.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Entity", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Media.Media", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct")
                        .WithMany("Medias")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Order.OrderItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder", "Order")
                        .WithMany("Items")
                        .HasForeignKey("StormyOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Catalog.Product.StormyProduct", "Product")
                        .WithMany()
                        .HasForeignKey("StormyProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Payments.Payment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.StormyOrder", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("StormyCommerce.Core.Entities.Payments.Payment", "StormyOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Review", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Author")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("StormyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipment", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "DestinationAddress")
                        .WithMany()
                        .HasForeignKey("DestinationAddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("StormyCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Shipping.ShipmentItem", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Shipment", "Shipment")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentId1");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.StormyOrder", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Customer.StormyCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("StormyCommerce.Core.Entities.Vendor.StormyVendor", b =>
                {
                    b.HasOne("StormyCommerce.Core.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId1");
                });
#pragma warning restore 612, 618
        }
    }
}
