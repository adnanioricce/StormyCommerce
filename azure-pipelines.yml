# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- develop

jobs:
- job: Linux
  pool:
    vmImage: 'Ubuntu 16.04'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: '2.2.401'
  - script: dotnet build ./SimplCommerce.sln
    displayName: 'dotnet build'
  - script: ./run-tests.sh
    displayName: 'run tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx' 

- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: '2.2.401'
  - script: dotnet build ./SimplCommerce.sln
    displayName: 'dotnet build'
  - task: PowerShell@2
    inputs:
      filePath: '.\run-tests.ps1'
      errorActionPreference: 'continue'
      ignoreLASTEXITCODE: true
      pwsh: true
    displayName: 'run tests'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx' 
- job: LinuxRelease
  pool:
    vmImage: 'Ubuntu 16.04'
  variables:
    buildConfiguration: 'Release'
  steps:
  - task: DotNetCoreInstaller@0
    inputs:
      packageType: 'sdk'
      version: '2.2.401'
  - script: dotnet build SimplCommerce.sln --configuration $(buildConfiguration)
    displayName: 'dotnet build $(buildConfiguration)'
  - script: ./run-tests.sh
    displayName: 'run tests'    
    condition: succeededOrFailed()
  
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx'  
  - task: DotNetCoreCLI@2
    inputs:
      command: publish 
      publishWebProjects: True
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: True
  - script: dotnet build src/SimplCommerce.WebHost/SimplCommerce.WebHost.csproj 
  - task: PublishBuildArtifacts@1
    displayName: 'publish artifacts'
  - task: Docker@2
    inputs:
      repository: 'adnanioricce/stormycommerce'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      buildContext: '.'
  

